' Gambas module file

' Copyright(C) 2010-2014, Krisztián Kende <nemh@freemail.hu>
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program. If not, see <http://www.gnu.org/licenses/>.

Private Extern Sync() In "libc:6" Exec "sync"
Private Extern Hlink(oldpath As String, newpath As String) As Boolean In "libc:6" Exec "link"
Private Extern Cpertime(sourceitem As String, newitem As String) As Boolean In "/usr/lib/systemback/systemback" Exec "cpertime"
Private Extern Cpdir(sourcedir As String, newdir As String) As Boolean In "/usr/lib/systemback/systemback" Exec "cpdir"
Private ptimer As New Timer As "progress"
Private slock As Stream
Private dlock As Stream
Private wproc As Process
Private tmp As String
Private sdir As String
Private fsdir As String
Private lwdir As String
Private stimer As String
Private sdys As String
Private shrs As String
Private smts As String
Private ssds As String
Private smode As String
Private wpos As String
Private pname As String
Private pname1 As String
Private pname2 As String
Private pname3 As String
Private pname4 As String
Private pname5 As String
Private pname6 As String
Private pname7 As String
Private pname8 As String
Private pname9 As String
Private pname10 As String
Private pname11 As String
Private pname12 As String
Private pname13 As String
Private pname14 As String
Private pname15 As String
Private prun As String
Private cpoint As String
Private pbar As String
Private pnumber As Byte
Private cfupdt As Boolean

Private Function Dclean(dirpath As String, Optional removeroot As Boolean = True)

  Dim item As String

  If IsDir(dirpath)

    For Each item In RDir(dirpath).Sort(gb.Descent)

      If Exist(dirpath & "/" & item)

        With Stat(dirpath & "/" & item)

          Select Case True

            Case .Type = gb.File Or .Type = gb.Link

              Try Kill dirpath & "/" & item

            Case .Type = gb.Directory

              Try Rmdir dirpath & "/" & item

          End Select

        End With

      Endif

    Next

    If removeroot = True Then Try Rmdir dirpath

  Endif

End

Public Sub Main()

  Dim help As String = ("\n Usage: systemback [option]\n\n Options:\n\n  -n, --newbackup          create a new restore point\n\n  -s, --storagedir <path>  get or set restore points storage directory path\n\n  -u, --upgrade            upgrade current system\n                           remove unnecessary files and packages\n\n  -v, --version            output Systemback version number\n\n  -h, --help               show this help\n")

  With Application

    If .Args.Count = 2 And .Args[1] = "sync"

      Sync()

    Else If .Args.Count = 3 And .Args[1] = "rmdir"

      Dclean(.Args[2])

    Else

      If IsDir("/run/shm")

        tmp = "/run/shm/dacc5b5f4502_sb"

      Else If IsDir("/dev/shm")

        tmp = "/dev/shm/dacc5b5f4502_sb"

      Else

        tmp = "/tmp/dacc5b5f4502_sb"

      Endif

      If .Args[1] Like "-{h,-help}"

        Exec ["tput", "bold"] Wait
        Print help
        Exec ["tput", "sgr0"] Wait

      Else If User.Id = 0

        ptimer.Delay = 2000

        If .Args[1] = "schedulerdaemon"

          scheduler

        Else

          configread

          If .Args.Count = 3 And .Args[1] = "rpsync"

            rpsync

          Else If .Args.Count = 5 And .Args[1] = "srsync" And .Args[2] Like "[123456]"

            srsync

          Else If .Args[1] = "copysize"

            copysize

          Else

            Try slock = Lock Left(tmp, RInStr(tmp, "/")) & "systembacklock"

            If Not Error

              Try dlock = Lock "/var/lib/dpkg/lock"

              If Error

                Exec ["tput", "reset"] Wait
                Exec ["tput", "bold"] Wait
                Exec ["tput", "setaf", "1"] Wait
                Error "\n " & ("Unable to get exclusive lock!") & "\n " & ("First, close all package manager.") & "\n"
                Exec ["tput", "sgr0"] Wait
                Quit 4

              Else

                If cfupdt Then configfileupdate

                Select Case True

                  Case .Args.Count = 1

                    clistart

                  Case .Args[1] Like "-{n,-newrestorepoint}"

                    Exec ["tput", "reset"] Wait

                    If IsDir(fsdir) And Access(fsdir, gb.Write)

                      Exec ["tput", "civis"] Wait
                      ptimer.Trigger
                      ptimer.Start
                      pointupgrade
                      newrestorepoint
                      ptimer.Stop
                      Wait 0.1
                      Exec ["tput", "reset"] Wait
                      Quit

                    Else

                      Exec ["tput", "bold"] Wait
                      Exec ["tput", "setaf", "1"] Wait
                      Error "\n " & ("Restore points storage directory is not available or not writable!") & "\n"
                      Exec ["tput", "sgr0"] Wait
                      Quit 10

                    Endif

                  Case .Args[1] Like "-{s,-storagedir}"

                    storagedir

                  Case .Args[1] Like "-{u,-upgrade}"

                    Unlock dlock
                    systemupgrade

                  Case .Args[1] Like "-{v,-version}"

                    Exec ["tput", "bold"] Wait
                    Print "\n " & Trim(File.Load("/usr/share/systemback/version")) & "\n"
                    Exec ["tput", "sgr0"] Wait

                  Case Else

                    Exec ["tput", "reset"] Wait
                    Exec ["tput", "bold"] Wait
                    Exec ["tput", "setaf", "1"] Wait
                    Error help
                    Exec ["tput", "sgr0"] Wait
                    Quit 1

                End Select

              Endif

            Else If .Args[1] = "2Y4d1b5T6b8A"

              systemupgrade

            Else

              Exec ["tput", "reset"] Wait
              Exec ["tput", "bold"] Wait
              Exec ["tput", "setaf", "1"] Wait
              Error "\n " & ("Another Systemback process is currently running, please wait until it\n finishes.") & "\n"
              Exec ["tput", "sgr0"] Wait
              Quit 3

            Endif

          Endif

        Endif

      Else

        Exec ["tput", "reset"] Wait
        Exec ["tput", "bold"] Wait
        Exec ["tput", "setaf", "1"] Wait
        Error "\n " & ("Root privileges are required for running Systemback!") & "\n"
        Exec ["tput", "sgr0"] Wait
        Quit 2

      Endif

    Endif

  End With

End

Private Sub copysize()

  Dim sum As Long

  Do

    If IsDir("/.sbsystemcopy")

      If Not Exist(tmp & "copysize")

        sum = Dir("/.sbsystemcopy").Count
        If IsDir("/.sbsystemcopy/bin") Then sum = sum + RDir("/.sbsystemcopy/bin").Count
        If IsDir("/.sbsystemcopy/boot") Then sum = sum + RDir("/.sbsystemcopy/boot").Count
        If IsDir("/.sbsystemcopy/etc") Then sum = sum + RDir("/.sbsystemcopy/etc").Count
        If IsDir("/.sbsystemcopy/lib") Then sum = sum + RDir("/.sbsystemcopy/lib").Count
        If IsDir("/.sbsystemcopy/lib32") Then sum = sum + RDir("/.sbsystemcopy/lib32").Count
        If IsDir("/.sbsystemcopy/lib64") Then sum = sum + RDir("/.sbsystemcopy/lib64").Count
        If IsDir("/.sbsystemcopy/opt") Then sum = sum + RDir("/.sbsystemcopy/opt").Count
        If IsDir("/.sbsystemcopy/sbin") Then sum = sum + RDir("/.sbsystemcopy/sbin").Count
        If IsDir("/.sbsystemcopy/selinux") Then sum = sum + RDir("/.sbsystemcopy/selinux").Count
        If IsDir("/.sbsystemcopy/srv") Then sum = sum + RDir("/.sbsystemcopy/srv").Count
        If IsDir("/.sbsystemcopy/usr") Then sum = sum + RDir("/.sbsystemcopy/usr").Count
        If IsDir("/.sbsystemcopy/var") Then sum = sum + RDir("/.sbsystemcopy/var").Count
        File.Save(tmp & "copysizecalc", sum)
        Move tmp & "copysizecalc" To tmp & "copysize"

      Endif

      Wait 0.1

    Else

      If Exist(tmp & "copysize") Then Kill tmp & "copysize"
      Break

    Endif

  Loop

End

Private Sub clistart()

  Dim choice As String

  Exec ["tput", "reset"] Wait
  Exec ["tput", "bold"] Wait
  Exec ["tput", "civis"] Wait
  Print "\n " & ("Available restore point(s):") & "\n"

  pointupgrade

  If pname1 <> Null Then Print "  1 ─ " & pname1
  If pname2 <> Null Then Print "  2 ─ " & pname2

  If pname3 <> Null

    If pnumber = 3 Then Exec ["tput", "setaf", "1"] Wait
    Print "  3 ─ " & pname3

  Endif

  If pname4 <> Null

    If pnumber = 4 Then Exec ["tput", "setaf", "1"] Wait
    Print "  4 ─ " & pname4

  Endif

  If pname5 <> Null

    If pnumber = 5 Then Exec ["tput", "setaf", "1"] Wait
    Print "  5 ─ " & pname5

  Endif

  If pname6 <> Null

    If pnumber = 6 Then Exec ["tput", "setaf", "1"] Wait
    Print "  6 ─ " & pname6

  Endif

  If pname7 <> Null

    If pnumber = 7 Then Exec ["tput", "setaf", "1"] Wait
    Print "  7 ─ " & pname7

  Endif

  If pname8 <> Null

    If pnumber = 8 Then Exec ["tput", "setaf", "1"] Wait
    Print "  8 ─ " & pname8

  Endif

  If pname9 <> Null

    If pnumber = 9 Then Exec ["tput", "setaf", "1"] Wait
    Print "  9 ─ " & pname9

  Endif

  If pname10 <> Null

    If pnumber = 10 Then Exec ["tput", "setaf", "1"] Wait
    Print "  A ─ " & pname10

  Endif

  Exec ["tput", "sgr0"] Wait
  Exec ["tput", "bold"] Wait

  If pname11 <> Null Then Print "  B ─ " & pname11
  If pname12 <> Null Then Print "  C ─ " & pname12
  If pname13 <> Null Then Print "  D ─ " & pname13
  If pname14 <> Null Then Print "  E ─ " & pname14
  If pname15 <> Null Then Print "  F ─ " & pname15

  Print "\n G ─ " & ("Create new") & "\n Q ─ " & ("Quit")

  If pname <> Null Then pname = Null

  While pname = Null

    Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

    Select Case True

      Case choice Like "[gG]"

        If prun <> Null Then prun = Null

        Exec ["tput", "reset"] Wait

        If IsDir(fsdir) And Access(fsdir, gb.Write)

          Exec ["tput", "civis"] Wait
          ptimer.Trigger
          ptimer.Start
          newrestorepoint
          ptimer.Stop
          Wait 0.1
          clistart
          Return

        Else

          Exec ["tput", "bold"] Wait
          Exec ["tput", "setaf", "1"] Wait
          Error "\n " & ("Restore points storage directory is not available or not writable!") & "\n"
          Exec ["tput", "sgr0"] Wait
          Quit 10

        Endif

      Case choice Like "[qQ]"

        Exec ["tput", "reset"] Wait
        Quit

      Case choice = 1 And pname1 <> Null

        cpoint = "S01"
        pname = pname1

      Case choice = 2 And pname2 <> Null

        cpoint = "S02"
        pname = pname2

      Case choice = 3 And pname3 <> Null

        cpoint = "S03"
        pname = pname3

      Case choice = 4 And pname4 <> Null

        cpoint = "S04"
        pname = pname4

      Case choice = 5 And pname5 <> Null

        cpoint = "S05"
        pname = pname5

      Case choice = 6 And pname6 <> Null

        cpoint = "S06"
        pname = pname6

      Case choice = 7 And pname7 <> Null

        cpoint = "S07"
        pname = pname7

      Case choice = 8 And pname8 <> Null

        cpoint = "S08"
        pname = pname8

      Case choice = 9 And pname9 <> Null

        cpoint = "S09"
        pname = pname9

      Case choice Like "[aA]" And pname10 <> Null

        cpoint = "S10"
        pname = pname10

      Case choice Like "[bB]" And pname11 <> Null

        cpoint = "H01"
        pname = pname11

      Case choice Like "[cC]" And pname12 <> Null

        cpoint = "H02"
        pname = pname12

      Case choice Like "[dD]" And pname13 <> Null

        cpoint = "H03"
        pname = pname13

      Case choice Like "[eE]" And pname14 <> Null

        cpoint = "H04"
        pname = pname14

      Case choice Like "[fF]" And pname15 <> Null

        cpoint = "H05"
        pname = pname15

    End Select

  Wend

  Exec ["tput", "reset"] Wait
  Exec ["tput", "bold"] Wait
  Exec ["tput", "civis"] Wait
  Print "\n " & ("Selected restore point:") & "\n\n  " & pname & "\n\n 1 ─ " & ("Delete") & "\n 2 ─ " & ("System restore") & " ▸\n B ─ ◂ " & ("Back")

  Do

    Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

    Select Case choice

      Case 1

        pointdelete
        clistart
        Return

      Case 2

        restore
        Return

      Case Like "[bB]"

        clistart
        Return

    End Select

  Loop

End

Private Sub pointdelete()

  prun = ("Deleting restore point")

  Exec ["tput", "reset"] Wait
  Exec ["tput", "civis"] Wait

  ptimer.Trigger
  ptimer.Start

  Move fsdir & "/" & cpoint & "_" & pname To fsdir & "/.DELETED_" & pname
  wproc = Exec ["systemback", "rmdir", fsdir & "/.DELETED_" & pname] For Read
  wprocwait

  prun = ("Emptying cache")
  wproc = Exec ["systemback", "sync"] For Read
  wprocwait
  File.Save("/proc/sys/vm/drop_caches", "3")

  ptimer.Stop
  Wait 0.1
  clistart

End

Private Sub storagedir()

  Dim ndir As String
  Dim idir As Byte
  Dim check As Boolean

  If Application.Args.Count = 2

    Exec ["tput", "bold"] Wait
    Print "\n " & sdir & "\n"
    Exec ["tput", "sgr0"] Wait

  Else

    With Application

      ndir = .Args[2]

      If .Args.Count > 3

        For idir = 3 To .Args.Count

          ndir &= " " & .Args[idir]

        Next

      Endif

    End With

    If ndir Not Ends "/Systemback" And ndir Not Like "/{bin,boot,cdrom,dev,etc,lib,opt,proc,root,run,sbin,selinux,srv,sys,tmp,usr,var}" And ndir Not Like "/{bin,boot,cdrom,dev,etc,lib,opt,proc,root,run,sbin,selinux,srv,sys,tmp,usr,var}/*" And ndir Not Ends "/" And File.Load("/etc/passwd") Not Like "*:" & ndir & ":*"

      Try File.Save(ndir & "/dacc5b5f4502_sbdirtestfile", Null)

      If Error

        check = True

      Else

        Chmod ndir & "/dacc5b5f4502_sbdirtestfile" To "rwxrwxrw-"

        If Stat(ndir & "/dacc5b5f4502_sbdirtestfile").Auth = "rwxrwxrw-"

          If sdir <> ndir

            If IsDir(fsdir)

              If Dir(fsdir).Count = 0

                Try Rmdir fsdir

              Else If Dir(fsdir).Count = 1 And Exist(fsdir & "/.sbschedule")

                Try Kill fsdir & "/.sbschedule"
                If Not Error Then Try Rmdir fsdir

              Endif

            Endif

            sdir = ndir
            configfileupdate
            fsdir = sdir & "/Systemback"

          Endif

          If Not IsDir(fsdir)

            Try Mkdir fsdir

            If Error

              Move fsdir To fsdir & "_" & Int(Rnd(1000000000, 9999999999))
              Mkdir fsdir

            Endif

          Endif

          If Not Exist(fsdir & "/.sbschedule") Then File.Save(fsdir & "/.sbschedule", Null)

          Exec ["tput", "bold"] Wait
          Print "\n " & ("The specified storage directory path is set.") & "\n"
          Exec ["tput", "sgr0"] Wait

        Else

          check = True

        Endif

        Kill ndir & "/dacc5b5f4502_sbdirtestfile"

      Endif

    Else

      check = True

    Endif

    If check

      Exec ["tput", "reset"] Wait
      Exec ["tput", "bold"] Wait
      Exec ["tput", "setaf", "1"] Wait
      Error "\n " & ("The specified storage directory path has not been set!") & "\n"
      Exec ["tput", "sgr0"] Wait
      Quit 5

    Endif

  Endif

End

Private Sub systemupgrade()

  Dim vmlinuz, kernel, kver, subk, item, rklist, iplist As String
  Dim cdown, cup As Byte

  Exec ["apt-get", "update"] Wait

  Do

    If rklist <> Null Then rklist = Null
    If iplist <> Null Then iplist = Null

    wproc = Exec ["apt-get", "install", "-fym", "--force-yes"] Wait

    If wproc.Value = 0

      wproc = Exec ["dpkg", "--configure", "-a"] Wait

      If wproc.Value = 0

        wproc = Exec ["apt-get", "dist-upgrade", "--no-install-recommends", "-ym", "--force-yes"] Wait

        If wproc.Value = 0

          wproc = Exec ["apt-get", "autoremove", "--purge", "-y"] Wait

          If wproc.Value = 0

            For Each vmlinuz In Dir("/boot", "vmlinuz-*", gb.File).Sort(gb.Descent)

              vmlinuz = Right(vmlinuz, -8)
              kernel = Left(vmlinuz, InStr(vmlinuz, "-") - 1)
              kver = Mid(vmlinuz, Len(kernel) + 2, InStr(vmlinuz, "-", Len(kernel) + 2) - Len(kernel) - 2)

              If IsInteger(kver) And vmlinuz Begins kernel & "-" & kver & "-"

                If rklist Not Like "*linux-image-" & kernel & "-" & kver & "-*"

                  For cup = 1 To 100 Step 1

                    subk = kernel & "-" & (kver - cup)

                    For Each item In Dir("/boot", "vmlinuz-*", gb.File)

                      If item Begins "vmlinuz-" & subk & "-"

                        rklist &= " " & subk & "-*"

                      Endif

                    Next

                  Next

                Endif

              Endif

            Next

            If rklist <> Null Then wproc = Exec ["bash", "-c", "apt-get autoremove --purge " & rklist] Wait

            If wproc.Value = 0 Or wproc.Value = 1

              wproc = Exec ["dpkg", "-l"] For Read
              While Not Eof(wproc)
                Line Input #wproc, item

                If item Begins "rc" Then iplist &= " " & Mid(item, 5, InStr(item, " ", 5) - 5)

              Wend

              If iplist <> Null Then Exec ["bash", "-c", "dpkg --purge " & iplist] Wait

              Exec ["apt-get", "clean"] Wait

              For Each item In Dir("/var/cache/apt", "*.bin.*", gb.File)

                Kill "/var/cache/apt/" & item

              Next

              For Each item In Dir("/lib/modules", "[^.]*", gb.Directory)

                If Not Exist("/boot/vmlinuz-" & item) Then Dclean("/lib/modules/" & item)

              Next

              Break

            Endif

          Endif

        Endif

      Endif

    Else

      Exec ["dpkg", "--configure", "-a"] Wait

    Endif

    Exec ["tput", "reset"] Wait
    Exec ["tput", "civis"] Wait

    If cdown <> 3 Then cdown = 3

    While cdown <> 0

      Exec ["tput", "bold"] Wait
      Exec ["tput", "setaf", "1"] Wait
      Error "\n " & ("An error occurred while upgrading the system!") & "\n"
      Exec ["tput", "sgr0"] Wait
      Print " " & ("Restart upgrade ...") & " " & cdown

      Wait 1

      cdown = cdown - 1

      Exec ["tput", "cup", "0", "0"] Wait

    Wend

    Exec ["tput", "reset"] Wait

  Loop

End

Private Sub restore()

  Dim ofile As File
  Dim cline, choice, fstab1, fstab2, mntdev As String
  Dim greinst, fsave, rstart, rmode, mthd As Byte

  Exec ["tput", "reset"] Wait
  Exec ["tput", "bold"] Wait
  Exec ["tput", "civis"] Wait
  Print "\n " & ("Restore with the following restore point:") & "\n\n  " & pname & "\n\n " & ("Restore with the following restore method:") & "\n\n  1 ─ " & ("Full restore") & "\n  2 ─ " & ("System files restore") & "\n\n  " & ("Users configuration files restore") & "\n\n   3 ─ " & ("Complete configuration files restore") & "\n   4 ─ " & ("Keep newly installed configuration files") & "\n\n C ─ " & ("Cancel")

  While rmode = 0

    Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

    Select Case choice

      Case Like "[cC]"

        clistart
        Return

      Case 1

        rmode = 1

      Case 2

        rmode = 2

      Case 3

        rmode = 3

      Case 4

        rmode = 4

    End Select

  Wend

  Exec ["tput", "reset"] Wait
  Exec ["tput", "bold"] Wait
  Exec ["tput", "civis"] Wait
  Print "\n " & ("Restore with the following restore point:") & "\n\n  " & pname & "\n\n " & ("Restore with the following restore method:") & "\n"

  Select Case rmode

    Case 1

      Print "  " & ("Full restore") & "\n"

    Case 2

      Print "  " & ("System files restore") & "\n"

    Case 3

      Print "  " & ("Complete configuration files restore") & "\n"

    Case Else

      Print "  " & ("Configuration files restore") & "\n"

  End Select

  If rmode = 1 Or rmode = 2

    If Exist("/etc/fstab")

      Print " " & ("You want to keep the current fstab file? (Y/N)")

      While fsave = 0

        Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

        If choice Like "[yYiIkKsS]"

          fsave = 1

        Else If choice Like "[nNeE]"

          fsave = 2

        Endif

      Wend

      Exec ["tput", "reset"] Wait
      Exec ["tput", "bold"] Wait
      Exec ["tput", "civis"] Wait
      Print "\n " & ("Restore with the following restore point:") & "\n\n  " & pname & "\n\n " & ("Restore with the following restore method:") & "\n"

      If rmode = 1

        Print "  " & ("Full restore") & "\n"

      Else

        Print "  " & ("System files restore") & "\n"

      Endif

      Print " " & ("You want to keep the current fstab file? (Y/N)") & " " & choice & "\n\n " & ("Reinstall the GRUB 2 bootloader? (Y/N)")

      While greinst = 0

        Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

        If choice Like "[yYiIkKsS]"

          greinst = 1

        Else If choice Like "[nNeE]"

          greinst = 2

        Endif

      Wend

      Exec ["tput", "reset"] Wait
      Exec ["tput", "bold"] Wait
      Exec ["tput", "civis"] Wait
      Print "\n " & ("Restore with the following restore point:") & "\n\n  " & pname & "\n\n " & ("Restore with the following restore method:") & "\n"

      If rmode = 1

        Print "  " & ("Full restore") & "\n"

      Else

        Print "  " & ("System files restore") & "\n"

      Endif

      Print " " & ("You want to keep the current fstab file? (Y/N)") & " " & choice & "\n\n " & ("Reinstall the GRUB 2 bootloader? (Y/N)") & " " & choice & "\n\n " & ("Start the restore? (Y/N)")

    Else

      Print " " & ("Reinstall the GRUB 2 bootloader? (Y/N)")

      While fsave = 0

        Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

        If choice Like "[yYiIkKsS]"

          fsave = 1

        Else If choice Like "[nNeE]"

          fsave = 2

        Endif

      Wend

      Exec ["tput", "reset"] Wait
      Exec ["tput", "bold"] Wait
      Exec ["tput", "civis"] Wait
      Print "\n " & ("Restore with the following restore point:") & "\n\n  " & pname & "\n\n " & ("Restore with the following restore method:") & "\n"

      If rmode = 1

        Print "  " & ("Full restore") & "\n"

      Else

        Print "  " & ("System files restore") & "\n"

      Endif

      Print " " & ("Reinstall the GRUB 2 bootloader? (Y/N)") & " " & choice & "\n\n " & ("Start the restore? (Y/N)")

    Endif

  Else

    Print " " & ("Start the restore? (Y/N)")

  Endif

  While rstart = 0

    Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

    If choice Like "[yYiIkKsS]"

      rstart = 1

    Else If choice Like "[nNeE]"

      rstart = 2

    Endif

  Wend

  If rstart = 1

    If Exist(tmp & "restorepercent") Then Kill tmp & "restorepercent"

    If rmode = 1

      mthd = 1
      prun = ("Restoring the full system")

    Else If rmode = 2

      mthd = 2
      prun = ("Restoring the system files")

    Else

      If rmode = 3 Then mthd = 5 Else mthd = 3
      prun = ("Restoring users configuration files")

    Endif

    Exec ["tput", "reset"] Wait
    Exec ["tput", "civis"] Wait

    ptimer.Trigger
    ptimer.Start

    If fsave = 1

      Exec ["sha1sum", "/etc/fstab"] To fstab1
      fstab1 = Left(fstab1, InStr(fstab1, " ") - 1)
      Exec ["sha1sum", fsdir & "/" & cpoint & "_" & pname & "/etc/fstab"] To fstab2
      fstab2 = Left(fstab2, InStr(fstab2, " ") - 1)
      If fstab1 <> fstab2 Then Try Copy "/etc/fstab" To "/tmp/sbrestorefstab"

    Endif

    wproc = Exec ["systemback", "srsync", mthd, "Everyone", cpoint & "_" & pname]
    wprocwait

    If fsave = 1 And Exist("/tmp/sbrestorefstab")

      Try Kill "/etc/fstab"
      Try Copy "/tmp/sbrestorefstab" To "/etc/fstab"
      Try Kill "/tmp/sbrestorefstab"

    Endif

    If greinst = 1

      wproc = Exec ["update-grub"] For Read
      wprocwait

      ofile = Open "/proc/self/mounts" For Input
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Like "* /boot *"

          mntdev = Left(cline, InStr(cline, " ") - 1)
          Break

        Else If cline Like "* / *"

          mntdev = Left(cline, InStr(cline, " ") - 1)

        Endif

      Wend
      Close #ofile

      wproc = Exec ["grub-install", "--force", mntdev] For Read
      wprocwait

      If wproc.Value <> 0

        ptimer.Stop
        Wait 0.1
        Exec ["tput", "reset"] Wait
        Exec ["tput", "bold"] Wait
        Exec ["tput", "setaf", "1"] Wait
        Error "\n " & ("Restoration is completed, but an error occurred while reinstalling GRUB!") & "\n"
        Exec ["tput", "sgr0"] Wait
        Exec ["tput", "cnorm"] Wait
        Quit 7

      Endif

    Endif

    If ptimer.Enabled

      ptimer.Stop
      Wait 0.1

      Select Case rmode

        Case 1

          Exec ["tput", "reset"] Wait
          Exec ["tput", "bold"] Wait
          Exec ["tput", "civis"] Wait
          Print "\n " & ("Full system restoration is completed.") & "\n\n " & ("Press 'ENTER' key to reboot computer, or 'Q' to quit.") & "\n"

          Do

            Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

            If choice = Null

              If Exist("/sbin/reboot") Then Exec ["reboot"] Else Exec ["systemctl", "reboot"]

            Else If choice Like "[qQ]"

              Break

            Endif

          Loop

        Case 2

          Exec ["tput", "reset"] Wait
          Exec ["tput", "bold"] Wait
          Exec ["tput", "civis"] Wait
          Print "\n " & ("System files restoration are completed.") & "\n\n " & ("Press 'ENTER' key to reboot computer, or 'Q' to quit.") & "\n"

          Do

            Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

            If choice = Null

              If Exist("/sbin/reboot") Then Exec ["reboot"] Else Exec ["systemctl", "reboot"]

            Else If choice Like "[qQ]"

              Break

            Endif

          Loop

        Case 3

          Exec ["tput", "reset"] Wait
          Exec ["tput", "bold"] Wait
          Print "\n " & ("Users configuration files full restoration are completed.") & "\n"

        Case Else

          Exec ["tput", "reset"] Wait
          Exec ["tput", "bold"] Wait
          Print "\n " & ("Users configuration files restoration are completed.") & "\n"

      End Select

    Endif

    Exec ["tput", "sgr0"] Wait
    Exec ["tput", "cnorm"] Wait

  Else

    Exec ["tput", "reset"] Wait
    Exec ["tput", "bold"] Wait
    Exec ["tput", "setaf", "1"] Wait
    Error "\n " & ("Restore is aborted!") & "\n"
    Exec ["tput", "sgr0"] Wait
    Exec ["tput", "cnorm"] Wait
    Quit 6

  Endif

End

Private Sub progpercent()

  Dim cperc As String

  If prun = ("Creating restore point")

    If Exist(tmp & "pointpercent")

      cperc = File.Load(tmp & "pointpercent")
      If cperc <> Null Then pbar = " (" & cperc & "%)"
      Kill tmp & "pointpercent"

    Else If pbar = Null Or pbar Like " ([ ?]%)"

      If pbar = " (?%)" Then pbar = " ( %)" Else pbar = " (?%)"

    Endif

  Else If prun = ("Restoring the full system") Or prun = ("Restoring the system files") Or prun = ("Restoring users configuration files")

    If Exist(tmp & "restorepercent")

      cperc = File.Load(tmp & "restorepercent")
      If cperc <> Null Then pbar = " (" & cperc & "%)"
      Kill tmp & "restorepercent"

    Else If pbar = Null Or pbar Like " ([ ?]%)"

      If pbar = " (?%)" Then pbar = " ( %)" Else pbar = " (?%)"

    Endif

  Else If pbar <> Null

    pbar = Null

  Endif

End

Public Sub progress_Timer()

  progpercent

  Exec ["tput", "sgr0"] Wait
  Exec ["tput", "bold"] Wait
  Print "                                        \n    Systemback\n                                        \n " & prun & pbar & "                                        \n                                        \n                                        \n                                        "
  Exec ["tput", "invis"] Wait

  Wait 0.5
  If Not ptimer.Enabled Then Return
  progpercent

  Exec ["tput", "cup", "0", "0"] Wait
  Exec ["tput", "sgr0"] Wait
  Exec ["tput", "bold"] Wait
  Print "                                        \n    Systemback\n                                        \n " & prun & pbar & " .                                      \n                                        \n                                        \n                                        "
  Exec ["tput", "invis"] Wait

  Wait 0.5
  If Not ptimer.Enabled Then Return
  progpercent

  Exec ["tput", "cup", "0", "0"] Wait
  Exec ["tput", "sgr0"] Wait
  Exec ["tput", "bold"] Wait
  Print "                                        \n    Systemback\n                                        \n " & prun & pbar & " ..                                     \n                                        \n                                        \n                                        "
  Exec ["tput", "invis"] Wait

  Wait 0.5
  If Not ptimer.Enabled Then Return
  progpercent

  Exec ["tput", "cup", "0", "0"] Wait
  Exec ["tput", "sgr0"] Wait
  Exec ["tput", "bold"] Wait
  Print "                                        \n    Systemback\n                                        \n " & prun & pbar & " ...                                    \n                                        \n                                        \n                                        "
  Exec ["tput", "invis"] Wait
  Exec ["tput", "cup", "0", "0"] Wait

End

Private Sub scheduler()

  Dim srlock As Stream
  Dim xauth As String = "/tmp/sbXauthority-" & Int(Rnd(1000000000, 9999999999))

  If Not Exist("/cdrom/casper/filesystem.squashfs") And Not Exist("/live/image/live/filesystem.squashfs") And Not Exist("/lib/live/mount/medium/live/filesystem.squashfs")

    Application.Daemon = True
    Try srlock = Lock Left(tmp, RInStr(tmp, "/")) & "sbschedulerlock"

    If Not Error

      File.Save("/tmp/sbschedulerid", Application.Id)
      Wait 300

      Do

        If Exist("/tmp/sbschedulerid")

          If File.Load("/tmp/sbschedulerid") = "restart"

            Unlock srlock
            Exec ["systemback", "schedulerdaemon"]
            Break

          Endif

        Endif

        configread

        If Not cfupdt And stimer = "on"

          smts = sdys * 1440 + shrs * 60 + smts

          If IsDir(fsdir) And Access(fsdir, gb.Write)

            If Exist(fsdir & "/.sbschedule")

              If Val(smts) <= DateDiff(Stat(fsdir & "/.sbschedule").LastModified, Now, gb.Minute)

                Try slock = Lock Left(tmp, RInStr(tmp, "/")) & "systembacklock"

                If Not Error

                  Try dlock = Lock "/var/lib/dpkg/lock"

                  If Error

                    Unlock slock

                  Else

                    If smode = "off" And Exist("/usr/share/systemback/systembackgui")

                      Try Copy Application.Env["XAUTHORITY"] To xauth

                      If Error

                        Exec ["/usr/share/systemback/systembackgui", "schedule", wpos] Wait

                      Else

                        Exec ["/usr/share/systemback/systembackgui", "schedule", wpos] With ["XAUTHORITY=" & xauth] Wait
                        If Exist(xauth) Then Kill xauth

                      Endif

                    Else If smode = "on"

                      pointupgrade
                      newrestorepoint

                    Endif

                    Unlock slock
                    Unlock dlock
                    Wait 50

                  Endif

                Endif

              Endif

            Else

              File.Save(fsdir & "/.sbschedule", Null)

            Endif

          Endif

        Endif

        Wait 10

      Loop

    Endif

  Endif

End

Private Sub newrestorepoint()

  Dim item, dtime As String

  For Each item In Dir(fsdir, ".*", gb.Directory)

    If item Like ".{DELETED,S00}_*"

      If prun <> ("Deleting incomplete restore point") Then prun = ("Deleting incomplete restore point")
      wproc = Exec ["systemback", "rmdir", fsdir & "/" & item] For Read
      wprocwait

    Endif

  Next

  If pname10 <> Null

    prun = ("Deleting old restore point(s)")
    Move fsdir & "/S10_" & pname10 To fsdir & "/.DELETED_" & pname10
    wproc = Exec ["systemback", "rmdir", fsdir & "/.DELETED_" & pname10] For Read
    wprocwait

  Endif

  If pname9 <> Null And pnumber < 10

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S09_" & pname9 To fsdir & "/.DELETED_" & pname9
    wproc = Exec ["systemback", "rmdir", fsdir & "/.DELETED_" & pname9] For Read
    wprocwait

  Endif

  If pname8 <> Null And pnumber < 9

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S08_" & pname8 To fsdir & "/.DELETED_" & pname8
    wproc = Exec ["systemback", "rmdir", fsdir & "/.DELETED_" & pname8] For Read
    wprocwait

  Endif

  If pname7 <> Null And pnumber < 8

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S07_" & pname7 To fsdir & "/.DELETED_" & pname7
    wproc = Exec ["systemback", "rmdir", fsdir & "/.DELETED_" & pname7] For Read
    wprocwait

  Endif

  If pname6 <> Null And pnumber < 7

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S06_" & pname6 To fsdir & "/.DELETED_" & pname6
    wproc = Exec ["systemback", "rmdir", fsdir & "/.DELETED_" & pname6] For Read
    wprocwait

  Endif

  If pname5 <> Null And pnumber < 6

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S05_" & pname5 To fsdir & "/.DELETED_" & pname5
    wproc = Exec ["systemback", "rmdir", fsdir & "/.DELETED_" & pname5] For Read
    wprocwait

  Endif

  If pname4 <> Null And pnumber < 5

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S04_" & pname4 To fsdir & "/.DELETED_" & pname4
    wproc = Exec ["systemback", "rmdir", fsdir & "/.DELETED_" & pname4] For Read
    wprocwait

  Endif

  If pname3 <> Null And pnumber = 3

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S03_" & pname3 To fsdir & "/.DELETED_" & pname3
    wproc = Exec ["systemback", "rmdir", fsdir & "/.DELETED_" & pname3] For Read
    wprocwait

  Endif

  If Exist(tmp & "pointpercent") Then Kill tmp & "pointpercent"
  prun = ("Creating restore point")
  dtime = Year(Now) & "-" & Right("0" & Month(Now), 2) & "-" & Right("0" & Day(Now), 2) & "," & Right("0" & Hour(Now), 2) & "." & Right("0" & Minute(Now), 2) & "." & Right("0" & Second(Now), 2)
  wproc = Exec ["systemback", "rpsync", dtime]
  wprocwait

  If wproc.Value = 0

    If IsDir(fsdir & "/S01_" & pname1)

      Move fsdir & "/S01_" & pname1 To fsdir & "/S02_" & pname1

      If IsDir(fsdir & "/S02_" & pname2)

        Move fsdir & "/S02_" & pname2 To fsdir & "/S03_" & pname2

        If IsDir(fsdir & "/S03_" & pname3)

          Move fsdir & "/S03_" & pname3 To fsdir & "/S04_" & pname3

          If IsDir(fsdir & "/S04_" & pname4)

            Move fsdir & "/S04_" & pname4 To fsdir & "/S05_" & pname4

            If IsDir(fsdir & "/S05_" & pname5)

              Move fsdir & "/S05_" & pname5 To fsdir & "/S06_" & pname5

              If IsDir(fsdir & "/S06_" & pname6)

                Move fsdir & "/S06_" & pname6 To fsdir & "/S07_" & pname6

                If IsDir(fsdir & "/S07_" & pname7)

                  Move fsdir & "/S07_" & pname7 To fsdir & "/S08_" & pname7

                  If IsDir(fsdir & "/S08_" & pname8)

                    Move fsdir & "/S08_" & pname8 To fsdir & "/S09_" & pname8

                    If IsDir(fsdir & "/S09_" & pname9)

                      Move fsdir & "/S09_" & pname9 To fsdir & "/S10_" & pname9

                    Endif

                  Endif

                Endif

              Endif

            Endif

          Endif

        Endif

      Endif

    Endif

    Copy "/etc/systemback.excludes" To fsdir & "/.S00_" & dtime & "/.excludes"
    Move fsdir & "/.S00_" & dtime To fsdir & "/S01_" & dtime
    File.Save(fsdir & "/.sbschedule", Null)

    prun = ("Emptying cache")
    wproc = Exec ["systemback", "sync"] For Read
    wprocwait
    File.Save("/proc/sys/vm/drop_caches", "3")

  Else If Dfree(fsdir) < 104857600 And Not Application.Daemon

    ptimer.Stop
    Wait 0.1

    Exec ["tput", "reset"] Wait
    Exec ["tput", "bold"] Wait
    Exec ["tput", "setaf", "1"] Wait
    Error "\n " & ("Restore point creation is aborted!") & "\n " & ("Not enough free disk space to complete the process.") & "\n"
    Exec ["tput", "sgr0"] Wait
    pointupgrade
    Quit 8

  Else If Not Application.Daemon

    ptimer.Stop
    Wait 0.1

    Exec ["tput", "reset"] Wait
    Exec ["tput", "bold"] Wait
    Exec ["tput", "setaf", "1"] Wait
    Error "\n " & ("Restore point creation is aborted!") & "\n " & ("There has been critical changes in the file system during this operation.") & "\n"
    Exec ["tput", "sgr0"] Wait
    pointupgrade
    Quit 9

  Endif

End

Private Sub configread()

  Dim ofile As File
  Dim cline, cval As String

  If cfupdt Then cfupdt = False

  If Exist("/etc/systemback.conf")

    ofile = Open "/etc/systemback.conf" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      Select Case cline

        Case Like "storagedir=*"

          sdir = Right(cline, - InStr(cline, "="))

        Case Like "liveworkdir=*"

          lwdir = Right(cline, - InStr(cline, "="))

        Case Like "schedule=*"

          cval = Right(cline, - InStr(cline, "="))
          sdys = Left(cval, InStr(cval, ":") - 1)
          shrs = Mid(cval, Len(sdys) + 2, InStr(cval, ":", Len(sdys) + 2) - InStr(cval, ":") - 1)
          smts = Right(Left(cval, InStr(cval, ":", Len(sdys & shrs) + 3) - 1), - Len(sdys & shrs) - 2)
          ssds = Right(cval, - RInStr(cval, ":"))

        Case "pointsnumber=3"

          pnumber = 3

        Case "pointsnumber=4"

          pnumber = 4

        Case "pointsnumber=5"

          pnumber = 5

        Case "pointsnumber=6"

          pnumber = 6

        Case "pointsnumber=7"

          pnumber = 7

        Case "pointsnumber=8"

          pnumber = 8

        Case "pointsnumber=9"

          pnumber = 9

        Case "pointsnumber=10"

          pnumber = 10

        Case "timer=on"

          stimer = "on"

        Case "timer=off"

          stimer = "off"

        Case "silentmode=on"

          smode = "on"

        Case "silentmode=off"

          smode = "off"

        Case "windowposition=topleft"

          wpos = "topleft"

        Case "windowposition=topright"

          wpos = "topright"

        Case "windowposition=center"

          wpos = "center"

        Case "windowposition=bottomleft"

          wpos = "bottomleft"

        Case "windowposition=bottomright"

          wpos = "bottomright"

      End Select

    Wend
    Close #ofile

  Endif

  If pnumber = 0

    pnumber = 5
    cfupdt = True

  Endif

  If wpos = Null

    wpos = "topright"
    If Not cfupdt Then cfupdt = True

  Endif

  If sdir = Null

    sdir = "/home"
    If Not cfupdt Then cfupdt = True
    If Not Exist("/home/Systemback") Then Try Mkdir "/home/Systemback"
    If Not Exist("/home/Systemback/.sbschedule") Then Try File.Save("/home/Systemback/.sbschedule", Null)

  Endif

  If lwdir = Null

    lwdir = "/home"
    If Not cfupdt Then cfupdt = True

  Endif

  Select Case True

    Case Val(sdys) = Null Or Val(shrs) = Null Or Val(smts) = Null Or Val(ssds) = Null

      sdys = 1
      shrs = 0
      smts = 0
      ssds = 10
      If Not cfupdt Then cfupdt = True

    Case Val(sdys) > 7 Or Val(shrs) > 23 Or Val(smts) > 59 Or Val(ssds) < 10 Or Val(ssds) > 99

      sdys = 1
      shrs = 0
      smts = 0
      ssds = 10
      If Not cfupdt Then cfupdt = True

    Case sdys = 0 And shrs = 0 And Val(smts) < 30

      smts = 30
      If Not cfupdt Then cfupdt = True

  End Select

  If smode = Null

    smode = "off"
    If Not cfupdt Then cfupdt = True

  Endif

  If stimer = Null

    stimer = "off"
    If Not cfupdt Then cfupdt = True

  Endif

  fsdir = sdir & "/Systemback"
  If Not Exist("/etc/systemback.excludes") Then File.Save("/etc/systemback.excludes", Null)

End

Private Sub configfileupdate()

  File.Save("/etc/systemback.conf", "storagedir=" & sdir & "\nliveworkdir=" & lwdir & "\npointsnumber=" & pnumber & "\ntimer=" & stimer & "\nschedule=" & sdys & ":" & shrs & ":" & smts & ":" & ssds & "\nsilentmode=" & smode & "\nwindowposition=" & wpos & "\n")

End

Private Sub pointupgrade()

  Dim item As String
  Dim rerun As Boolean

  While Not rerun

    rerun = True

    If pname1 <> Null Then pname1 = Null
    If pname2 <> Null Then pname2 = Null
    If pname3 <> Null Then pname3 = Null
    If pname4 <> Null Then pname4 = Null
    If pname5 <> Null Then pname5 = Null
    If pname6 <> Null Then pname6 = Null
    If pname7 <> Null Then pname7 = Null
    If pname8 <> Null Then pname8 = Null
    If pname9 <> Null Then pname9 = Null
    If pname10 <> Null Then pname10 = Null
    If pname11 <> Null Then pname11 = Null
    If pname12 <> Null Then pname12 = Null
    If pname13 <> Null Then pname13 = Null
    If pname14 <> Null Then pname14 = Null
    If pname15 <> Null Then pname15 = Null

    If IsDir(fsdir) And Access(fsdir, gb.Write)

      For Each item In Dir(fsdir, "[^.]*", gb.Directory)

        If Stat(fsdir & "/" & item).Type <> gb.Link And item Not Like "* *"

          Select Case Left(item, 4)

            Case "S01_"

              pname1 = Right(item, -4)

            Case "S02_"

              pname2 = Right(item, -4)

            Case "S03_"

              pname3 = Right(item, -4)

            Case "S04_"

              pname4 = Right(item, -4)

            Case "S05_"

              pname5 = Right(item, -4)

            Case "S06_"

              pname6 = Right(item, -4)

            Case "S07_"

              pname7 = Right(item, -4)

            Case "S08_"

              pname8 = Right(item, -4)

            Case "S09_"

              pname9 = Right(item, -4)

            Case "S10_"

              pname10 = Right(item, -4)

            Case "H01_"

              pname11 = Right(item, -4)

            Case "H02_"

              pname12 = Right(item, -4)

            Case "H03_"

              pname13 = Right(item, -4)

            Case "H04_"

              pname14 = Right(item, -4)

            Case "H05_"

              pname15 = Right(item, -4)

          End Select

        Endif

      Next

    Endif

    If pname15 <> Null And pname14 = Null

      Move fsdir & "/H05_" & pname15 To fsdir & "/H04_" & pname15
      rerun = False

    Endif

    If pname14 <> Null And pname13 = Null

      Move fsdir & "/H04_" & pname14 To fsdir & "/H03_" & pname14
      If rerun Then rerun = False

    Endif

    If pname13 <> Null And pname12 = Null

      Move fsdir & "/H03_" & pname13 To fsdir & "/H02_" & pname13
      If rerun Then rerun = False

    Endif

    If pname12 <> Null And pname11 = Null

      Move fsdir & "/H02_" & pname12 To fsdir & "/H01_" & pname12
      If rerun Then rerun = False

    Endif

    If pname10 <> Null And pname9 = Null

      Move fsdir & "/S10_" & pname10 To fsdir & "/S09_" & pname10
      If rerun Then rerun = False

    Endif

    If pname9 <> Null And pname8 = Null

      Move fsdir & "/S09_" & pname9 To fsdir & "/S08_" & pname9
      If rerun Then rerun = False

    Endif

    If pname8 <> Null And pname7 = Null

      Move fsdir & "/S08_" & pname8 To fsdir & "/S07_" & pname8
      If rerun Then rerun = False

    Endif

    If pname7 <> Null And pname6 = Null

      Move fsdir & "/S07_" & pname7 To fsdir & "/S06_" & pname7
      If rerun Then rerun = False

    Endif

    If pname6 <> Null And pname5 = Null

      Move fsdir & "/S06_" & pname6 To fsdir & "/S05_" & pname6
      If rerun Then rerun = False

    Endif

    If pname5 <> Null And pname4 = Null

      Move fsdir & "/S05_" & pname5 To fsdir & "/S04_" & pname5
      If rerun Then rerun = False

    Endif

    If pname4 <> Null And pname3 = Null

      Move fsdir & "/S04_" & pname4 To fsdir & "/S03_" & pname4
      If rerun Then rerun = False

    Endif

    If pname3 <> Null And pname2 = Null

      Move fsdir & "/S03_" & pname3 To fsdir & "/S02_" & pname3
      If rerun Then rerun = False

    Endif

    If pname2 <> Null And pname1 = Null

      Move fsdir & "/S02_" & pname2 To fsdir & "/S01_" & pname2
      If rerun Then rerun = False

    Endif

  Wend

End

Private Sub rpsync()

  Dim ofile As File
  Dim elmod As Date
  Dim usrs, cditms, home1itms, home2itms, home3itms, home4itms, home5itms, rootitms, binitms, bootitms, etcitms, libitms, lib32itms, lib64itms, optitms, sbinitms, selinuxitms, srvitms, usritms, varitms, elist As New String[]
  Dim dtime As String = Application.Args[2]
  Dim usr, cline, item, cdir, fdir, exitem, eusr, egrp, eauth, excl As String
  Dim esize As Long
  Dim anum, cnum As Integer
  Dim cperc, pperc As Byte
  Dim nxt As Boolean

  Mkdir fsdir & "/.S00_" & dtime

  If IsDir("/home")

    If Cpdir("/home", fsdir & "/.S00_" & dtime & "/home") Then Quit 1

    ofile = Open "/etc/passwd" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If cline Like "*:/home/*"

        usr = Left(cline, InStr(cline, ":") - 1)

        If IsDir("/home/" & usr)

          usrs.Add(usr)

          Select Case usrs.Count

            Case 1

              home1itms = RDir("/home/" & usr, ".*")

            Case 2

              home2itms = RDir("/home/" & usr, ".*")

            Case 3

              home3itms = RDir("/home/" & usr, ".*")

            Case 4

              home4itms = RDir("/home/" & usr, ".*")

            Case 5

              home5itms = RDir("/home/" & usr, ".*")

            Case Else

              anum = anum + RDir("/home/" & usr, ".*").Count

          End Select

        Endif

      Endif

    Wend
    Close #ofile

  Endif

  If IsDir("/root") Then rootitms = RDir("/root", ".*")
  If IsDir("/bin") Then binitms = RDir("/bin")
  If IsDir("/boot") Then bootitms = RDir("/boot")
  If IsDir("/etc") Then etcitms = RDir("/etc")
  If IsDir("/lib") Then libitms = RDir("/lib")
  If IsDir("/lib32") Then lib32itms = RDir("/lib32")
  If IsDir("/lib64") Then lib64itms = RDir("/lib64")
  If IsDir("/opt") Then optitms = RDir("/opt")
  If IsDir("/sbin") Then sbinitms = RDir("/sbin")
  If IsDir("/selinux") Then selinuxitms = RDir("/selinux")
  If IsDir("/srv") Then srvitms = RDir("/srv")
  If IsDir("/usr") Then usritms = RDir("/usr")
  If IsDir("/var") Then varitms = RDir("/var")
  anum = anum + home1itms.Count + home2itms.Count + home3itms.Count + home4itms.Count + home5itms.Count + rootitms.Count + binitms.Count + bootitms.Count + etcitms.Count + libitms.Count + lib32itms.Count + lib64itms.Count + optitms.Count + sbinitms.Count + selinuxitms.Count + srvitms.Count + usritms.Count + varitms.Count
  File.Save(tmp & "pointpercent", 0)

  With elist

    .Add(".cache/gvfs")
    .Add(".gvfs")
    .Add(".local/share/Trash/files/")
    .Add(".local/share/Trash/info/")
    .Add(".Xauthority")

    ofile = Open "/etc/systemback.excludes" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If cline Begins "." Then .Add(cline)

    Wend
    Close #ofile

  End With

  For Each usr In usrs

    If Cpdir("/home/" & usr, fsdir & "/.S00_" & dtime & "/home/" & usr) Then Quit 1

    Select Case usrs.Find(usr)

      Case 0

        cditms = home1itms

      Case 1

        cditms = home2itms

      Case 2

        cditms = home3itms

      Case 3

        cditms = home4itms

      Case 4

        cditms = home5itms

      Case Else

        cditms = RDir("/home/" & usr, ".*")

    End Select

    For Each item In cditms

      cnum = cnum + 1
      cperc = Int(cnum / anum * 100)

      If Not Exist(tmp & "pointpercent") And cperc > pperc

        File.Save(tmp & "pointpercent", cperc)
        pperc = cperc

      Endif

      If nxt = True Then nxt = False

      For Each excl In elist

        If item Begins excl Or item Ends "~"

          nxt = True
          Break

        Endif

      Next

      If nxt = False

        If Exist("/home/" & usr & "/" & item)

          With Stat("/home/" & usr & "/" & item)

            Select Case .Type

              Case gb.Link

                Link .Link To fsdir & "/.S00_" & dtime & "/home/" & usr & "/" & item

              Case gb.Directory

                If Cpdir("/home/" & usr & "/" & item, fsdir & "/.S00_" & dtime & "/home/" & usr & "/" & item) Then Quit 1

              Case gb.File

                If .Size <= 8000000

                  For Each exitem In Dir(fsdir, "[SH][01][0-9]_*", gb.Directory)

                    If Exist(fsdir & "/" & exitem & "/home/" & usr & "/" & item)

                      With Stat(fsdir & "/" & exitem & "/home/" & usr & "/" & item)

                        esize = .Size
                        elmod = .LastModified
                        eusr = .User
                        egrp = .Group
                        eauth = .Auth

                      End With

                      If esize = .Size And elmod = .LastModified And eusr = .User And egrp = .Group And eauth = .Auth

                        Hlink(fsdir & "/" & exitem & "/home/" & usr & "/" & item, fsdir & "/.S00_" & dtime & "/home/" & usr & "/" & item)
                        Break

                      Endif

                    Endif

                  Next

                  If Not Exist(fsdir & "/.S00_" & dtime & "/home/" & usr & "/" & item)

                    Copy "/home/" & usr & "/" & item To fsdir & "/.S00_" & dtime & "/home/" & usr & "/" & item
                    Cpertime("/home/" & usr & "/" & item, fsdir & "/.S00_" & dtime & "/home/" & usr & "/" & item)

                  Endif

                Endif

            End Select

          End With

        Endif

      Endif

    Next

  Next

  If IsDir("/root")

    If Cpdir("/root", fsdir & "/.S00_" & dtime & "/root") Then Quit 1

    For Each item In rootitms

      cnum = cnum + 1
      cperc = Int(cnum / anum * 100)

      If Not Exist(tmp & "pointpercent") And cperc > pperc

        File.Save(tmp & "pointpercent", cperc)
        pperc = cperc

      Endif

      If nxt = True Then nxt = False

      For Each excl In elist

        If item Begins excl Or item Ends "~"

          nxt = True
          Break

        Endif

      Next

      If nxt = False

        If Exist("/root/" & item)

          With Stat("/root/" & item)

            Select Case .Type

              Case gb.Link

                Link .Link To fsdir & "/.S00_" & dtime & "/root/" & item

              Case gb.Directory

                If Cpdir("/root/" & item, fsdir & "/.S00_" & dtime & "/root/" & item) Then Quit 1

              Case gb.File

                If .Size <= 8000000

                  For Each exitem In Dir(fsdir, "[SH][01][0-9]_*", gb.Directory)

                    If Exist(fsdir & "/" & exitem & "/root/" & item)

                      With Stat(fsdir & "/" & exitem & "/root/" & item)

                        esize = .Size
                        elmod = .LastModified
                        eusr = .User
                        egrp = .Group
                        eauth = .Auth

                      End With

                      If esize = .Size And elmod = .LastModified And eusr = .User And egrp = .Group And eauth = .Auth

                        Hlink(fsdir & "/" & exitem & "/root/" & item, fsdir & "/.S00_" & dtime & "/root/" & item)
                        Break

                      Endif

                    Endif

                  Next

                  If Not Exist(fsdir & "/.S00_" & dtime & "/root/" & item)

                    Copy "/root/" & item To fsdir & "/.S00_" & dtime & "/root/" & item
                    Cpertime("/root/" & item, fsdir & "/.S00_" & dtime & "/root/" & item)

                  Endif

                Endif

            End Select

          End With

        Endif

      Endif

    Next

  Endif

  For Each item In Dir("/", "{initrd.img,vmlinuz}*", gb.Link)

    Link Stat("/" & item).Link To fsdir & "/.S00_" & dtime & "/" & item

  Next

  For Each cdir In ["/cdrom", "/dev", "/media", "/mnt", "/proc", "/run", "/sys", "/tmp"]

    If IsDir(cdir)

      If Cpdir(cdir, fsdir & "/.S00_" & dtime & cdir) Then Quit 1

    Endif

  Next

  elist.Clear
  elist.Add("/etc/mtab")
  elist.Add("/var/lib/udisks/mtab")
  elist.Add("/var/lib/ureadahead/")
  elist.Add("/var/log/")
  elist.Add("/var/run/")
  elist.Add("/var/tmp/")

  For Each cdir In ["/bin", "/boot", "/etc", "/lib", "/lib32", "/lib64", "/opt", "/sbin", "/selinux", "/srv", "/usr", "/var"]

    If IsDir(cdir)

      If Cpdir(cdir, fsdir & "/.S00_" & dtime & cdir) Then Quit 1

      Select Case cdir

        Case "/bin"

          cditms = binitms

        Case "/boot"

          cditms = bootitms

        Case "/etc"

          cditms = etcitms

        Case "/lib"

          cditms = libitms

        Case "/lib32"

          cditms = lib32itms

        Case "/lib64"

          cditms = lib64itms

        Case "/opt"

          cditms = optitms

        Case "/sbin"

          cditms = sbinitms

        Case "/selinux"

          cditms = selinuxitms

        Case "/srv"

          cditms = srvitms

        Case "/usr"

          cditms = usritms

        Case "/var"

          cditms = varitms

      End Select

      For Each item In cditms

        cnum = cnum + 1
        cperc = Int(cnum / anum * 100)

        If Not Exist(tmp & "pointpercent") And cperc > pperc

          File.Save(tmp & "pointpercent", cperc)
          pperc = cperc

        Endif

        If nxt = True Then nxt = False

        For Each excl In elist

          If cdir & "/" & item Begins excl Or cdir & "/" & item Like "/var/cache/apt/*.bin" Or cdir & "/" & item Like "/var/cache/apt/*.bin.*" Or cdir & "/" & item Like "/var/cache/apt/archives/*.deb" Or item Like "*{~,.dpkg-old,lost+found}" Or item Like "*lost+found*"

            nxt = True
            Break

          Endif

        Next

        If nxt = False

          With Stat(cdir & "/" & item)

            Select Case .Type

              Case gb.Link

                Link .Link To fsdir & "/.S00_" & dtime & cdir & "/" & item

              Case gb.Directory

                If Cpdir(cdir & "/" & item, fsdir & "/.S00_" & dtime & cdir & "/" & item) Then Quit 1

              Case gb.File

                For Each exitem In Dir(fsdir, "[SH][01][0-9]_*", gb.Directory)

                  If Exist(fsdir & "/" & exitem & cdir & "/" & item)

                    With Stat(fsdir & "/" & exitem & cdir & "/" & item)

                      esize = .Size
                      elmod = .LastModified
                      eusr = .User
                      egrp = .Group
                      eauth = .Auth

                    End With

                    If esize = .Size And elmod = .LastModified And eusr = .User And egrp = .Group And eauth = .Auth

                      Hlink(fsdir & "/" & exitem & cdir & "/" & item, fsdir & "/.S00_" & dtime & cdir & "/" & item)
                      Break

                    Endif

                  Endif

                Next

                If Not Exist(fsdir & "/.S00_" & dtime & cdir & "/" & item)

                  Copy cdir & "/" & item To fsdir & "/.S00_" & dtime & cdir & "/" & item
                  Cpertime(cdir & "/" & item, fsdir & "/.S00_" & dtime & cdir & "/" & item)

                Endif

            End Select

          End With

        Endif

      Next

    Endif

  Next

  If Exist("/etc/fstab")

    For Each item In Dir("/media", "[^.]*", gb.Directory)

      ofile = Open "/etc/fstab" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Not Begins "#" And If Replace(cline, "\\040", " ") Like "*[ \t]/media/" & item & "[ \t]*" Or Replace(cline, "\\040", " ") Like "*[ \t]/media/" & item & "/*"

          If fdir <> Null Then fdir = Null
          If nxt = True Then nxt = False

          For Each cdir In Split(Right(cline, - InStr(cline, "/media/") - 6), "/")

            If cdir <> Null

              If cdir Like "* *"

                If cdir Begins " " Then Break Else cdir = Left(cdir, InStr(cdir, " ") - 1)
                nxt = True

              Endif

              If cdir Like "*\t*"

                If cdir Begins "\t" Then Break Else cdir = Left(cdir, InStr(cdir, "\t") - 1)
                If nxt = False Then nxt = True

              Endif

              fdir &= "/" & Replace(cdir, "\\040", " ")

              If Not IsDir(fsdir & "/.S00_" & dtime & "/media/" & fdir)

                If Cpdir("/media/" & fdir, fsdir & "/.S00_" & dtime & "/media/" & fdir) Then Quit 1

              Endif

            Endif

            If nxt = True Then Break

          Next

        Endif

      Wend
      Close #ofile

    Next

  Endif

  For Each item In RDir("/var/log", "[^.]*")

    With Stat("/var/log/" & item)

      If .Type = gb.Directory

        If Cpdir("/var/log/" & item, fsdir & "/.S00_" & dtime & "/var/log/" & item) Then Quit 1

      Else If .Type = gb.File And item Not Like "*.{0,1,gz,old}"

        File.Save(fsdir & "/.S00_" & dtime & "/var/log/" & item, Null)
        Cpertime("/var/log/" & item, fsdir & "/.S00_" & dtime & "/var/log/" & item)

      Endif

    End With

  Next

  If Dfree(fsdir) < 104857600 Then Quit 2

End

Private Sub srsync()

  Dim ofile As File
  Dim olmod As Date
  Dim usrs, cditms, home1itms, rphome1itms, home2itms, rphome2itms, home3itms, rphome3itms, home4itms, rphome4itms, home5itms, rphome5itms, rootitms, rprootitms, binitms, rpbinitms, bootitms, rpbootitms, etcitms, rpetcitms, libitms, rplibitms, lib32itms, rplib32itms, lib64itms, rplib64itms, optitms, rpoptitms, sbinitms, rpsbinitms, selinuxitms, rpselinuxitms, srvitms, rpsrvitms, usritms, rpusritms, varitms, rpvaritms, elist As New String[]
  Dim uname As String = Application.Args[3]
  Dim usr, cline, item, cdir, excl, olnk As String
  Dim osize As Long
  Dim anum, cnum As Integer
  Dim mthd As Byte = Application.Args[2]
  Dim cperc, pperc As Byte
  Dim nxt As Boolean

  pname = Application.Args[4]

  If mthd <> 2

    If IsDir(fsdir & "/" & pname & "/home")

      For Each usr In Dir(fsdir & "/" & pname & "/home", "*", gb.Directory)

        If uname = usr Or If mthd <> 4 And mthd <> 6

          usrs.Add(usr)

          Select Case usrs.Count

            Case 1

              If IsDir("/home/" & usr) Then home1itms = RDir("/home/" & usr, ".*")
              rphome1itms = RDir(fsdir & "/" & pname & "/home/" & usr)

            Case 2

              If IsDir("/home/" & usr) Then home2itms = RDir("/home/" & usr, ".*")
              rphome2itms = RDir(fsdir & "/" & pname & "/home/" & usr)

            Case 3

              If IsDir("/home/" & usr) Then home3itms = RDir("/home/" & usr, ".*")
              rphome3itms = RDir(fsdir & "/" & pname & "/home/" & usr)

            Case 4

              If IsDir("/home/" & usr) Then home4itms = RDir("/home/" & usr, ".*")
              rphome4itms = RDir(fsdir & "/" & pname & "/home/" & usr)

            Case 5

              If IsDir("/home/" & usr) Then home5itms = RDir("/home/" & usr, ".*")
              rphome5itms = RDir(fsdir & "/" & pname & "/home/" & usr)

            Case Else

              If IsDir("/home/" & usr) Then anum = anum + RDir("/home/" & usr, ".*").Count
              anum = anum + RDir(fsdir & "/" & pname & "/home/" & usr).Count

          End Select

        Endif

      Next

    Endif

    If IsDir(fsdir & "/" & pname & "/root")

      If uname = "root" Or If mthd <> 4 And mthd <> 6

        If IsDir("/root") Then rootitms = RDir("/root", ".*")
        rprootitms = RDir(fsdir & "/" & pname & "/root")

      Endif

    Endif

    anum = anum + home1itms.Count + rphome1itms.Count + home2itms.Count + rphome2itms.Count + home3itms.Count + rphome3itms.Count + home4itms.Count + rphome4itms.Count + home5itms.Count + rphome5itms.Count + rootitms.Count + rprootitms.Count

  Endif

  If mthd = 1 Or mthd = 2

    If IsDir("/bin") Then binitms = RDir("/bin")
    If IsDir("/boot") Then bootitms = RDir("/boot")
    If IsDir("/etc") Then etcitms = RDir("/etc")
    If IsDir("/lib") Then libitms = RDir("/lib")
    If IsDir("/lib32") Then lib32itms = RDir("/lib32")
    If IsDir("/lib64") Then lib64itms = RDir("/lib64")
    If IsDir("/opt") Then optitms = RDir("/opt")
    If IsDir("/sbin") Then sbinitms = RDir("/sbin")
    If IsDir("/selinux") Then selinuxitms = RDir("/selinux")
    If IsDir("/srv") Then srvitms = RDir("/srv")
    If IsDir("/usr") Then usritms = RDir("/usr")
    If IsDir("/var") Then varitms = RDir("/var")
    If IsDir(fsdir & "/" & pname & "/bin") Then rpbinitms = RDir(fsdir & "/" & pname & "/bin")
    If IsDir(fsdir & "/" & pname & "/boot") Then rpbootitms = RDir(fsdir & "/" & pname & "/boot")
    If IsDir(fsdir & "/" & pname & "/etc") Then rpetcitms = RDir(fsdir & "/" & pname & "/etc")
    If IsDir(fsdir & "/" & pname & "/lib") Then rplibitms = RDir(fsdir & "/" & pname & "/lib")
    If IsDir(fsdir & "/" & pname & "/lib32") Then rplib32itms = RDir(fsdir & "/" & pname & "/lib32")
    If IsDir(fsdir & "/" & pname & "/lib64") Then rplib64itms = RDir(fsdir & "/" & pname & "/lib64")
    If IsDir(fsdir & "/" & pname & "/opt") Then rpoptitms = RDir(fsdir & "/" & pname & "/opt")
    If IsDir(fsdir & "/" & pname & "/sbin") Then rpsbinitms = RDir(fsdir & "/" & pname & "/sbin")
    If IsDir(fsdir & "/" & pname & "/selinux") Then rpselinuxitms = RDir(fsdir & "/" & pname & "/selinux")
    If IsDir(fsdir & "/" & pname & "/srv") Then rpsrvitms = RDir(fsdir & "/" & pname & "/srv")
    If IsDir(fsdir & "/" & pname & "/usr") Then rpusritms = RDir(fsdir & "/" & pname & "/usr")
    If IsDir(fsdir & "/" & pname & "/var") Then rpvaritms = RDir(fsdir & "/" & pname & "/var")
    anum = anum + binitms.Count + rpbinitms.Count + bootitms.Count + rpbootitms.Count + etcitms.Count + rpetcitms.Count + libitms.Count + rplibitms.Count + lib32itms.Count + rplib32itms.Count + lib64itms.Count + rplib64itms.Count + optitms.Count + rpoptitms.Count + sbinitms.Count + rpsbinitms.Count + selinuxitms.Count + rpselinuxitms.Count + srvitms.Count + rpsrvitms.Count + usritms.Count + rpusritms.Count + varitms.Count + rpvaritms.Count
    File.Save(tmp & "restorepercent", 0)

    elist.Add("/etc/mtab")
    elist.Add("/var/lib/udisks/mtab")
    elist.Add("/var/tmp/")
    elist.Add("/var/run/")
    elist.Add("/usr/bin/systemback")
    elist.Add("/etc/systemback")
    elist.Add("/etc/sudoers.d/99_systemback")
    elist.Add("/etc/xdg/autostart/sbschedule.desktop")
    elist.Add("/usr/lib/systemback")
    elist.Add("/usr/share/systemback")
    elist.Add("/var/lib/dpkg/info/systemback")

    For Each cdir In ["/bin", "/boot", "/etc", "/lib", "/lib32", "/lib64", "/opt", "/sbin", "/selinux", "/srv", "/usr", "/var"]

      If IsDir(cdir)

        Select Case cdir

          Case "/bin"

            cditms = binitms

          Case "/boot"

            cditms = bootitms

          Case "/etc"

            cditms = etcitms

          Case "/lib"

            cditms = libitms

          Case "/lib32"

            cditms = lib32itms

          Case "/lib64"

            cditms = lib64itms

          Case "/opt"

            cditms = optitms

          Case "/sbin"

            cditms = sbinitms

          Case "/selinux"

            cditms = selinuxitms

          Case "/srv"

            cditms = srvitms

          Case "/usr"

            cditms = usritms

          Case "/var"

            cditms = varitms

        End Select

        For Each item In cditms.Sort(gb.Descent)

          cnum = cnum + 1
          cperc = Int(cnum / anum * 100)

          If Not Exist(tmp & "restorepercent") And cperc > pperc

            File.Save(tmp & "restorepercent", cperc)
            pperc = cperc

          Endif

          If Exist(cdir & "/" & item)

            If nxt = True Then nxt = False

            For Each excl In elist

              If cdir & "/" & item Begins excl Or item Like "*lost+found*"

                nxt = True
                Break

              Endif

            Next

            If nxt = False

              With Stat(cdir & "/" & item)

                Select Case .Type

                  Case gb.Link

                    If Exist(fsdir & "/" & pname & "/" & cdir & "/" & item)

                      olnk = .Link

                      With Stat(fsdir & "/" & pname & "/" & cdir & "/" & item)

                        If .Type = gb.Link

                          If .Link = olnk Then Continue

                        Endif

                      End With

                    Endif

                    Try Kill cdir & "/" & item

                  Case gb.Directory

                    If Exist(fsdir & "/" & pname & "/" & cdir & "/" & item)

                      If Stat(fsdir & "/" & pname & "/" & cdir & "/" & item).Type = gb.Directory Then Continue

                    Endif

                    Try Rmdir cdir & "/" & item

                  Case gb.File

                    If Exist(fsdir & "/" & pname & "/" & cdir & "/" & item)

                      osize = .Size
                      olmod = .LastModified

                      With Stat(fsdir & "/" & pname & "/" & cdir & "/" & item)

                        If .Type = gb.File

                          If .Size = osize And .LastModified = olmod Then Continue

                        Endif

                      End With

                    Endif

                    Try Kill cdir & "/" & item

                End Select

              End With

            Endif

          Endif

        Next

      Endif

    Next

    For Each cdir In [fsdir & "/" & pname & "/cdrom", fsdir & "/" & pname & "/dev", fsdir & "/" & pname & "/home", fsdir & "/" & pname & "/media", fsdir & "/" & pname & "/mnt", fsdir & "/" & pname & "/root", fsdir & "/" & pname & "/proc", fsdir & "/" & pname & "/run", fsdir & "/" & pname & "/sys", fsdir & "/" & pname & "/tmp"]

      If IsDir(cdir)

        If Exist(Right(cdir, - RInStr(cdir, "/") + 1))

          If Not IsDir(Right(cdir, - RInStr(cdir, "/") + 1))

            Try Kill Right(cdir, - RInStr(cdir, "/") + 1)
            Try Mkdir Right(cdir, - RInStr(cdir, "/") + 1)

          Endif

          Cpertime(cdir, Right(cdir, - RInStr(cdir, "/") + 1))

        Else

          Cpdir(cdir, Right(cdir, - RInStr(cdir, "/") + 1))

        Endif

      Else If Exist(Right(cdir, - RInStr(cdir, "/") + 1))

        If Stat(Right(cdir, - RInStr(cdir, "/") + 1)).Type = gb.Directory Then Dclean(Right(cdir, - RInStr(cdir, "/") + 1)) Else Try Kill Right(cdir, - RInStr(cdir, "/") + 1)

      Endif

    Next

    For Each cdir In [fsdir & "/" & pname & "/bin", fsdir & "/" & pname & "/boot", fsdir & "/" & pname & "/etc", fsdir & "/" & pname & "/lib", fsdir & "/" & pname & "/lib32", fsdir & "/" & pname & "/lib64", fsdir & "/" & pname & "/opt", fsdir & "/" & pname & "/sbin", fsdir & "/" & pname & "/selinux", fsdir & "/" & pname & "/srv", fsdir & "/" & pname & "/usr", fsdir & "/" & pname & "/var"]

      If IsDir(cdir)

        If Exist(Right(cdir, - RInStr(cdir, "/") + 1))

          If Not IsDir(Right(cdir, - RInStr(cdir, "/") + 1))

            Try Kill Right(cdir, - RInStr(cdir, "/") + 1)
            Try Mkdir Right(cdir, - RInStr(cdir, "/") + 1)

          Endif

          Cpertime(cdir, Right(cdir, - RInStr(cdir, "/") + 1))

        Else

          Cpdir(cdir, Right(cdir, - RInStr(cdir, "/") + 1))

        Endif

        Select Case Right(cdir, - RInStr(cdir, "/") + 1)

          Case "/bin"

            cditms = rpbinitms

          Case "/boot"

            cditms = rpbootitms

          Case "/etc"

            cditms = rpetcitms

          Case "/lib"

            cditms = rplibitms

          Case "/lib32"

            cditms = rplib32itms

          Case "/lib64"

            cditms = rplib64itms

          Case "/opt"

            cditms = rpoptitms

          Case "/sbin"

            cditms = rpsbinitms

          Case "/selinux"

            cditms = rpselinuxitms

          Case "/srv"

            cditms = rpsrvitms

          Case "/usr"

            cditms = rpusritms

          Case "/var"

            cditms = rpvaritms

        End Select

        For Each item In cditms

          cnum = cnum + 1
          cperc = Int(cnum / anum * 100)

          If Not Exist(tmp & "restorepercent") And cperc > pperc

            File.Save(tmp & "restorepercent", cperc)
            pperc = cperc

          Endif

          If Exist(Right(cdir, - RInStr(cdir, "/") + 1) & "/" & item)

            Cpertime(cdir & "/" & item, Right(cdir, - RInStr(cdir, "/") + 1) & "/" & item)

          Else

            With Stat(cdir & "/" & item)

              Select Case .Type

                Case gb.Link

                  Try Link .Link To Right(cdir, - RInStr(cdir, "/") + 1) & "/" & item

                Case gb.Directory

                  Cpdir(cdir & "/" & item, Right(cdir, - RInStr(cdir, "/") + 1) & "/" & item)

                Case gb.File

                  Try Copy cdir & "/" & item To Right(cdir, - RInStr(cdir, "/") + 1) & "/" & item
                  Cpertime(cdir & "/" & item, Right(cdir, - RInStr(cdir, "/") + 1) & "/" & item)

              End Select

            End With

          Endif

        Next

      Else If Exist(Right(cdir, - RInStr(cdir, "/") + 1))

        If Stat(Right(cdir, - RInStr(cdir, "/") + 1)).Type = gb.Directory Then Dclean(Right(cdir, - RInStr(cdir, "/") + 1)) Else Try Kill Right(cdir, - RInStr(cdir, "/") + 1)

      Endif

    Next

    For Each item In Dir("/media", "[^.]*", gb.Directory)

      If Not Exist(fsdir & "/" & pname & "/media/" & item) And File.Load("/proc/self/mounts") Not Like "*/media/" & item & "*" Then Dclean("/media/" & item)

    Next

    For Each item In RDir(fsdir & "/" & pname & "/media")

      If Exist("/media/" & item)

        If Stat("/media/" & item).Type <> gb.Directory

          Try Kill "/media/" & item
          Try Mkdir "/media/" & item

        Endif

        Cpertime(fsdir & "/" & pname & "/media/" & item, "/media/" & item)

      Else

        Cpdir(fsdir & "/" & pname & "/media/" & item, "/media/" & item)

      Endif

    Next

  Else

    File.Save(tmp & "restorepercent", 0)

  Endif

  If mthd <> 2

    With elist

      .Clear
      .Add(".cache/gvfs")
      .Add(".gvfs")
      .Add(".local/share/Trash/files/")
      .Add(".local/share/Trash/info/")
      .Add(".Xauthority")

      ofile = Open "/etc/systemback.excludes" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Begins "." Then .Add(cline)

      Wend
      Close #ofile

    End With

    For Each usr In usrs

      If IsDir("/home/" & usr)

        Select Case usrs.Find(usr)

          Case 0

            cditms = home1itms

          Case 1

            cditms = home2itms

          Case 2

            cditms = home3itms

          Case 3

            cditms = home4itms

          Case 4

            cditms = home5itms

          Case Else

            cditms = RDir("/home/" & usr, ".*")

        End Select

        For Each item In cditms.Sort(gb.Descent)

          cnum = cnum + 1
          cperc = Int(cnum / anum * 100)

          If Not Exist(tmp & "restorepercent") And cperc > pperc

            File.Save(tmp & "restorepercent", cperc)
            pperc = cperc

          Endif

          If nxt = True Then nxt = False

          For Each excl In elist

            If item Begins excl Or item Ends "~"

              nxt = True
              Break

            Endif

          Next

          If nxt = False

            With Stat("/home/" & usr & "/" & item)

              Select Case .Type

                Case gb.Link

                  If Exist(fsdir & "/" & pname & "/home/" & usr & "/" & item)

                    olnk = .Link

                    With Stat(fsdir & "/" & pname & "/home/" & usr & "/" & item)

                      If .Type = gb.Link

                        If .Link <> olnk Then Try Kill "/home/" & usr & "/" & item

                      Endif

                    End With

                  Else If mthd <> 3 And mthd <> 4

                    Try Kill "/home/" & usr & "/" & item

                  Endif

                Case gb.Directory

                  If Exist(fsdir & "/" & pname & "/home/" & usr & "/" & item)

                    If Stat(fsdir & "/" & pname & "/home/" & usr & "/" & item).Type <> gb.Directory Then Try Rmdir "/home/" & usr & "/" & item

                  Else If mthd <> 3 And mthd <> 4

                    Try Rmdir "/home/" & usr & "/" & item

                  Endif

                Case gb.File

                  If .Size <= 8000000

                    If Exist(fsdir & "/" & pname & "/home/" & usr & "/" & item)

                      osize = .Size
                      olmod = .LastModified

                      With Stat(fsdir & "/" & pname & "/home/" & usr & "/" & item)

                        If .Type = gb.File

                          If .Size <> osize Or .LastModified <> olmod Then Try Kill "/home/" & usr & "/" & item

                        Endif

                      End With

                    Else If mthd <> 3 And mthd <> 4

                      Try Kill "/home/" & usr & "/" & item

                    Endif

                  Endif

              End Select

            End With

          Endif

        Next

      Else If Exist("/home/" & usr)

        Try Kill "/home/" & usr
        Try Mkdir "/home/" & usr

      Endif

      Cpertime(fsdir & "/" & pname & "/home/" & usr, "/home/" & usr)

      Select Case usrs.Find(usr)

        Case 0

          cditms = rphome1itms

        Case 1

          cditms = rphome2itms

        Case 2

          cditms = rphome3itms

        Case 3

          cditms = rphome4itms

        Case 4

          cditms = rphome5itms

        Case Else

          cditms = RDir(fsdir & "/" & pname & "/home/" & usr)

      End Select

      For Each item In cditms

        cnum = cnum + 1
        cperc = Int(cnum / anum * 100)

        If Not Exist(tmp & "restorepercent") And cperc > pperc

          File.Save(tmp & "restorepercent", cperc)
          pperc = cperc

        Endif

        If Exist("/home/" & usr & "/" & item)

          Cpertime(fsdir & "/" & pname & "/home/" & usr & "/" & item, "/home/" & usr & "/" & item)

        Else

          With Stat(fsdir & "/" & pname & "/home/" & usr & "/" & item)

            Select Case .Type

              Case gb.Link

                Try Link .Link To "/home/" & usr & "/" & item

              Case gb.Directory

                Cpdir(fsdir & "/" & pname & "/home/" & usr & "/" & item, "/home/" & usr & "/" & item)

              Case gb.File

                Try Copy fsdir & "/" & pname & "/home/" & usr & "/" & item To "/home/" & usr & "/" & item
                Cpertime(fsdir & "/" & pname & "/home/" & usr & "/" & item, "/home/" & usr & "/" & item)

            End Select

          End With

        Endif

      Next

    Next

    For Each item In rootitms.Sort(gb.Descent)

      cnum = cnum + 1
      cperc = Int(cnum / anum * 100)

      If Not Exist(tmp & "restorepercent") And cperc > pperc

        File.Save(tmp & "restorepercent", cperc)
        pperc = cperc

      Endif

      If nxt = True Then nxt = False

      For Each excl In elist

        If item Begins excl Or item Ends "~"

          nxt = True
          Break

        Endif

      Next

      If nxt = False

        With Stat("/root/" & item)

          Select Case .Type

            Case gb.Link

              If Exist(fsdir & "/" & pname & "/root/" & item)

                olnk = .Link

                With Stat(fsdir & "/" & pname & "/root/" & item)

                  If .Type = gb.Link

                    If .Link <> olnk Then Try Kill "/root/" & item

                  Endif

                End With

              Else If mthd <> 3 And mthd <> 4

                Try Kill "/root/" & item

              Endif

            Case gb.Directory

              If Exist(fsdir & "/" & pname & "/root/" & item)

                If Stat(fsdir & "/" & pname & "/root/" & item).Type <> gb.Directory Then Try Rmdir "/root/" & item

              Else If mthd <> 3 And mthd <> 4

                Try Rmdir "/root/" & item

              Endif

            Case gb.File

              If .Size <= 8000000

                If Exist(fsdir & "/" & pname & "/root/" & item)

                  osize = .Size
                  olmod = .LastModified

                  With Stat(fsdir & "/" & pname & "/root/" & item)

                    If .Type = gb.File

                      If .Size <> osize Or .LastModified <> olmod Then Try Kill "/root/" & item

                    Endif

                  End With

                Else If mthd <> 3 And mthd <> 4

                  Try Kill "/root/" & item

                Endif

              Endif

          End Select

        End With

      Endif

    Next

    For Each item In rprootitms

      cnum = cnum + 1
      cperc = Int(cnum / anum * 100)

      If Not Exist(tmp & "restorepercent") And cperc > pperc

        File.Save(tmp & "restorepercent", cperc)
        pperc = cperc

      Endif

      If Exist("/root/" & item)

        Cpertime(fsdir & "/" & pname & "/root/" & item, "/root/" & item)

      Else

        With Stat(fsdir & "/" & pname & "/root/" & item)

          Select Case .Type

            Case gb.Link

              Try Link .Link To "/root/" & item

            Case gb.Directory

              Cpdir(fsdir & "/" & pname & "/root/" & item, "/root/" & item)

            Case gb.File

              Try Copy fsdir & "/" & pname & "/root/" & item To "/root/" & item
              Cpertime(fsdir & "/" & pname & "/root/" & item, "/root/" & item)

          End Select

        End With

      Endif

    Next

  Endif

End

Private Sub wprocwait()

  While wproc.State = Process.Running

    Wait 0.1

  Wend

End
