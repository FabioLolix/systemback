' Gambas module file

Public ptimer As New Timer As "progress"
Public slock As Stream
Public dlock As Stream
Public wproc As Process
Public tmp As String
Public sdir As String
Public fsdir As String
Public lwdir As String
Public stimer As String
Public sdys As String
Public shrs As String
Public smts As String
Public ssds As String
Public smode As String
Public wpos As String
Public pname As String
Public pname1 As String
Public pname2 As String
Public pname3 As String
Public pname4 As String
Public pname5 As String
Public pname6 As String
Public pname7 As String
Public pname8 As String
Public pname9 As String
Public pname10 As String
Public pname11 As String
Public pname12 As String
Public pname13 As String
Public pname14 As String
Public pname15 As String
Public prun As String
Public cpoint As String
Public pnumber As Byte
Public cfupdt As Boolean

Public Sub Main()

  Dim help As String = ("\n Usage: systemback [option]\n\n Options:\n\n  -n, --newbackup          create a new restore point\n\n  -s, --storagedir <path>  get or set restore points storage directory path\n\n  -u, --upgrade            upgrade current system\n                           remove unnecessary files and packages\n\n  -v, --version            output Systemback version number\n\n  -h, --help               show this help\n")

  If IsDir("/run/shm")

    tmp = "/run/shm/dacc5b5f4502_sb"

  Else If IsDir("/dev/shm")

    tmp = "/dev/shm/dacc5b5f4502_sb"

  Else

    tmp = "/tmp/dacc5b5f4502_sb"

  Endif

  With Application

    If .Args[1] = "-h" Or .Args[1] = "--help"

      Exec ["tput", "bold"] Wait
      Print help
      Exec ["tput", "sgr0"] Wait

    Else If User.Name = "root"

      ptimer.Delay = 2000

      If .Args[1] = "schedulerdaemon"

        scheduler

      Else

        configread

        If .Args.Count = 3 And .Args[1] = "pointsize"

          pointsize

        Else If .Args[1] = "copysize"

          copysize

        Else

          Try slock = Lock Left(tmp, RInStr(tmp, "/")) & "systembacklock"

          If Not Error

            Try dlock = Lock "/var/lib/dpkg/lock"

            If Not Error

              If cfupdt = True Then configfileupdate

              If .Args.Count = 1

                clistart

              Else If .Args[1] = "-n" Or .Args[1] = "--newrestorepoint"

                Exec ["tput", "reset"] Wait

                If IsDir(fsdir) And Access(fsdir, gb.Write)

                  Exec ["tput", "civis"] Wait
                  ptimer.Trigger
                  ptimer.Start
                  pointupgrade
                  newrestorepoint
                  ptimer.Stop
                  Wait 0.1
                  Exec ["tput", "reset"] Wait

                Else

                  Exec ["tput", "bold"] Wait
                  Exec ["tput", "setaf", "1"] Wait
                  Error "\n " & ("Restore points storage directory is not available or not writable!") & "\n"
                  Exec ["tput", "sgr0"] Wait
                  Quit 10

                Endif

              Else If .Args[1] = "-s" Or .Args[1] = "--storagedir"

                storagedir

              Else If .Args[1] = "-u" Or .Args[1] = "--upgrade"

                Unlock dlock
                systemupgrade

              Else If .Args[1] = "-v" Or .Args[1] = "--version"

                Exec ["tput", "bold"] Wait
                Print "\n " & Trim(File.Load("/usr/share/systemback/version")) & "\n"
                Exec ["tput", "sgr0"] Wait

              Else

                Exec ["tput", "reset"] Wait
                Exec ["tput", "bold"] Wait
                Exec ["tput", "setaf", "1"] Wait
                Error help
                Exec ["tput", "sgr0"] Wait
                Quit 1

              Endif

            Else

              Exec ["tput", "reset"] Wait
              Exec ["tput", "bold"] Wait
              Exec ["tput", "setaf", "1"] Wait
              Error "\n " & ("Unable to get exclusive lock!") & "\n " & ("First, close all package manager.") & "\n"
              Exec ["tput", "sgr0"] Wait
              Quit 4

            Endif

          Else If .Args[1] = "2Y4d1b5T6b8A"

            systemupgrade

          Else

            Exec ["tput", "reset"] Wait
            Exec ["tput", "bold"] Wait
            Exec ["tput", "setaf", "1"] Wait
            Error "\n " & ("Another Systemback process is currently running, please wait until it\n finishes.") & "\n"
            Exec ["tput", "sgr0"] Wait
            Quit 3

          Endif

        Endif

      Endif

    Else

      Exec ["tput", "reset"] Wait
      Exec ["tput", "bold"] Wait
      Exec ["tput", "setaf", "1"] Wait
      Error "\n " & ("Root privileges are required for running Systemback!") & "\n"
      Exec ["tput", "sgr0"] Wait
      Quit 2

    Endif

  End With

End

Sub pointsize()

  pname = Application.Args[2]

  Do

    If IsDir(fsdir & "/.S00_" & pname)

      If Not Exist(tmp & "pointsize")

        File.Save(tmp & "pointsizecalc", RDir(fsdir & "/.S00_" & pname).Count)
        Move tmp & "pointsizecalc" To tmp & "pointsize"

      Endif

      Wait 0.1

    Else

      If Exist(tmp & "pointsize") Then Kill tmp & "pointsize"
      Break

    Endif

  Loop

End

Sub copysize()

  Dim sum As Long

  Do

    If IsDir("/.sbsystemcopy")

      If Not Exist(tmp & "copysize")

        sum = Dir("/.sbsystemcopy").Count
        If IsDir("/.sbsystemcopy/bin") Then sum = sum + RDir("/.sbsystemcopy/bin").Count
        If IsDir("/.sbsystemcopy/boot") Then sum = sum + RDir("/.sbsystemcopy/boot").Count
        If IsDir("/.sbsystemcopy/etc") Then sum = sum + RDir("/.sbsystemcopy/etc").Count
        If IsDir("/.sbsystemcopy/lib") Then sum = sum + RDir("/.sbsystemcopy/lib").Count
        If IsDir("/.sbsystemcopy/lib32") Then sum = sum + RDir("/.sbsystemcopy/lib32").Count
        If IsDir("/.sbsystemcopy/lib64") Then sum = sum + RDir("/.sbsystemcopy/lib64").Count
        If IsDir("/.sbsystemcopy/opt") Then sum = sum + RDir("/.sbsystemcopy/opt").Count
        If IsDir("/.sbsystemcopy/sbin") Then sum = sum + RDir("/.sbsystemcopy/sbin").Count
        If IsDir("/.sbsystemcopy/selinux") Then sum = sum + RDir("/.sbsystemcopy/selinux").Count
        If IsDir("/.sbsystemcopy/srv") Then sum = sum + RDir("/.sbsystemcopy/srv").Count
        If IsDir("/.sbsystemcopy/usr") Then sum = sum + RDir("/.sbsystemcopy/usr").Count
        If IsDir("/.sbsystemcopy/var") Then sum = sum + RDir("/.sbsystemcopy/var").Count
        File.Save(tmp & "copysizecalc", sum)
        Move tmp & "copysizecalc" To tmp & "copysize"

      Endif

      Wait 0.1

    Else

      If Exist(tmp & "copysize") Then Kill tmp & "copysize"
      Break

    Endif

  Loop

End

Sub clistart()

  Dim choice As String

  Exec ["tput", "reset"] Wait
  Exec ["tput", "bold"] Wait
  Exec ["tput", "civis"] Wait
  Print "\n " & ("Available restore point(s):") & "\n"

  pointupgrade

  If pname1 <> Null And InStr(pname1, " ") = 0 Then Print "  1 ─ " & pname1
  If pname2 <> Null And InStr(pname2, " ") = 0 Then Print "  2 ─ " & pname2

  If pname3 <> Null And InStr(pname3, " ") = 0

    If pnumber = 3 Then Exec ["tput", "setaf", "1"] Wait
    Print "  3 ─ " & pname3

  Endif

  If pname4 <> Null And InStr(pname4, " ") = 0

    If pnumber = 4 Then Exec ["tput", "setaf", "1"] Wait
    Print "  4 ─ " & pname4

  Endif

  If pname5 <> Null And InStr(pname5, " ") = 0

    If pnumber = 5 Then Exec ["tput", "setaf", "1"] Wait
    Print "  5 ─ " & pname5

  Endif

  If pname6 <> Null And InStr(pname6, " ") = 0

    If pnumber = 6 Then Exec ["tput", "setaf", "1"] Wait
    Print "  6 ─ " & pname6

  Endif

  If pname7 <> Null And InStr(pname7, " ") = 0

    If pnumber = 7 Then Exec ["tput", "setaf", "1"] Wait
    Print "  7 ─ " & pname7

  Endif

  If pname8 <> Null And InStr(pname8, " ") = 0

    If pnumber = 8 Then Exec ["tput", "setaf", "1"] Wait
    Print "  8 ─ " & pname8

  Endif

  If pname9 <> Null And InStr(pname9, " ") = 0

    If pnumber = 9 Then Exec ["tput", "setaf", "1"] Wait
    Print "  9 ─ " & pname9

  Endif

  If pname10 <> Null And InStr(pname10, " ") = 0

    If pnumber = 10 Then Exec ["tput", "setaf", "1"] Wait
    Print "  A ─ " & pname10

  Endif

  Exec ["tput", "sgr0"] Wait
  Exec ["tput", "bold"] Wait

  If pname11 <> Null And InStr(pname11, " ") = 0 Then Print "  B ─ " & pname11
  If pname12 <> Null And InStr(pname12, " ") = 0 Then Print "  C ─ " & pname12
  If pname13 <> Null And InStr(pname13, " ") = 0 Then Print "  D ─ " & pname13
  If pname14 <> Null And InStr(pname14, " ") = 0 Then Print "  E ─ " & pname14
  If pname15 <> Null And InStr(pname15, " ") = 0 Then Print "  F ─ " & pname15

  Print "\n G ─ " & ("Create new") & "\n Q ─ " & ("Quit")

  If pname <> Null Then pname = Null

  While pname = Null

    Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

    If choice = "G" Or choice = "g"

      If prun <> Null Then prun = Null

      Exec ["tput", "reset"] Wait

      If IsDir(fsdir) And Access(fsdir, gb.Write)

        Exec ["tput", "civis"] Wait
        ptimer.Trigger
        ptimer.Start
        newrestorepoint
        ptimer.Stop
        Wait 0.1
        clistart
        Return

      Else

        Exec ["tput", "bold"] Wait
        Exec ["tput", "setaf", "1"] Wait
        Error "\n " & ("Restore points storage directory is not available or not writable!") & "\n"
        Exec ["tput", "sgr0"] Wait
        Quit 10

      Endif

    Else If choice = "Q" Or choice = "q"

      Exec ["tput", "reset"] Wait
      Quit

    Else If choice = 1 And pname1 <> Null

      cpoint = "S01"
      pname = pname1

    Else If choice = 2 And pname2 <> Null

      cpoint = "S02"
      pname = pname2

    Else If choice = 3 And pname3 <> Null

      cpoint = "S03"
      pname = pname3

    Else If choice = 4 And pname4 <> Null

      cpoint = "S04"
      pname = pname4

    Else If choice = 5 And pname5 <> Null

      cpoint = "S05"
      pname = pname5

    Else If choice = 6 And pname6 <> Null

      cpoint = "S06"
      pname = pname6

    Else If choice = 7 And pname7 <> Null

      cpoint = "S07"
      pname = pname7

    Else If choice = 8 And pname8 <> Null

      cpoint = "S08"
      pname = pname8

    Else If choice = 9 And pname9 <> Null

      cpoint = "S09"
      pname = pname9

    Else If choice = "A" Or choice = "a" And If pname10 <> Null

      cpoint = "S10"
      pname = pname10

    Else If choice = "B" Or choice = "b" And If pname11 <> Null

      cpoint = "H01"
      pname = pname11

    Else If choice = "C" Or choice = "c" And If pname12 <> Null

      cpoint = "H02"
      pname = pname12

    Else If choice = "D" Or choice = "d" And If pname13 <> Null

      cpoint = "H03"
      pname = pname13

    Else If choice = "E" Or choice = "e" And If pname14 <> Null

      cpoint = "H04"
      pname = pname14

    Else If choice = "F" Or choice = "f" And If pname15 <> Null

      cpoint = "H05"
      pname = pname15

    Endif

  Wend

  Exec ["tput", "reset"] Wait
  Exec ["tput", "bold"] Wait
  Exec ["tput", "civis"] Wait
  Print "\n " & ("Selected restore point:") & "\n\n  " & pname & "\n\n 1 ─ " & ("Delete") & "\n 2 ─ " & ("System restore") & " ▸\n B ─ ◂ " & ("Back")

  Do

    Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

    If choice = "1"

      pointdelete
      clistart
      Return

    Else If choice = "2"

      restore
      Return

    Else If choice = "B" Or choice = "b"

      clistart
      Return

    Endif

  Loop

End

Sub pointdelete()

  prun = ("Deleting restore point")

  Exec ["tput", "reset"] Wait
  Exec ["tput", "civis"] Wait

  ptimer.Trigger
  ptimer.Start

  Move fsdir & "/" & cpoint & "_" & pname To fsdir & "/.DELETED_" & pname
  wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname] For Read
  wprocwait

  prun = ("Emptying cache")
  wproc = Exec ["sync"]
  wprocwait
  File.Save("/proc/sys/vm/drop_caches", "3")

  ptimer.Stop
  Wait 0.1
  clistart

End

Sub storagedir()

  Dim ndir As String
  Dim idir As Byte
  Dim check As Boolean

  If Application.Args.Count = 2

    Exec ["tput", "bold"] Wait
    Print "\n " & sdir & "\n"
    Exec ["tput", "sgr0"] Wait

  Else

    With Application

      ndir = .Args[2]

      If .Args.Count > 3

        For idir = 3 To .Args.Count

          ndir &= " " & .Args[idir]

        Next

      Endif

    End With

    If InStr(ndir, "/Systemback", Len(ndir) - 11) = 0 And InStr(ndir, "/bin") <> 1 And InStr(ndir, "/boot") <> 1 And InStr(ndir, "/cdrom") <> 1 And InStr(ndir, "/dev") <> 1 And InStr(ndir, "/etc") <> 1 And InStr(ndir, "/lib") <> 1 And InStr(ndir, "/opt") <> 1 And InStr(ndir, "/proc") <> 1 And InStr(ndir, "/root") <> 1 And InStr(ndir, "/run") <> 1 And InStr(ndir, "/sbin") <> 1 And InStr(ndir, "/selinux") <> 1 And InStr(ndir, "/srv") <> 1 And InStr(ndir, "/sys") <> 1 And InStr(ndir, "/tmp") <> 1 And InStr(ndir, "/usr") <> 1 And InStr(ndir, "/var") <> 1 And Right(ndir) <> "/" And InStr(File.Load("/etc/passwd"), ":" & ndir & ":") = 0

      Try File.Save(ndir & "/dacc5b5f4502_sbdirtestfile", Null)

      If Error

        check = True

      Else

        Chmod ndir & "/dacc5b5f4502_sbdirtestfile" To "rwxrwxrw-"

        If Stat(ndir & "/dacc5b5f4502_sbdirtestfile").Auth = "rwxrwxrw-"

          If sdir <> ndir

            If IsDir(fsdir)

              If Dir(fsdir).Count = 0

                Try Rmdir fsdir

              Else If Dir(fsdir).Count = 1 And Exist(fsdir & "/.sbschedule")

                Try Kill fsdir & "/.sbschedule"
                If Not Error Then Try Rmdir fsdir

              Endif

            Endif

            sdir = ndir
            configfileupdate
            fsdir = sdir & "/Systemback"

          Endif

          If Not IsDir(fsdir)

            Try Mkdir fsdir

            If Error

              Move fsdir To fsdir & "_" & Int(Rnd(1000000000, 9999999999))
              Mkdir fsdir

            Endif

          Endif

          If Not Exist(fsdir & "/.sbschedule") Then File.Save(fsdir & "/.sbschedule", Null)

          Exec ["tput", "bold"] Wait
          Print "\n " & ("The specified storage directory path is set.") & "\n"
          Exec ["tput", "sgr0"] Wait

        Else

          check = True

        Endif

        Kill ndir & "/dacc5b5f4502_sbdirtestfile"

      Endif

    Else

      check = True

    Endif

    If check = True

      Exec ["tput", "reset"] Wait
      Exec ["tput", "bold"] Wait
      Exec ["tput", "setaf", "1"] Wait
      Error "\n " & ("The specified storage directory path has not been set!") & "\n"
      Exec ["tput", "sgr0"] Wait
      Quit 5

    Endif

  Endif

End

Sub systemupgrade()

  Dim vmlinuz, kernel, kver, subk, item, rklist, iplist As String
  Dim cdown, cup As Byte

  Exec ["apt-get", "update"] Wait

  Do

    If rklist <> Null Then rklist = Null
    If iplist <> Null Then iplist = Null

    wproc = Exec ["apt-get", "install", "-fym", "--force-yes"] Wait

    If wproc.Value = 0

      wproc = Exec ["dpkg", "--configure", "-a"] Wait

      If wproc.Value = 0

        wproc = Exec ["apt-get", "dist-upgrade", "--no-install-recommends", "-ym", "--force-yes"] Wait

        If wproc.Value = 0

          wproc = Exec ["apt-get", "autoremove", "--purge", "-y"] Wait

          If wproc.Value = 0

            For Each vmlinuz In Dir("/boot", "vmlinuz-*", gb.File).Sort(gb.Descent)

              vmlinuz = Right(vmlinuz, -8)
              kernel = Left(vmlinuz, InStr(vmlinuz, "-") - 1)
              kver = Right(vmlinuz, - Len(kernel) - 1)
              kver = Left(kver, InStr(kver, "-") - 1)

              If Left(vmlinuz, Len(kernel) + Len(kver) + 2) = kernel & "-" & kver & "-"

                If InStr(rklist, "linux-image-" & kernel & "-" & kver & "-") = 0

                  For cup = 1 To 100 Step 1

                    subk = kver - cup
                    subk = kernel & "-" & subk

                    For Each item In Dir("/boot", "vmlinuz-*", gb.File)

                      If Left(item, Len("vmlinuz-" & subk & "-")) = "vmlinuz-" & subk & "-"

                        rklist &= " " & subk & "-*"

                      Endif

                    Next

                  Next

                Endif

              Endif

            Next

            If rklist <> Null Then wproc = Exec ["bash", "-c", "apt-get autoremove --purge " & rklist] Wait

            If wproc.Value = 0 Or wproc.Value = 1

              wproc = Exec ["dpkg", "-l"] For Read
              While Not Eof(wproc)
                Line Input #wproc, item

                If Left(item, 2) = "rc"

                  item = Right(item, -4)
                  item = Left(item, InStr(item, " ") - 1)
                  iplist &= " " & item

                Endif

              Wend

              If iplist <> Null Then Exec ["bash", "-c", "dpkg --purge " & iplist] Wait

              Exec ["apt-get", "clean"] Wait

              For Each item In Dir("/var/cache/apt", "*.bin.*", gb.File)

                Kill "/var/cache/apt/" & item

              Next

              For Each item In Dir("/lib/modules", "[^.]*", gb.Directory)

                If Not Exist("/boot/vmlinuz-" & item) Then Exec ["rm", "-rf", "/lib/modules/" & item]

              Next

              Break

            Endif

          Endif

        Endif

      Endif

    Else

      Exec ["dpkg", "--configure", "-a"] Wait

    Endif

    Exec ["tput", "reset"] Wait
    Exec ["tput", "civis"] Wait

    If cdown <> 3 Then cdown = 3

    While cdown <> 0

      Exec ["tput", "bold"] Wait
      Exec ["tput", "setaf", "1"] Wait
      Error "\n " & ("An error occurred while upgrading the system!") & "\n"
      Exec ["tput", "sgr0"] Wait
      Print " " & ("Restart upgrade ...") & " " & cdown

      Wait 1

      cdown = cdown - 1

      Exec ["tput", "cup", "0", "0"] Wait

    Wend

    Exec ["tput", "reset"] Wait

  Loop

End

Sub restore()

  Dim ofile As File
  Dim cline, choice, fstab1, fstab2, elist, usr, mntdev As String
  Dim rtmp As String = ".dacc5b5f4502_sbrestore"
  Dim greinst, fsave, rstart, rmode As Byte

  Exec ["tput", "reset"] Wait
  Exec ["tput", "bold"] Wait
  Exec ["tput", "civis"] Wait
  Print "\n " & ("Restore with the following restore point:") & "\n\n  " & pname & "\n\n " & ("Restore with the following restore method:") & "\n\n  1 ─ " & ("Full restore") & "\n  2 ─ " & ("System files restore") & "\n\n  " & ("Users configuration files restore") & "\n\n   3 ─ " & ("Complete configuration files restore") & "\n   4 ─ " & ("Keep newly installed configuration files") & "\n\n C ─ " & ("Cancel")

  While rmode = 0

    Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

    If choice = "C" Or choice = "c"

      clistart
      Return

    Else If choice = 1

      rmode = 1

    Else If choice = 2

      rmode = 2

    Else If choice = 3

      rmode = 3

    Else If choice = 4

      rmode = 4

    Endif

  Wend

  Exec ["tput", "reset"] Wait
  Exec ["tput", "bold"] Wait
  Exec ["tput", "civis"] Wait
  Print "\n " & ("Restore with the following restore point:") & "\n\n  " & pname & "\n\n " & ("Restore with the following restore method:") & "\n"

  If rmode = 1

    Print "  " & ("Full restore") & "\n"

  Else If rmode = 2

    Print "  " & ("System files restore") & "\n"

  Else If rmode = 3

    Print "  " & ("Complete configuration files restore") & "\n"

  Else

    Print "  " & ("Configuration files restore") & "\n"

  Endif

  If rmode = 1 Or rmode = 2

    If Exist("/etc/fstab")

      Print " " & ("You want to keep the current fstab file? (Y/N)")

      While fsave = 0

        Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

        If choice = "Y" Or choice = "y" Or choice = "I" Or choice = "i" Or choice = "K" Or choice = "k" Or choice = "S" Or choice = "s"

          fsave = 1

        Else If choice = "N" Or choice = "n" Or choice = "E" Or choice = "e"

          fsave = 2

        Endif

      Wend

      Exec ["tput", "reset"] Wait
      Exec ["tput", "bold"] Wait
      Exec ["tput", "civis"] Wait
      Print "\n " & ("Restore with the following restore point:") & "\n\n  " & pname & "\n\n " & ("Restore with the following restore method:") & "\n"

      If rmode = 1

        Print "  " & ("Full restore") & "\n"

      Else

        Print "  " & ("System files restore") & "\n"

      Endif

      Print " " & ("You want to keep the current fstab file? (Y/N)") & " " & choice & "\n\n " & ("Reinstall the GRUB 2 bootloader? (Y/N)")

      While greinst = 0

        Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

        If choice = "Y" Or choice = "y" Or choice = "I" Or choice = "i" Or choice = "K" Or choice = "k" Or choice = "S" Or choice = "s"

          greinst = 1

        Else If choice = "N" Or choice = "n" Or choice = "E" Or choice = "e"

          greinst = 2

        Endif

      Wend

      Exec ["tput", "reset"] Wait
      Exec ["tput", "bold"] Wait
      Exec ["tput", "civis"] Wait
      Print "\n " & ("Restore with the following restore point:") & "\n\n  " & pname & "\n\n " & ("Restore with the following restore method:") & "\n"

      If rmode = 1

        Print "  " & ("Full restore") & "\n"

      Else

        Print "  " & ("System files restore") & "\n"

      Endif

      Print " " & ("You want to keep the current fstab file? (Y/N)") & " " & choice & "\n\n " & ("Reinstall the GRUB 2 bootloader? (Y/N)") & " " & choice & "\n\n " & ("Start the restore? (Y/N)")

    Else

      Print " " & ("Reinstall the GRUB 2 bootloader? (Y/N)")

      While fsave = 0

        Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

        If choice = "Y" Or choice = "y" Or choice = "I" Or choice = "i" Or choice = "K" Or choice = "k" Or choice = "S" Or choice = "s"

          fsave = 1

        Else If choice = "N" Or choice = "n" Or choice = "E" Or choice = "e"

          fsave = 2

        Endif

      Wend

      Exec ["tput", "reset"] Wait
      Exec ["tput", "bold"] Wait
      Exec ["tput", "civis"] Wait
      Print "\n " & ("Restore with the following restore point:") & "\n\n  " & pname & "\n\n " & ("Restore with the following restore method:") & "\n"

      If rmode = 1

        Print "  " & ("Full restore") & "\n"

      Else

        Print "  " & ("System files restore") & "\n"

      Endif

      Print " " & ("Reinstall the GRUB 2 bootloader? (Y/N)") & " " & choice & "\n\n " & ("Start the restore? (Y/N)")

    Endif

  Else

    Print " " & ("Start the restore? (Y/N)")

  Endif

  While rstart = 0

    Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

    If choice = "Y" Or choice = "y" Or choice = "I" Or choice = "i" Or choice = "K" Or choice = "k" Or choice = "S" Or choice = "s"

      rstart = 1

    Else If choice = "N" Or choice = "n" Or choice = "E" Or choice = "e"

      rstart = 2

    Endif

  Wend

  If rstart = 1

    If rmode = 1

      prun = ("Restoring the full system")

    Else If rmode = 2

      prun = ("Restoring the system files")

    Else

      prun = ("Restoring users configuration files")

    Endif

    Exec ["tput", "reset"] Wait
    Exec ["tput", "civis"] Wait

    ptimer.Trigger
    ptimer.Start

    If rmode = 1 Or rmode = 2

      If fsave = 1

        Exec ["sha1sum", "/etc/fstab"] To fstab1
        fstab1 = Left(fstab1, InStr(fstab1, " ") - 1)
        Exec ["sha1sum", fsdir & "/" & cpoint & "_" & pname & "/etc/fstab"] To fstab2
        fstab2 = Left(fstab2, InStr(fstab2, " ") - 1)
        If fstab1 <> fstab2 Then Try Copy "/etc/fstab" To "/tmp/sbrestorefstab"

      Endif

      wproc = Exec ["bash", "-c", "sbsync -a --delete '" & fsdir & "'/" & cpoint & "_" & pname & "/ / --include=/{bin,boot,cdrom,dev,etc,home,lib,lib32,lib64,mnt,opt,proc,run,root,sbin,selinux,srv,sys,tmp,usr,var,initrd*,vmlinuz*} --exclude={/*,/home/*,/proc/*,/run/*,/sys/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/root/*,/var/tmp/*,/var/run/*,/etc/mtab,/etc/sudoers.d/99_systemback,/etc/xdg/autostart/sbschedule.desktop,/var/lib/udisks/mtab,/var/lib/dpkg/info/systemback*,/usr/bin/systemback*,/usr/bin/sbsync,/usr/bin/sbstart,/usr/share/systemback,/etc/systemback*,lost+found}"] For Read
      wprocwait

      If fsave = 1 And Exist("/tmp/sbrestorefstab")

        Try Kill "/etc/fstab"
        Copy "/tmp/sbrestorefstab" To "/etc/fstab"
        Kill "/tmp/sbrestorefstab"

      Endif

      wproc = Exec ["sbsync", "-ax", "--delete", fsdir & "/" & cpoint & "_" & pname & "/media", "/"] For Read
      wprocwait

    Endif

    If rmode = 1 Or rmode = 3

      elist = "/" & rtmp & ",/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*"

      ofile = Open fsdir & "/" & cpoint & "_" & pname & "/.excludes" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If Left(cline, 1) = "." Then elist &= ",'/" & cline & "'"

      Wend
      Close #ofile

      For Each usr In Dir(fsdir & "/" & cpoint & "_" & pname & "/home", "*", gb.Directory)

        If IsDir("/home/" & usr)

          wproc = Exec ["bash", "-c", "sbsync -rptgoD --delete --min-size=8MB --link-dest=../ /home/" & usr & "/ /home/" & usr & "/" & rtmp & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -a --delete '" & fsdir & "'/" & cpoint & "_" & pname & "/home/" & usr & "/ /home/" & usr & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -am --link-dest=" & rtmp & "/ /home/" & usr & "/" & rtmp & "/ /home/" & usr] For Read
          wprocwait

          Exec ["rm", "-rf", "/home/" & usr & "/" & rtmp] Wait

        Endif

      Next

      wproc = Exec ["bash", "-c", "sbsync -rptgoD --delete --min-size=8MB --link-dest=../ /root/ /root/" & rtmp & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -a --delete '" & fsdir & "'/" & cpoint & "_" & pname & "/root/ /root --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -am --link-dest=" & rtmp & "/ /root/" & rtmp & "/ /root"] For Read
      wprocwait

      Exec ["rm", "-rf", "/root/" & rtmp] Wait

    Else If rmode = 4

      wproc = Exec ["sbsync", "-a", fsdir & "/" & cpoint & "_" & pname & "/home/", "/home"] For Read
      wprocwait

      wproc = Exec ["sbsync", "-a", fsdir & "/" & cpoint & "_" & pname & "/root/", "/root"] For Read
      wprocwait

    Endif

    If greinst = 1

      wproc = Exec ["update-grub"] For Read
      wprocwait

      ofile = Open "/proc/self/mounts" For Input
      While Not Eof(ofile)
        Line Input #ofile, cline

        If InStr(cline, " /boot ") <> 0

          mntdev = Left(cline, InStr(cline, " ") - 1)
          Break

        Else If InStr(cline, " / ") <> 0

          mntdev = Left(cline, InStr(cline, " ") - 1)

        Endif

      Wend
      Close #ofile

      wproc = Exec ["grub-install", "--force", mntdev] For Read
      wprocwait

      If wproc.Value <> 0

        ptimer.Stop
        Wait 0.1
        Exec ["tput", "reset"] Wait
        Exec ["tput", "bold"] Wait
        Exec ["tput", "setaf", "1"] Wait
        Error "\n " & ("Restoration is completed, but an error occurred while reinstalling GRUB!") & "\n"
        Exec ["tput", "sgr0"] Wait
        Exec ["tput", "cnorm"] Wait
        Quit 7

      Endif

    Endif

    If ptimer.Enabled = True

      ptimer.Stop
      Wait 0.1

      If rmode = 1

        Exec ["tput", "reset"] Wait
        Exec ["tput", "bold"] Wait
        Exec ["tput", "civis"] Wait
        Print "\n " & ("Full system restoration is completed.") & "\n\n " & ("Press 'ENTER' key to reboot computer, or 'Q' to quit.") & "\n"

        Do

          Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

          If choice = Null

            If Exist("/sbin/reboot") Then Exec ["reboot"] Else Exec ["systemctl", "reboot"]

          Else If choice = "Q" Or choice = "q"

            Break

          Endif

        Loop

      Else If rmode = 2

        Exec ["tput", "reset"] Wait
        Exec ["tput", "bold"] Wait
        Exec ["tput", "civis"] Wait
        Print "\n " & ("System files restoration are completed.") & "\n\n " & ("Press 'ENTER' key to reboot computer, or 'Q' to quit.") & "\n"

        Do

          Exec ["bash", "-c", "read -sn 1 choice ; echo -n ${choice}"] To choice

          If choice = Null

            If Exist("/sbin/reboot") Then Exec ["reboot"] Else Exec ["systemctl", "reboot"]

          Else If choice = "Q" Or choice = "q"

            Break

          Endif

        Loop

      Else If rmode = 3

        Exec ["tput", "reset"] Wait
        Exec ["tput", "bold"] Wait
        Print "\n " & ("Users configuration files full restoration are completed.") & "\n"

      Else

        Exec ["tput", "reset"] Wait
        Exec ["tput", "bold"] Wait
        Print "\n " & ("Users configuration files restoration are completed.") & "\n"

      Endif

    Endif

    Exec ["tput", "sgr0"] Wait
    Exec ["tput", "cnorm"] Wait

  Else

    Exec ["tput", "reset"] Wait
    Exec ["tput", "bold"] Wait
    Exec ["tput", "setaf", "1"] Wait
    Error "\n " & ("Restore is aborted!") & "\n"
    Exec ["tput", "sgr0"] Wait
    Exec ["tput", "cnorm"] Wait
    Quit 6

  Endif

End

Public Sub progress_Timer()

  Exec ["tput", "sgr0"] Wait
  Exec ["tput", "bold"] Wait
  Print "                                        \n    Systemback\n                                        \n " & prun & "                                        \n                                        \n                                        \n                                        "
  Exec ["tput", "invis"] Wait

  Wait 0.5
  If ptimer.Enabled = False Then Return

  Exec ["tput", "cup", "0", "0"] Wait
  Exec ["tput", "sgr0"] Wait
  Exec ["tput", "bold"] Wait
  Print "                                        \n    Systemback\n                                        \n " & prun & " .                                      \n                                        \n                                        \n                                        "
  Exec ["tput", "invis"] Wait

  Wait 0.5
  If ptimer.Enabled = False Then Return

  Exec ["tput", "cup", "0", "0"] Wait
  Exec ["tput", "sgr0"] Wait
  Exec ["tput", "bold"] Wait
  Print "                                        \n    Systemback\n                                        \n " & prun & " ..                                     \n                                        \n                                        \n                                        "
  Exec ["tput", "invis"] Wait

  Wait 0.5
  If ptimer.Enabled = False Then Return

  Exec ["tput", "cup", "0", "0"] Wait
  Exec ["tput", "sgr0"] Wait
  Exec ["tput", "bold"] Wait
  Print "                                        \n    Systemback\n                                        \n " & prun & " ...                                    \n                                        \n                                        \n                                        "
  Exec ["tput", "invis"] Wait
  Exec ["tput", "cup", "0", "0"] Wait

End

Sub scheduler()

  Dim srlock As Stream
  Dim xauth As String = Application.Args[2]
  Dim rnum As Long = Int(Rnd(1000000000, 9999999999))

  If Not Exist("/cdrom/casper/filesystem.squashfs") And Not Exist("/live/image/live/filesystem.squashfs") And Not Exist("/lib/live/mount/medium/live/filesystem.squashfs")

    Application.Daemon = True
    Try srlock = Lock Left(tmp, RInStr(tmp, "/")) & "sbschedulerlock"

    If Not Error

      File.Save("/tmp/sbschedulerid", Application.Id)
      Wait 300

      Do

        If Exist("/tmp/sbschedulerid")

          If File.Load("/tmp/sbschedulerid") = "restart"

            Unlock srlock
            If xauth = Null Then Exec ["systemback", "schedulerdaemon"] Else Exec ["systemback", "schedulerdaemon", xauth]
            Break

          Endif

        Endif

        configread

        If cfupdt = False And stimer = "on"

          smts = sdys * 1440 + shrs * 60 + smts

          If IsDir(fsdir) And Access(fsdir, gb.Write) = True

            If Exist(fsdir & "/.sbschedule")

              If Val(smts) <= DateDiff(Stat(fsdir & "/.sbschedule").LastModified, Now, gb.Minute)

                Try slock = Lock Left(tmp, RInStr(tmp, "/")) & "systembacklock"

                If Not Error

                  Try dlock = Lock "/var/lib/dpkg/lock"

                  If Error

                    Unlock slock

                  Else

                    If smode = "off" And Exist("/usr/share/systemback/systembackgui")

                      If xauth = Null

                        Exec ["/usr/share/systemback/systembackgui", "schedule", wpos] Wait

                      Else

                        Copy xauth To "/tmp/sbXauthority-" & rnum
                        Exec ["/usr/share/systemback/systembackgui", "schedule", wpos] With ["XAUTHORITY=/tmp/sbXauthority-" & rnum] Wait
                        If Exist("/tmp/sbXauthority-" & rnum) Then Kill "/tmp/sbXauthority-" & rnum

                      Endif

                    Else If smode = "on"

                      pointupgrade
                      newrestorepoint

                    Endif

                    Unlock slock
                    Unlock dlock
                    Wait 50

                  Endif

                Endif

              Endif

            Else

              File.Save(fsdir & "/.sbschedule", Null)

            Endif

          Endif

        Endif

        Wait 10

      Loop

    Endif

  Endif

End

Sub newrestorepoint()

  Dim ofile As File
  Dim btmp As String = ".dacc5b5f4502_sbbackup"
  Dim cline, usr, ldest, cldest, elist, item, psize, dtime As String

  For Each item In Dir(fsdir, ".*", gb.Directory)

    If Left(item, 9) = ".DELETED_" Or Left(item, 5) = ".S00_"

      If prun <> ("Deleting incomplete restore point") Then prun = ("Deleting incomplete restore point")
      wproc = Exec ["rm", "-rf", fsdir & "/" & item] For Read
      wprocwait

    Endif

  Next

  If pname10 <> Null And InStr(pname10, " ") = 0

    prun = ("Deleting old restore point(s)")
    Move fsdir & "/S10_" & pname10 To fsdir & "/.DELETED_" & pname10
    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname10] For Read
    wprocwait

  Endif

  If pname9 <> Null And InStr(pname9, " ") = 0 And pnumber < 10

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S09_" & pname9 To fsdir & "/.DELETED_" & pname9
    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname9] For Read
    wprocwait

  Endif

  If pname8 <> Null And InStr(pname8, " ") = 0 And pnumber < 9

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S08_" & pname8 To fsdir & "/.DELETED_" & pname8
    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname8] For Read
    wprocwait

  Endif

  If pname7 <> Null And InStr(pname7, " ") = 0 And pnumber < 8

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S07_" & pname7 To fsdir & "/.DELETED_" & pname7
    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname7] For Read
    wprocwait

  Endif

  If pname6 <> Null And InStr(pname6, " ") = 0 And pnumber < 7

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S06_" & pname6 To fsdir & "/.DELETED_" & pname6
    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname6] For Read
    wprocwait

  Endif

  If pname5 <> Null And InStr(pname5, " ") = 0 And pnumber < 6

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S05_" & pname5 To fsdir & "/.DELETED_" & pname5
    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname5] For Read
    wprocwait

  Endif

  If pname4 <> Null And InStr(pname4, " ") = 0 And pnumber < 5

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S04_" & pname4 To fsdir & "/.DELETED_" & pname4
    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname4] For Read
    wprocwait

  Endif

  If pname3 <> Null And InStr(pname3, " ") = 0 And pnumber = 3

    If prun <> ("Deleting old restore point(s)") Then prun = ("Deleting old restore point(s)")
    Move fsdir & "/S03_" & pname3 To fsdir & "/.DELETED_" & pname3
    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname3] For Read
    wprocwait

  Endif

  prun = ("Checking files and directories")
  elist = "/" & btmp & ",/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,*~"

  ofile = Open "/etc/systemback.excludes" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If Left(cline, 1) = "." Then elist &= ",'/" & cline & "'"

  Wend
  Close #ofile

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If InStr(cline, ":/home/") <> 0

      usr = Left(cline, InStr(cline, ":") - 1)

      If IsDir("/home/" & usr)

        wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete --max-size=8MB --link-dest=../ /home/" & usr & "/ /home/" & usr & "/" & btmp & " --exclude={" & elist & "} --include=/.* --exclude=/*"] For Read
        wprocwait

      Endif

    Endif

  Wend
  Close #ofile

  wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete --max-size=8MB --link-dest=../ /root/ /root/" & btmp & " --exclude={" & elist & "} --include=/.* --exclude=/*"] For Read
  wprocwait

  Try Mkdir "/media/" & btmp

  If Exist("/etc/fstab")

    For Each item In Dir("/media", "[^.]*", gb.Directory)

      ofile = Open "/etc/fstab" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If InStr(cline, "/media/" & item) <> 0

          wproc = Exec ["bash", "-c", "sbsync -rlptgox --delete /media/ /media/" & btmp & " --include=/" & item & " --exclude=/* --include=*/ --exclude=*"] For Read
          wprocwait

        Endif

      Wend
      Close #ofile

    Next

  Endif

  Try Mkdir "/var/log/" & btmp

  For Each item In RDir("/var/log", "[^.]*")

    With Stat("/var/log/" & item)

      If .Type = gb.Directory

        Try Mkdir "/var/log/" & btmp & "/" & item

      Else If .Type = gb.File And Right(item, 2) <> ".0" And Right(item, 2) <> ".1" And Right(item, 3) <> ".gz" And Right(item, 4) <> ".old"

        Try File.Save("/var/log/" & btmp & "/" & item, Null)

      Endif

      Try Chmod "/var/log/" & btmp & "/" & item To .Auth
      Try Chown "/var/log/" & btmp & "/" & item To .User
      Try Chgrp "/var/log/" & btmp & "/" & item To .Group

    End With

  Next

  wproc = Exec ["bash", "-c", "sbsync -rlptgo --list-only / --include=/{bin,boot,cdrom,dev,etc,lib,lib32,lib64,media,media/" & btmp & ",mnt,opt,proc,run,sbin,selinux,srv,sys,tmp,usr,var,var/log/" & btmp & ",var/lib/ureadahead/debugfs,initrd*,vmlinuz*} --exclude={/*,/proc/*,/run/*,/sys/*,/media/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/var/" & btmp & ",/var/lib/ureadahead/*,/var/log/*,/var/tmp/*,/var/cache/apt/*.bin,/var/cache/apt/*.bin.*,/var/cache/apt/archives/*.deb,/var/run/*,/etc/mtab,/var/lib/udisks/mtab,lost+found,*.dpkg-old,*~} | wc -l >/" & tmp & "systemsize"] For Read
  wprocwait

  psize = Trim(File.Load(tmp & "systemsize"))
  Kill tmp & "systemsize"

  prun = ("Creating restore point")
  dtime = Year(Now) & "-" & Right("0" & Month(Now), 2) & "-" & Right("0" & Day(Now), 2) & "," & Right("0" & Hour(Now), 2) & "." & Right("0" & Minute(Now), 2) & "." & Right("0" & Second(Now), 2)
  Mkdir fsdir & "/.S00_" & dtime
  Mkdir fsdir & "/.S00_" & dtime & "/home"

  With Stat("/home")

    Chmod fsdir & "/.S00_" & dtime & "/home" To .Auth
    Chown fsdir & "/.S00_" & dtime & "/home" To .User
    Chgrp fsdir & "/.S00_" & dtime & "/home" To .Group

  End With

  If pname1 <> Null

    If pname2 = Null

      ldest = "S01_" & pname1

    Else

      ldest = "{'S01_" & pname1 & "','S02_" & pname2 & "'"
      If pname3 <> Null Then ldest &= ",'S03_" & pname3 & "'"
      If pname4 <> Null Then ldest &= ",'S04_" & pname4 & "'"
      If pname5 <> Null Then ldest &= ",'S05_" & pname5 & "'"
      If pname6 <> Null Then ldest &= ",'S06_" & pname6 & "'"
      If pname7 <> Null Then ldest &= ",'S07_" & pname7 & "'"
      If pname8 <> Null Then ldest &= ",'S08_" & pname8 & "'"
      If pname9 <> Null Then ldest &= ",'S09_" & pname9 & "'"
      If pname11 <> Null Then ldest &= ",'H01_" & pname11 & "'"
      If pname12 <> Null Then ldest &= ",'H02_" & pname12 & "'"
      If pname13 <> Null Then ldest &= ",'H03_" & pname13 & "'"
      If pname14 <> Null Then ldest &= ",'H04_" & pname14 & "'"
      If pname15 <> Null Then ldest &= ",'H05_" & pname15 & "'"
      ldest &= "}"

    Endif

  Else If pname11 <> Null

    If pname12 <> Null

      ldest = "H01_" & pname11

    Else

      ldest = "{'H01_" & pname11 & "','H02_" & pname12 & "'"
      If pname13 <> Null Then ldest &= ",'H03_" & pname13 & "'"
      If pname14 <> Null Then ldest &= ",'H04_" & pname14 & "'"
      If pname15 <> Null Then ldest &= ",'H05_" & pname15 & "'"
      ldest &= "}"

    Endif

  Endif

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If InStr(cline, ":/home/") <> 0

      usr = Left(cline, InStr(cline, ":") - 1)

      If IsDir("/home/" & usr & "/" & btmp)

        If ldest <> Null Then cldest = "--link-dest=../../../" & ldest & "/home/" & usr
        wproc = Exec ["bash", "-c", "sbsync -rlptgo " & cldest & " /home/" & usr & "/" & btmp & "/ '" & fsdir & "'/.S00_" & dtime & "/home/" & usr] For Read
        wprocwait
        wproc = Exec ["rm", "-rf", "/home/" & usr & "/" & btmp] For Read
        wprocwait

      Endif

    Endif

  Wend
  Close #ofile

  If ldest <> Null Then cldest = "--link-dest=../../" & ldest & "/root"
  wproc = Exec ["bash", "-c", "sbsync -rlptgo " & cldest & " /root/" & btmp & "/ '" & fsdir & "'/.S00_" & dtime & "/root"] For Read
  wprocwait
  wproc = Exec ["rm", "-rf", "/root/" & btmp] For Read
  wprocwait

  If ldest <> Null Then cldest = "--link-dest=../" & ldest
  wproc = Exec ["bash", "-c", "sbsync -rlptgo " & cldest & " / '" & fsdir & "'/.S00_" & dtime & " --include=/{bin,boot,cdrom,dev,etc,lib,lib32,lib64,media,media/" & btmp & ",mnt,opt,proc,run,sbin,selinux,srv,sys,tmp,usr,var,var/log/" & btmp & ",var/lib/ureadahead/debugfs,initrd*,vmlinuz*} --exclude={/*,/proc/*,/run/*,/sys/*,/media/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/var/" & btmp & ",/var/lib/ureadahead/*,/var/log/*,/var/tmp/*,/var/cache/apt/*.bin,/var/cache/apt/*.bin.*,/var/cache/apt/archives/*.deb,/var/run/*,/etc/mtab,/var/lib/udisks/mtab,lost+found,*.dpkg-old,*~}"] For Read
  wprocwait

  Exec ["rm", "-rf", "/media/" & btmp, "/var/log/" & btmp] For Read

  If wproc.Value = 0

    If Dfree(fsdir) > 104857600

      For Each item In Dir(fsdir & "/.S00_" & dtime & "/media/" & btmp)

        Move fsdir & "/.S00_" & dtime & "/media/" & btmp & "/" & item To fsdir & "/.S00_" & dtime & "/media/" & item

      Next

      Rmdir fsdir & "/.S00_" & dtime & "/media/" & btmp

      For Each item In Dir(fsdir & "/.S00_" & dtime & "/var/log/" & btmp)

        Move fsdir & "/.S00_" & dtime & "/var/log/" & btmp & "/" & item To fsdir & "/.S00_" & dtime & "/var/log/" & item

      Next

      Rmdir fsdir & "/.S00_" & dtime & "/var/log/" & btmp

      If IsDir(fsdir & "/S01_" & pname1)

        Move fsdir & "/S01_" & pname1 To fsdir & "/S02_" & pname1

        If IsDir(fsdir & "/S02_" & pname2)

          Move fsdir & "/S02_" & pname2 To fsdir & "/S03_" & pname2

          If IsDir(fsdir & "/S03_" & pname3)

            Move fsdir & "/S03_" & pname3 To fsdir & "/S04_" & pname3

            If IsDir(fsdir & "/S04_" & pname4)

              Move fsdir & "/S04_" & pname4 To fsdir & "/S05_" & pname4

              If IsDir(fsdir & "/S05_" & pname5)

                Move fsdir & "/S05_" & pname5 To fsdir & "/S06_" & pname5

                If IsDir(fsdir & "/S06_" & pname6)

                  Move fsdir & "/S06_" & pname6 To fsdir & "/S07_" & pname6

                  If IsDir(fsdir & "/S07_" & pname7)

                    Move fsdir & "/S07_" & pname7 To fsdir & "/S08_" & pname7

                    If IsDir(fsdir & "/S08_" & pname8)

                      Move fsdir & "/S08_" & pname8 To fsdir & "/S09_" & pname8

                      If IsDir(fsdir & "/S09_" & pname9)

                        Move fsdir & "/S09_" & pname9 To fsdir & "/S10_" & pname9

                      Endif

                    Endif

                  Endif

                Endif

              Endif

            Endif

          Endif

        Endif

      Endif

      Copy "/etc/systemback.excludes" To fsdir & "/.S00_" & dtime & "/.excludes"
      File.Save(fsdir & "/.S00_" & dtime & "/.pointsize", psize & "\n")
      Move fsdir & "/.S00_" & dtime To fsdir & "/S01_" & dtime
      File.Save(fsdir & "/.sbschedule", Null)

      prun = ("Emptying cache")
      wproc = Exec ["sync"] For Read
      wprocwait
      File.Save("/proc/sys/vm/drop_caches", "3")

    Else If Application.Daemon = False

      ptimer.Stop
      Wait 0.1

      Exec ["tput", "reset"] Wait
      Exec ["tput", "bold"] Wait
      Exec ["tput", "setaf", "1"] Wait
      Error "\n " & ("Restore point creation is aborted!") & "\n " & ("Not enough free disk space to complete the process.") & "\n"
      Exec ["tput", "sgr0"] Wait
      pointupgrade
      Quit 8

    Endif

  Else If Application.Daemon = False

    ptimer.Stop
    Wait 0.1

    Exec ["tput", "reset"] Wait
    Exec ["tput", "bold"] Wait
    Exec ["tput", "setaf", "1"] Wait
    Error "\n " & ("Restore point creation is aborted!") & "\n " & ("There has been critical changes in the file system during this operation.") & "\n"
    Exec ["tput", "sgr0"] Wait
    pointupgrade
    Quit 9

  Endif

End

Sub configread()

  Dim ofile As File
  Dim cline, cval As String

  If cfupdt = True Then cfupdt = False

  If Exist("/etc/systemback.conf")

    ofile = Open "/etc/systemback.conf" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If InStr(cline, "storagedir=") = 1

        sdir = Right(cline, - InStr(cline, "="))

      Else If InStr(cline, "liveworkdir=") = 1

        lwdir = Right(cline, - InStr(cline, "="))

      Else If InStr(cline, "schedule=") = 1

        cval = Right(cline, - InStr(cline, "="))
        sdys = Left(cval, InStr(cval, ":") - 1)
        shrs = Left(cval, InStr(cval, ":", Len(sdys) + 2) - 1)
        shrs = Right(shrs, - InStr(shrs, ":"))
        smts = Right(Left(cval, InStr(cval, ":", Len(sdys & shrs) + 3) - 1), - Len(sdys & shrs) - 2)
        ssds = Right(cval, - RInStr(cval, ":"))

      Else If cline = "pointsnumber=3"

        pnumber = 3

      Else If cline = "pointsnumber=4"

        pnumber = 4

      Else If cline = "pointsnumber=5"

        pnumber = 5

      Else If cline = "pointsnumber=6"

        pnumber = 6

      Else If cline = "pointsnumber=7"

        pnumber = 7

      Else If cline = "pointsnumber=8"

        pnumber = 8

      Else If cline = "pointsnumber=9"

        pnumber = 9

      Else If cline = "pointsnumber=10"

        pnumber = 10

      Else If cline = "timer=on"

        stimer = "on"

      Else If cline = "timer=off"

        stimer = "off"

      Else If cline = "silentmode=on"

        smode = "on"

      Else If cline = "silentmode=off"

        smode = "off"

      Else If cline = "windowposition=topleft"

        wpos = "topleft"

      Else If cline = "windowposition=topright"

        wpos = "topright"

      Else If cline = "windowposition=center"

        wpos = "center"

      Else If cline = "windowposition=bottomleft"

        wpos = "bottomleft"

      Else If cline = "windowposition=bottomright"

        wpos = "bottomright"

      Endif

    Wend
    Close #ofile

  Endif

  If pnumber = 0

    pnumber = 5
    cfupdt = True

  Endif

  If wpos = Null

    wpos = "topright"
    If cfupdt = False Then cfupdt = True

  Endif

  If sdir = Null

    sdir = "/home"
    If cfupdt = False Then cfupdt = True
    If Not Exist("/home/Systemback") Then Try Mkdir "/home/Systemback"
    If Not Exist("/home/Systemback/.sbschedule") Then Try File.Save("/home/Systemback/.sbschedule", Null)

  Endif

  If lwdir = Null

    lwdir = "/home"
    If cfupdt = False Then cfupdt = True

  Endif

  If Val(sdys) = Null Or Val(shrs) = Null Or Val(smts) = Null Or Val(ssds) = Null

    sdys = 1
    shrs = 0
    smts = 0
    ssds = 10
    If cfupdt = False Then cfupdt = True

  Else If Val(sdys) > 7 Or Val(shrs) > 23 Or Val(smts) > 59 Or Val(ssds) < 10 Or Val(ssds) > 99

    sdys = 1
    shrs = 0
    smts = 0
    ssds = 10
    If cfupdt = False Then cfupdt = True

  Else If sdys = 0 And shrs = 0 And Val(smts) < 30

    smts = 30
    If cfupdt = False Then cfupdt = True

  Endif

  If smode = Null

    smode = "off"
    If cfupdt = False Then cfupdt = True

  Endif

  If stimer = Null

    stimer = "off"
    If cfupdt = False Then cfupdt = True

  Endif

  fsdir = sdir & "/Systemback"
  If Not Exist("/etc/systemback.excludes") Then File.Save("/etc/systemback.excludes", Null)

End

Sub configfileupdate()

  File.Save("/etc/systemback.conf", "storagedir=" & sdir & "\nliveworkdir=" & lwdir & "\npointsnumber=" & pnumber & "\ntimer=" & stimer & "\nschedule=" & sdys & ":" & shrs & ":" & smts & ":" & ssds & "\nsilentmode=" & smode & "\nwindowposition=" & wpos & "\n")

End

Sub pointupgrade()

  Dim item As String
  Dim rerun As Boolean

  While rerun = False

    rerun = True

    If pname1 <> Null Then pname1 = Null
    If pname2 <> Null Then pname2 = Null
    If pname3 <> Null Then pname3 = Null
    If pname4 <> Null Then pname4 = Null
    If pname5 <> Null Then pname5 = Null
    If pname6 <> Null Then pname6 = Null
    If pname7 <> Null Then pname7 = Null
    If pname8 <> Null Then pname8 = Null
    If pname9 <> Null Then pname9 = Null
    If pname10 <> Null Then pname10 = Null
    If pname11 <> Null Then pname11 = Null
    If pname12 <> Null Then pname12 = Null
    If pname13 <> Null Then pname13 = Null
    If pname14 <> Null Then pname14 = Null
    If pname15 <> Null Then pname15 = Null

    If IsDir(fsdir) And Access(fsdir, gb.Write)

      For Each item In Dir(fsdir, "[^.]*", gb.Directory)

        If Stat(fsdir & "/" & item).Type <> gb.Link

          If Left(item, 4) = "S01_"

            pname1 = Right(item, -4)

          Else If Left(item, 4) = "S02_"

            pname2 = Right(item, -4)

          Else If Left(item, 4) = "S03_"

            pname3 = Right(item, -4)

          Else If Left(item, 4) = "S04_"

            pname4 = Right(item, -4)

          Else If Left(item, 4) = "S05_"

            pname5 = Right(item, -4)

          Else If Left(item, 4) = "S06_"

            pname6 = Right(item, -4)

          Else If Left(item, 4) = "S07_"

            pname7 = Right(item, -4)

          Else If Left(item, 4) = "S08_"

            pname8 = Right(item, -4)

          Else If Left(item, 4) = "S09_"

            pname9 = Right(item, -4)

          Else If Left(item, 4) = "S10_"

            pname10 = Right(item, -4)

          Else If Left(item, 4) = "H01_"

            pname11 = Right(item, -4)

          Else If Left(item, 4) = "H02_"

            pname12 = Right(item, -4)

          Else If Left(item, 4) = "H03_"

            pname13 = Right(item, -4)

          Else If Left(item, 4) = "H04_"

            pname14 = Right(item, -4)

          Else If Left(item, 4) = "H05_"

            pname15 = Right(item, -4)

          Endif

        Endif

      Next

    Endif

    If pname15 <> Null And pname14 = Null

      Move fsdir & "/H05_" & pname15 To fsdir & "/H04_" & pname15
      rerun = False

    Endif

    If pname14 <> Null And pname13 = Null

      Move fsdir & "/H04_" & pname14 To fsdir & "/H03_" & pname14
      If rerun = True Then rerun = False

    Endif

    If pname13 <> Null And pname12 = Null

      Move fsdir & "/H03_" & pname13 To fsdir & "/H02_" & pname13
      If rerun = True Then rerun = False

    Endif

    If pname12 <> Null And pname11 = Null

      Move fsdir & "/H02_" & pname12 To fsdir & "/H01_" & pname12
      If rerun = True Then rerun = False

    Endif

    If pname10 <> Null And pname9 = Null

      Move fsdir & "/S10_" & pname10 To fsdir & "/S09_" & pname10
      If rerun = True Then rerun = False

    Endif

    If pname9 <> Null And pname8 = Null

      Move fsdir & "/S09_" & pname9 To fsdir & "/S08_" & pname9
      If rerun = True Then rerun = False

    Endif

    If pname8 <> Null And pname7 = Null

      Move fsdir & "/S08_" & pname8 To fsdir & "/S07_" & pname8
      If rerun = True Then rerun = False

    Endif

    If pname7 <> Null And pname6 = Null

      Move fsdir & "/S07_" & pname7 To fsdir & "/S06_" & pname7
      If rerun = True Then rerun = False

    Endif

    If pname6 <> Null And pname5 = Null

      Move fsdir & "/S06_" & pname6 To fsdir & "/S05_" & pname6
      If rerun = True Then rerun = False

    Endif

    If pname5 <> Null And pname4 = Null

      Move fsdir & "/S05_" & pname5 To fsdir & "/S04_" & pname5
      If rerun = True Then rerun = False

    Endif

    If pname4 <> Null And pname3 = Null

      Move fsdir & "/S04_" & pname4 To fsdir & "/S03_" & pname4
      If rerun = True Then rerun = False

    Endif

    If pname3 <> Null And pname2 = Null

      Move fsdir & "/S03_" & pname3 To fsdir & "/S02_" & pname3
      If rerun = True Then rerun = False

    Endif

    If pname2 <> Null And pname1 = Null

      Move fsdir & "/S02_" & pname2 To fsdir & "/S01_" & pname2
      If rerun = True Then rerun = False

    Endif

  Wend

End

Sub wprocwait()

  While wproc.State = Process.Running

    Wait 0.1

  Wend

End
