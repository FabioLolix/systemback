' Gambas class file

' Copyright(C) 2010-2014, Kriszti√°n Kende <nemh@freemail.hu>
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program. If not, see <http://www.gnu.org/licenses/>.

Private Extern Crypt(password As String, salt As String) As String In "libcrypt:1" Exec "crypt"
Private slock As Stream
Private dlock As Stream
Private wproc As Process
Private cproc As Process
Private sdir As String
Private fsdir As String
Private lwdir As String
Private tmp As String
Private btmp As String = ".dacc5b5f4502_sbbackup"
Private rtmp As String = ".dacc5b5f4502_sbrestore"
Private cssize As String
Private pname As String
Private pname1 As String
Private pname2 As String
Private pname3 As String
Private pname4 As String
Private pname5 As String
Private pname6 As String
Private pname7 As String
Private pname8 As String
Private pname9 As String
Private pname10 As String
Private pname11 As String
Private pname12 As String
Private pname13 As String
Private pname14 As String
Private pname15 As String
Private prun As String
Private cpoint As String
Private dtime As String
Private stimer As String
Private sdys As String
Private shrs As String
Private smts As String
Private ssds As String
Private smode As String
Private wpos As String
Private grub As String = "pc"
Private hash As String
Private puname As String
Private phname As String
Private piname As String
Private chars As String = "0123456789aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ"
Private nwidth As Short
Private nheight As Short
Private winx As Short
Private winy As Short
Private winw As Short
Private winh As Short
Private dnum As Short
Private pnumber As Byte
Private dialog As Byte
Private ppipe As Byte
Private wround As Byte
Private sbstart As Boolean = True
Private wmove As Boolean
Private sstart As Boolean
Private ickernel As Boolean
Private irfsc As Boolean

Public Sub Form_Open()

  Dim ctrl As Control
  Dim ofile As File
  Dim cline, item, usr As String
  Dim fheight As Short

  If Application.Args[3] = "gtk" And Not Component.IsLoaded("gb.gtk") Or If Application.Args[3] = "gtk3" And Not Component.IsLoaded("gb.gtk3") Or If Application.Args[3] = "qt4" And Not Component.IsLoaded("gb.qt4")

    Exec ["/usr/share/systemback/systembackgui", Application.Args[1], Application.Args[2], Application.Args[3]] With ["GB_GUI=gb." & Application.Args[3]]
    systembackgui.Close

  Else

    If IsDir("/run/shm")

      tmp = "/run/shm/dacc5b5f4502_sb"

    Else If IsDir("/dev/shm")

      tmp = "/dev/shm/dacc5b5f4502_sb"

    Else

      tmp = "/tmp/dacc5b5f4502_sb"

    Endif

    If Application.Font.Name Not Like "{Ubuntu,FreeSans}"

      For Each ctrl In systembackgui.Controls

        ctrl.Font.Name = "FreeSans"

      Next

    Endif

    If Desktop.Resolution <> 96

      fheight = Round(187 / Label1.Font.Height)

      For Each ctrl In systembackgui.Controls

        If ctrl.Name = "passwordtitletext" Then ctrl.Font.Size = Round(fheight * 118.18 / 100) Else ctrl.Font.Size = fheight

      Next

    Endif

    Select Case True

      Case Application.Args.Count = 3 And Application.Args[1] = "schedule"

        sstart = True

        For Each item In Dir(Left(tmp, RInStr(tmp, "/") - 1), "dacc5b5f4502_sb*", gb.File)

          Kill Left(tmp, RInStr(tmp, "/")) & item

        Next

      Case Application.Args.Count = 2 And Application.Args[1] Begins "dialog=" And Len(Application.Args[1]) > 7

        dialog = Right(Application.Args[1], -7)

      Case User.Name = "root"

        Try slock = Lock Left(tmp, RInStr(tmp, "/")) & "systembacklock"

        If Error

          dialog = 1

        Else

          Try dlock = Lock "/var/lib/dpkg/lock"

          If Error

            dialog = 2

          Else

            For Each item In Dir(Left(tmp, RInStr(tmp, "/") - 1), "dacc5b5f4502_sb*", gb.File)

              Kill Left(tmp, RInStr(tmp, "/")) & item

            Next

          Endif

        Endif

      Case Else

        dialog = 17

    End Select

    dialogpanel.Move(0, 0)
    buttonspanel.Y = 0

    If dialog <> 0

      dialogopen

    Else If Application.Args.Count = 4 And Application.Args[1] = "authorization" And Application.Args[2] <> "root"

      ofile = Open "/etc/group" For Input
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Like "{sudo,admin}:*"

          For Each usr In Split(Right(cline, - RInStr(cline, ":")), ",")

            If admins.Find(usr) = -1 Then admins.Add(usr)

          Next

        Endif

      Wend
      Close #ofile

      With admins

        If .Count = 0

          .Add("root")
          admins_Click

        Else If .Find(Application.Args[2]) <> -1

          .Index = .Find(Application.Args[2])

        Else

          admins_Click

        Endif

        adminstext.W = .Font.TextWidth(adminstext.Text) + 1
        .X = adminstext.W + 15

        If .Font.TextWidth(.Text) + 32 > .W

          If .Font.TextWidth(.Text) + 32 < 352 - adminstext.W

            .W = .Font.TextWidth(.Text) + 32

          Else If .W < 352 - adminstext.W

            .W = 352 - adminstext.W

          Endif

        Endif

      End With

      With adminpasswordtext

        .W = .Font.TextWidth(.Text) + 1
        adminpassword.X = .W + 15
        adminpassword.W = 336 - adminpassword.X

      End With

      passwordpanel.Move(0, 0)
      systembackgui.Move(Screen.W / 2 - 188, Screen.H / 2 - 112, 376, 224)

    Else

      Inc Application.Busy
      unitimer.Start

      If sstart

        schedulerpanel.Y = 0
        passwordpanel.Hide
        schedulerpanel.Show
        function4.Text &= " " & ("scheduler")

        With Application

          If .Args[2] = "topleft"

            systembackgui.Move(30, 30, 402, 161)

          Else If .Args[2] = "center"

            systembackgui.Move(Screen.W / 2 - 201, Screen.H / 2 - 80, 402, 161)

          Else If .Args[2] = "bottomleft"

            systembackgui.Move(30, Screen.H - 191, 402, 161)

          Else If .Args[2] = "bottomright"

            systembackgui.Move(Screen.W - 432, Screen.H - 191, 402, 161)

          Else

            systembackgui.Move(Screen.W - 432, 30, 402, 161)

          Endif

        End With

        schedulertimer.Start
        systembackgui.Stacking = 1

      Else

        passwordpanel.Hide
        mainpanel.Show
        systembackpanel.X = 1
        systembackgui.Stacking = 0
        systembackgui.Move(Screen.W / 2 - 349, Screen.H / 2 - 232, 698, 465)

        If Application.Args[1] = "notextoutput"

          textoutputwindow.Visible = False

          If Application.Args[2] = "welcometext"

            Exec ["tput", "bold"] Wait
            Print "\n " & ("Welcome to the Systemback text output window!") & "\n"
            Exec ["tput", "sgr0"] Wait

          Endif

        Endif

      Endif

    Endif

  Endif

End

Public Sub Form_Close()

  Dim item As String

  If cproc

    If cproc.State = Process.Running Then cproc.Kill

  Endif

  If Not statuspanel.Visible And unitimer.Enabled

    For Each item In Dir(Left(tmp, RInStr(tmp, "/") - 1), "dacc5b5f4502_sb*", gb.File)

      Kill Left(tmp, RInStr(tmp, "/")) & item

    Next

  Endif

End

Public Sub Form_Activate()

  If mainpanel.Background <> Color.Foreground

    mainpanel.Background = Color.Foreground
    dialogpanel.Background = Color.Foreground
    statuspanel.Background = Color.Foreground
    schedulerpanel.Background = Color.Foreground
    function1.Foreground = Color.Background
    function2.Foreground = Color.Background
    function3.Foreground = Color.Background
    function4.Foreground = Color.Background
    windowbutton1.Foreground = Color.Background
    windowbutton2.Foreground = Color.Background
    windowbutton3.Foreground = Color.Background
    windowbutton4.Foreground = Color.Background
    textoutputwindow.Foreground = Color.Background

  Endif

End

Public Sub Form_Deactivate()

  If systembackgui.W <> 1 And Not Mouse.Inside(systembackgui)

    mainpanel.Background = Color.Darker(Color.Foreground)
    dialogpanel.Background = Color.Darker(Color.Foreground)
    statuspanel.Background = Color.Darker(Color.Foreground)
    schedulerpanel.Background = Color.Darker(Color.Foreground)
    function1.Foreground = Color.Darker(Color.Background)
    function2.Foreground = Color.Darker(Color.Background)
    function3.Foreground = Color.Darker(Color.Background)
    function4.Foreground = Color.Darker(Color.Background)
    windowbutton1.Foreground = Color.Darker(Color.Background)
    windowbutton2.Foreground = Color.Darker(Color.Background)
    windowbutton3.Foreground = Color.Darker(Color.Background)
    windowbutton4.Foreground = Color.Darker(Color.Background)
    textoutputwindow.Foreground = Color.Darker(Color.Background)

  Endif

End

Public Sub Form_KeyPress()

  If passwordpanel.Visible And Key.Code = Key.Esc Then systembackgui.Close

End

Public Sub point1_KeyRelease()

  If point1.Text <> pname1 And Key.Code = Key.F5

    point1.Text = pname1

  Else If pointpipe1.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point2_KeyRelease()

  If point2.Text <> pname2 And Key.Code = Key.F5

    point2.Text = pname2

  Else If pointpipe2.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point3_KeyRelease()

  If point3.Text <> pname3 And Key.Code = Key.F5

    point3.Text = pname3

  Else If pointpipe3.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point4_KeyRelease()

  If point4.Text <> pname4 And Key.Code = Key.F5

    point4.Text = pname4

  Else If pointpipe4.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point5_KeyRelease()

  If point5.Text <> pname5 And Key.Code = Key.F5

    point5.Text = pname5

  Else If pointpipe5.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point6_KeyRelease()

  If point6.Text <> pname6 And Key.Code = Key.F5

    point6.Text = pname6

  Else If pointpipe6.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point7_KeyRelease()

  If point7.Text <> pname7 And Key.Code = Key.F5

    point7.Text = pname7

  Else If pointpipe7.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point8_KeyRelease()

  If point8.Text <> pname8 And Key.Code = Key.F5

    point8.Text = pname8

  Else If pointpipe8.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point9_KeyRelease()

  If point9.Text <> pname9 And Key.Code = Key.F5

    point9.Text = pname9

  Else If pointpipe9.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point10_KeyRelease()

  If point10.Text <> pname10 And Key.Code = Key.F5

    point10.Text = pname10

  Else If pointpipe10.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point11_KeyRelease()

  If point11.Text <> pname11 And Key.Code = Key.F5

    point11.Text = pname11

  Else If pointpipe11.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point12_KeyRelease()

  If point12.Text <> pname12 And Key.Code = Key.F5

    point12.Text = pname12

  Else If pointpipe12.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point13_KeyRelease()

  If point13.Text <> pname13 And Key.Code = Key.F5

    point13.Text = pname13

  Else If pointpipe13.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point14_KeyRelease()

  If point14.Text <> pname14 And Key.Code = Key.F5

    point14.Text = pname14

  Else If pointpipe14.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point15_KeyRelease()

  If point15.Text <> pname15 And Key.Code = Key.F5

    point15.Text = pname15

  Else If pointpipe15.Value And If Key.Code = Key.Enter Or Key.Code = Key.Return

    pointrename_Click

  Endif

End

Public Sub point1_LostFocus()

  If point1.Length = 0 Then point1.Text = pname1

End

Public Sub point2_LostFocus()

  If point2.Length = 0 Then point2.Text = pname2

End

Public Sub point3_LostFocus()

  If point3.Length = 0 Then point3.Text = pname3

End

Public Sub point4_LostFocus()

  If point4.Length = 0 Then point4.Text = pname4

End

Public Sub point5_LostFocus()

  If point5.Length = 0 Then point5.Text = pname5

End

Public Sub point6_LostFocus()

  If point6.Length = 0 Then point6.Text = pname6

End

Public Sub point7_LostFocus()

  If point7.Length = 0 Then point7.Text = pname7

End

Public Sub point8_LostFocus()

  If point8.Length = 0 Then point8.Text = pname8

End

Public Sub point9_LostFocus()

  If point9.Length = 0 Then point9.Text = pname9

End

Public Sub point10_LostFocus()

  If point10.Length = 0 Then point10.Text = pname10

End

Public Sub point11_LostFocus()

  If point11.Length = 0 Then point11.Text = pname11

End

Public Sub point12_LostFocus()

  If point12.Length = 0 Then point12.Text = pname12

End

Public Sub point13_LostFocus()

  If point13.Length = 0 Then point13.Text = pname13

End

Public Sub point14_LostFocus()

  If point14.Length = 0 Then point14.Text = pname14

End

Public Sub point15_LostFocus()

  If point15.Length = 0 Then point15.Text = pname15

End

Public Sub point1_Change()

  With pointpipe1

    If point1.Enabled

      If point1.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point1.Text <> pname1

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point2_Change()

  With pointpipe2

    If point2.Enabled

      If point2.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point2.Text <> pname2

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point3_Change()

  With pointpipe3

    If point3.Enabled

      If point3.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point3.Text <> pname3

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point4_Change()

  With pointpipe4

    If point4.Enabled

      If point4.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point4.Text <> pname4

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point5_Change()

  With pointpipe5

    If point5.Enabled

      If point5.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point5.Text <> pname5

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point6_Change()

  With pointpipe6

    If point6.Enabled

      If point6.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point6.Text <> pname6

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point7_Change()

  With pointpipe7

    If point7.Enabled

      If point7.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point7.Text <> pname7

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point8_Change()

  With pointpipe8

    If point8.Enabled

      If point8.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point8.Text <> pname8

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point9_Change()

  With pointpipe9

    If point9.Enabled

      If point9.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point9.Text <> pname9

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point10_Change()

  With pointpipe10

    If point10.Enabled

      If point10.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point10.Text <> pname10

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point11_Change()

  With pointpipe11

    If point11.Enabled

      If point11.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point11.Text <> pname11

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point12_Change()

  With pointpipe12

    If point12.Enabled

      If point12.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point12.Text <> pname12

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point13_Change()

  With pointpipe13

    If point13.Enabled

      If point13.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point13.Text <> pname13

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point14_Change()

  With pointpipe14

    If point14.Enabled

      If point14.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point14.Text <> pname14

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point15_Change()

  With pointpipe15

    If point15.Enabled

      If point15.Length = 0

        If .Value Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point15.Text <> pname15

          If Not .Value Then .Value = True

          If Not pointrename.Enabled

            pointrename.Enabled = True
            pointrename.Mouse = Mouse.Pointing

          Endif

        Else If .Value

          .Value = False

        Endif

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled

      If .Value Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub pointpipe1_Click()

  Dim rnmenbl As Boolean

  If ppipe <> 0 Then ppipe = 0

  With point1

    If pointpipe1.Value

      ppipe = ppipe + 1
      cpoint = "S01"
      pname = pname1

      If .Text <> pname1 Then rnmenbl = True

    Else If .Enabled And .Text <> pname1 And .Length <> 0

      .Text = pname1

    Endif

  End With

  With point2

    If pointpipe2.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "S02"
        pname = pname2

      Endif

      If .Text <> pname2 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname2 And .Length <> 0

      .Text = pname2

    Endif

  End With

  With point3

    If pointpipe3.Value

      ppipe = ppipe + 1

      If ppipe = 1
        cpoint = "S03"
        pname = pname3

      Endif

      If .Text <> pname3 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname3 And .Length <> 0

      .Text = pname3

    Endif

  End With

  With point4

    If pointpipe4.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "S04"
        pname = pname4

      Endif

      If .Text <> pname4 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname4 And .Length <> 0

      .Text = pname4

    Endif

  End With

  With point5

    If pointpipe5.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "S05"
        pname = pname5

      Endif

      If .Text <> pname5 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname5 And .Length <> 0

      .Text = pname5

    Endif

  End With

  With point6

    If pointpipe6.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "S06"
        pname = pname6

      Endif

      If .Text <> pname6 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname6 And .Length <> 0

      .Text = pname6

    Endif

  End With

  With point7

    If pointpipe7.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "S07"
        pname = pname7

      Endif

      If .Text <> pname7 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname7 And .Length <> 0

      .Text = pname7

    Endif

  End With

  With point8

    If pointpipe8.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "S08"
        pname = pname8

      Endif

      If .Text <> pname8 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname8 And .Length <> 0

      .Text = pname8

    Endif

  End With

  With point9

    If pointpipe9.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "S09"
        pname = pname9

      Endif

      If .Text <> pname9 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname9 And .Length <> 0

      .Text = pname9

    Endif

  End With

  With point10

    If pointpipe10.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "S10"
        pname = pname10

      Endif

      If .Text <> pname10 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname10 And .Length <> 0

      .Text = pname10

    Endif

  End With

  With point11

    If pointpipe11.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "H01"
        pname = pname11

      Endif

      If .Text <> pname11 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname11 And .Length <> 0

      .Text = pname11

    Endif

  End With

  With point12

    If pointpipe12.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "H02"
        pname = pname12

      Endif

      If .Text <> pname12 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname12 And .Length <> 0

      .Text = pname12

    Endif

  End With

  With point13

    If pointpipe13.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "H03"
        pname = pname13

      Endif

      If .Text <> pname13 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname13 And .Length <> 0

      .Text = pname13

    Endif

  End With

  With point14

    If pointpipe14.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "H04"
        pname = pname14

      Endif

      If .Text <> pname14 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname14 And .Length <> 0

      .Text = pname14

    Endif

  End With

  With point15

    If pointpipe15.Value

      ppipe = ppipe + 1

      If ppipe = 1

        cpoint = "H05"
        pname = pname15

      Endif

      If .Text <> pname15 And Not rnmenbl Then rnmenbl = True

    Else If .Enabled And .Text <> pname15 And .Length <> 0

      .Text = pname15

    Endif

  End With

  If ppipe = 0

    With restoremenu

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With storagedirbutton

      If Not .Enabled

        .Enabled = True
        .Mouse = Mouse.Pointing
        storagedir.W = 210
        pointrename.Enabled = False
        pointrename.Mouse = Mouse.Default
        pointdelete.Enabled = False
        pointdelete.Mouse = Mouse.Default

      Endif

    End With

    With pointhighlight

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With repairmenu

      If Not .Enabled

        .Enabled = True
        .Mouse = Mouse.Pointing

      Endif

    End With

    If Exist("/cdrom/casper/filesystem.squashfs") Or Exist("/live/image/live/filesystem.squashfs") Or Exist("/lib/live/mount/medium/live/filesystem.squashfs")

      If Exist("/.excludes")

        With copymenu

          If Not .Enabled

            .Enabled = True
            .Mouse = Mouse.Pointing
            installmenu.Enabled = True
            installmenu.Mouse = Mouse.Pointing

          Endif

        End With

        pname = ("Live image")

      Else

        pname = Null

      Endif

    Else

      With newrestorepoint

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

      With livecreatemenu

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

      pname = ("Currently running system")

    Endif

  Else

    If Not rnmenbl And pointrename.Enabled

      pointrename.Enabled = False
      pointrename.Mouse = Mouse.Default

    Endif

    If ppipe = 1

      With newrestorepoint

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

      With storagedirbutton

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default
          storagedir.W = 236
          pointdelete.Enabled = True
          pointdelete.Mouse = Mouse.Pointing

        Endif

      End With

      If pointpipe11.Value Or pointpipe12.Value Or pointpipe13.Value Or pointpipe14.Value Or pointpipe15.Value

        With pointhighlight

          If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

      Else

        With pointhighlight

          If Not point15.Enabled And Not .Enabled

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        End With

      Endif

      With restoremenu

        If Not .Enabled And Not Exist("/cdrom/casper/filesystem.squashfs") And Not Exist("/live/image/live/filesystem.squashfs") And Not Exist("/lib/live/mount/medium/live/filesystem.squashfs")

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

      With copymenu

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing
          installmenu.Enabled = True
          installmenu.Mouse = Mouse.Pointing

        Endif

      End With

      With livecreatemenu

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

      With repairmenu

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

    Else

      With restoremenu

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

      copymenu.Enabled = False
      copymenu.Mouse = Mouse.Default
      installmenu.Enabled = False
      installmenu.Mouse = Mouse.Default
      repairmenu.Enabled = False
      repairmenu.Mouse = Mouse.Default

      With pointhighlight

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

  Endif

End

Public Sub pointpipe2_Click()

  pointpipe1_Click

End

Public Sub pointpipe3_Click()

  pointpipe1_Click

End

Public Sub pointpipe4_Click()

  pointpipe1_Click

End

Public Sub pointpipe5_Click()

  pointpipe1_Click

End

Public Sub pointpipe6_Click()

  pointpipe1_Click

End

Public Sub pointpipe7_Click()

  pointpipe1_Click

End

Public Sub pointpipe8_Click()

  pointpipe1_Click

End

Public Sub pointpipe9_Click()

  pointpipe1_Click

End

Public Sub pointpipe10_Click()

  pointpipe1_Click

End

Public Sub pointpipe11_Click()

  pointpipe1_Click

End

Public Sub pointpipe12_Click()

  pointpipe1_Click

End

Public Sub pointpipe13_Click()

  pointpipe1_Click

End

Public Sub pointpipe14_Click()

  pointpipe1_Click

End

Public Sub pointpipe15_Click()

  pointpipe1_Click

End

Public Sub restoremenu_Click()

  Dim ofile As File
  Dim cline, usr As String

  With grubreinstallrestore

    If Exist(fsdir & "/" & cpoint & "_" & pname & "/usr/sbin/update-grub2") And Exist(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dpkg/info/grub-" & grub & ".list")

      If Not .Visible

        .Show
        grubreinstallrestoredisable.Hide

      Endif

    Else If .Visible

      .Hide
      grubreinstallrestoredisable.Show

    Endif

  End With

  With includeusers

    If .Count <> 0 Then .Clear
    .Add(("Everyone"))
    .Add("root")

    ofile = Open "/etc/passwd" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If cline Like "*:/home/*"

        usr = Left(cline, InStr(cline, ":") - 1)
        If IsDir("/home/" & usr) Then .Add(usr)

      Endif

    Wend
    Close #ofile

  End With

  If Not restorenext.Enabled Then restorenext.Enabled = True
  systembackpanel.Hide
  restorepanel.Show
  function1.Text = ("System restore")
  restoreback.SetFocus

End

Public Sub copymenu_Click()

  Dim mnts As String

  With grubinstallcopy

    If ppipe = 1

      If Exist(fsdir & "/" & cpoint & "_" & pname & "/usr/sbin/update-grub2") And Exist(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dpkg/info/grub-" & grub & ".list")

        If Not .Visible

          .Show
          grubinstallcopydisable.Hide

        Endif

      Else If .Visible

        .Hide
        grubinstallcopydisable.Show

      Endif

    Else If Exist("/usr/sbin/update-grub2") And Exist("/var/lib/dpkg/info/grub-" & grub & ".list")

      If Not .Visible

        .Show
        grubinstallcopydisable.Hide

      Endif

    Else If .Visible

      .Hide
      grubinstallcopydisable.Show

    Endif

  End With

  With userdatafilescopy

    If Not .Visible

      .Show
      .Hide

    Endif

  End With

  If partitionsettings.Key <> Null

    mnts = File.Load("/proc/self/mounts")

    If mnts Like "* /.sb{systemcopy,livesystemwrite}*"

      partitionupdate_Click

    Else If partitionsettings[partitionsettings.Key][1] = "/home" And Not mountpoint.Enabled

      mountpoint.Enabled = True

    Endif

  Endif

  systembackpanel.Hide
  copypanel.Show
  function1.Text = ("System copy")
  copyback.SetFocus
  Form_Resize

End

Public Sub installmenu_Click()

  systembackpanel.Hide
  installpanel.Show
  function1.Text = ("System install")
  fullname.SetFocus

End

Public Sub livecreatemenu_Click()

  Dim item As String

  If livelist.Count <> 0 Then livelist.Clear

  With livedelete

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  With liveconvert

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  With livewritestart

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If IsDir(lwdir)

    For Each item In Dir(lwdir, "*.sblive", gb.File)

      With Stat(lwdir & "/" & item)

        If Len(item) > 7 And item Not Like "* *" And .Size > 0 And .Type <> gb.Link

          If Exist(lwdir & "/" & Left(item, -7) & ".iso")

            With Stat(lwdir & "/" & Left(item, -7) & ".iso")

              If .Size > 0 And .Type <> gb.Link

                livelist.Add(Left(item, -7) & " (" & Round(.Size / 1024 / 1024 / 1024, -2) & " GiB, sblive+iso)")

              Else

                livelist.Add(Left(item, -7) & " (" & Round(.Size / 1024 / 1024 / 1024, -2) & " GiB, sblive)")

              Endif

            End With

          Else

            livelist.Add(Left(item, -7) & " (" & Round(.Size / 1024 / 1024 / 1024, -2) & " GiB, sblive)")

          Endif

        Endif

      End With

    Next

  Endif

  If systembackpanel.Visible

    systembackpanel.Hide
    livecreatepanel.Show
    function1.Text = ("Live system create")
    livecreateback.SetFocus

  Endif

End

Public Sub repairmenu_Click()

  With systemrepair

    If pname = ("Currently running system") Or pname = Null

      If .Enabled

        If Not grubrepair.Value Then grubrepair.Value = True
        .Enabled = False
        .Mouse = Mouse.Default
        fullrepair.Enabled = False
        fullrepair.Mouse = Mouse.Default

      Endif

    Else If Not .Enabled

      If Not .Value Then .Value = True
      .Enabled = True
      .Mouse = Mouse.Pointing
      fullrepair.Enabled = True
      fullrepair.Mouse = Mouse.Pointing

    Endif

  End With

  repairmountpoint_Change

  systembackpanel.Hide
  repairpanel.Show
  function1.Text = ("System repair")
  repairback.SetFocus

End

Public Sub systemupgrade_Click()

  statusstart

  prun = ("Upgrading the system")

  Unlock dlock

  wproc = Exec ["xterm", "+sb", "-bg", "grey85", "-fg", "grey25", "-fa", "a", "-fs", "9", "-geometry", "80x24+80+70", "-n", "System upgrade", "-T", "System upgrade", "-cr", "grey40", "-selbg", "grey86", "-bw", "0", "-bc", "-bcf", "500", "-bcn", "500", "-e", "systemback 2Y4d1b5T6b8A"]
  wprocwait

  If Not systembackgui.Closed

    If Trim(File.Load("/usr/share/systemback/version")) = Left(systembackversion.Text, RInStr(systembackversion.Text, "_") - 1)

      dlock = Lock "/var/lib/dpkg/lock"

      statuspanel.Hide
      mainpanel.Show
      functionmenunext.SetFocus
      nwidth = 698
      nheight = 465
      windowmove

    Else

      Unlock slock

      If textoutputwindow.Visible

        If Component.IsLoaded("gb.gtk")

          Exec ["/usr/share/systemback/systembackgui"] With ["GB_GUI=gb.gtk"]

        Else If Component.IsLoaded("gb.gtk3")

          Exec ["/usr/share/systemback/systembackgui"] With ["GB_GUI=gb.gtk3"]

        Else

          Exec ["/usr/share/systemback/systembackgui"] With ["GB_GUI=gb.qt4"]

        Endif

      Else If Component.IsLoaded("gb.gtk")

        Exec ["/usr/share/systemback/systembackgui", "notextoutput"] With ["GB_GUI=gb.gtk"]

      Else If Component.IsLoaded("gb.gtk3")

        Exec ["/usr/share/systemback/systembackgui", "notextoutput"] With ["GB_GUI=gb.gtk3"]

      Else

        Exec ["/usr/share/systemback/systembackgui", "notextoutput"] With ["GB_GUI=gb.qt4"]

      Endif

      systembackgui.Close

    Endif

  Endif

End

Public Sub excludemenu_Click()

  systembackpanel.Hide
  excludepanel.Show
  function1.Text = ("Exclude")
  excludeback.SetFocus
  Form_Resize

End

Public Sub schedulemenu_Click()

  systembackpanel.Hide
  schedulepanel.Show
  function1.Text = ("Schedule")
  timerback.SetFocus

End

Public Sub aboutmenu_Click()

  systembackpanel.Hide
  aboutpanel.Show
  function1.Text = ("About")
  aboutback.SetFocus

End

Public Sub licensemenu_Click()

  With license

    If .Text = Null

      Inc Application.Busy
      .Text = File.Load("/usr/share/common-licenses/GPL-3")
      .Line = 0
      Dec Application.Busy

    Endif

  End With

  aboutpanel.Hide
  licensepanel.Show
  function1.Text = ("License")
  licenseback.SetFocus

End

Public Sub restoreback_Click()

  If restorepanel.Visible Then restorepanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenunext.SetFocus

End

Public Sub copyback_Click()

  copypanel.Hide

  If function1.Text = ("System copy")

    systembackpanel.Show
    function1.Text = "Systemback"
    functionmenunext.SetFocus

  Else

    installpanel.Show
    fullname.SetFocus

  Endif

  nwidth = 698
  nheight = 465
  windowmove

End

Public Sub installback_Click()

  installpanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenunext.SetFocus

End

Public Sub livecreateback_Click()

  livecreatepanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenunext.SetFocus

End

Public Sub repairback_Click()

  repairpanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenunext.SetFocus

End

Public Sub excludeback_Click()

  excludepanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenunext.SetFocus

  nwidth = 698
  nheight = 465
  windowmove

End

Public Sub timerback_Click()

  schedulepanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenuback.SetFocus

End

Public Sub aboutback_Click()

  aboutpanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenuback.SetFocus

End

Public Sub licenseback_Click()

  licensepanel.Hide
  aboutpanel.Show
  function1.Text = ("About")
  aboutback.SetFocus

End

Private Sub dialogopen()

  If systembackgui.Closed

    If Component.IsLoaded("gb.gtk")

      Exec ["/usr/share/systemback/systembackgui", "dialog=" & dialog] With ["GB_GUI=gb.gtk"]

    Else If Component.IsLoaded("gb.gtk3")

      Exec ["/usr/share/systemback/systembackgui", "dialog=" & dialog] With ["GB_GUI=gb.gtk3"]

    Else

      Exec ["/usr/share/systemback/systembackgui", "dialog=" & dialog] With ["GB_GUI=gb.qt4"]

    Endif

  Else

    If dialogcancel.Visible Then dialogcancel.Hide
    If dialogquestion.Visible Then dialogquestion.Hide
    If dialoginfo.Visible Then dialoginfo.Hide
    If dialogerror.Visible Then dialogerror.Hide
    If dialognumber.Visible Then dialognumber.Hide

    Select Case dialog

      Case 1

        dialogerror.Show
        dialogtext.Text = ("Another Systemback process is currently running, please wait until it finishes.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 2

        dialogerror.Show
        dialogtext.Text = ("Unable to get exclusive lock!<p>First, close all package manager.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 3

        dialogerror.Show
        dialogtext.Text = ("The specified name contains unsupported character(s)!<p>Please enter a new name!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 4

        dialogquestion.Show
        dialogtext.Text = ("Restore the system files to the following restore point:") & "<p><b>" & pname & "</b>"
        If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
        dialogcancel.Show

      Case 5

        dialogquestion.Show
        dialogtext.Text = ("Repair the system files with the following restore point:") & "<p><b>" & pname & "</b>"
        If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
        dialogcancel.Show

      Case 6

        dialogquestion.Show
        dialogtext.Text = ("Repair the complete system with the following restore point:") & "<p><b>" & pname & "</b>"
        If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
        dialogcancel.Show

      Case 7

        dialogquestion.Show
        dialogtext.Text = ("Restore the complete user(s) configuration files to the following restore point:") & "<p><b>" & pname & "</b>"
        If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
        dialogcancel.Show

      Case 8

        dialogquestion.Show
        dialogtext.Text = ("Restore the user(s) configuration files to the following restore point:") & "<p><b>" & pname & "</b>"
        If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
        dialogcancel.Show

      Case 9

        dialoginfo.Show
        dialogtext.Text = ("User(s) configuration files full restoration are completed.<p>The X server will restart automatically within 30 seconds.")
        If dialogok.Text <> ("X restart") Then dialogok.Text = ("X restart")
        dialogcancel.Show
        dialognumber.Show
        dialogtimer.Start

      Case 10

        dialoginfo.Show
        dialogtext.Text = ("User(s) configuration files restoration are completed.<p>The X server will restart automatically within 30 seconds.")
        If dialogok.Text <> ("X restart") Then dialogok.Text = ("X restart")
        dialogcancel.Show
        dialognumber.Show
        dialogtimer.Start

      Case 11

        dialogerror.Show
        dialogtext.Text = ("System files repair are completed, but an error occurred while reinstalling GRUB! System may not bootable! (In general, the different architecture is causing the problem.)")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 12

        dialoginfo.Show
        dialogtext.Text = ("Full system repair is completed.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 13

        dialoginfo.Show
        dialogtext.Text = ("System repair is completed.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 14

        dialogquestion.Show
        dialogtext.Text = ("Copy the system, using the following restore point:") & "<p><b>" & pname & "</b>"
        If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
        dialogcancel.Show

      Case 15

        dialogquestion.Show
        dialogtext.Text = ("Install the system, using the following restore point:") & "<p><b>" & pname & "</b>"
        If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
        dialogcancel.Show

      Case 16

        dialogerror.Show
        dialogtext.Text = ("Restore point creation is aborted! Not enough free disk space to complete the process.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 17

        dialogerror.Show
        dialogtext.Text = ("Root privileges are required for running Systemback!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 18

        dialogquestion.Show
        dialogtext.Text = ("Restore complete system to the following restore point:") & "<p><b>" & pname & "</b>"
        If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
        dialogcancel.Show

      Case 19

        dialoginfo.Show
        dialogtext.Text = ("System files restoration are completed.<p>The computer will restart automatically within 30 seconds.")
        If dialogok.Text <> ("Reboot") Then dialogok.Text = ("Reboot")
        dialogcancel.Show
        dialognumber.Show
        dialogtimer.Start

      Case 20

        dialoginfo.Show
        dialogtext.Text = ("Full system restoration is completed.<p>The computer will restart automatically within 30 seconds.")
        If dialogok.Text <> ("Reboot") Then dialogok.Text = ("Reboot")
        dialogcancel.Show
        dialognumber.Show
        dialogtimer.Start

      Case 21

        dialogerror.Show
        dialogtext.Text = ("The specified partition(s) does not have enough free space to copy the system! The copied system will not function properly!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 22

        dialogerror.Show
        dialogtext.Text = ("System copy is completed, but an error occurred while installing GRUB! Need to manually install a bootloader.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 23

        dialogerror.Show
        dialogtext.Text = ("An error occurred while reinstalling GRUB!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 24

        dialogerror.Show
        dialogtext.Text = ("Full system repair is completed, but an error occurred while reinstalling GRUB! System may not bootable! (In general, the different architecture is causing the problem.)")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 25

        dialoginfo.Show
        dialogtext.Text = ("System copy is completed.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 26

        dialogerror.Show
        dialogtext.Text = ("An error occurred while creating filesystem image!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 27

        dialogerror.Show
        dialogtext.Text = ("An error occurred while creating container file!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 28

        dialoginfo.Show
        dialogtext.Text = ("Live system creation is completed.<p>The created .sblive file can be written to pendrive.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 29

        dialogerror.Show
        dialogtext.Text = ("The selected directory does not have enough free space to create Live system!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 30

        dialogquestion.Show
        dialogtext.Text = ("Format the") & " <b>" & livedevices.Key & "</b>" & (", and write the following Live system image:") & "<p><b>" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & "</b>"
        If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
        dialogcancel.Show

      Case 31

        dialogerror.Show
        dialogtext.Text = ("The specified partition could not be mounted!")

        If Exist(tmp & "mounterror")

          dialogtext.Text &= "<p><b>" & File.Load(tmp & "mounterror") & "</b>"
          Kill tmp & "mounterror"

        Endif

        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 32

        dialoginfo.Show
        dialogtext.Text = ("GRUB 2 repair is completed.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 33

        dialoginfo.Show
        dialogtext.Text = ("System install is completed.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 34

        dialogerror.Show
        dialogtext.Text = ("System install is completed, but an error occurred while installing GRUB! Need to manually install a bootloader.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 35

        dialogerror.Show
        dialogtext.Text = ("The specified partition(s) does not have enough free space to install the system! The installed system will not function properly!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 36

        dialogerror.Show
        dialogtext.Text = ("The specified partition could not be formatted (in use or unavailable)!")

        If Exist(tmp & "formaterror")

          dialogtext.Text &= "<p><b>" & File.Load(tmp & "formaterror") & "</b>"
          Kill tmp & "formaterror"

        Endif

        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 37

        dialogerror.Show
        dialogtext.Text = ("An error occurred while reinstalling GRUB! System may not bootable! (In general, the different architecture is causing the problem.)")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 38

        dialogerror.Show
        dialogtext.Text = ("Restore point creation is aborted! There has been critical changes in the file system during this operation.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 39

        dialogerror.Show
        dialogtext.Text = ("System copying is aborted! There has been critical changes in the file system during this operation.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 40

        dialogerror.Show
        dialogtext.Text = ("System installation is aborted! There has been critical changes in the file system during this operation.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 41

        dialogquestion.Show
        dialogtext.Text = ("Repair the GRUB 2 bootloader.")
        If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
        dialogcancel.Show

      Case 42

        dialogerror.Show
        dialogtext.Text = ("The selected partition does not have enough space to write the Live system!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 43

        dialogerror.Show
        dialogtext.Text = ("An error occurred while unpacking Live system files!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 44

        dialoginfo.Show
        dialogtext.Text = ("Live system image write is completed.")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 45

        dialogerror.Show
        dialogtext.Text = ("An error occurred while renaming essential Live files!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 46

        dialogerror.Show
        dialogtext.Text = ("An error occurred while creating .iso image!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

      Case 47

        dialogerror.Show
        dialogtext.Text = ("An error occurred while reading .sblive image!")
        If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    End Select

    If systembackgui.Stacking = 0 Then systembackgui.Stacking = 1
    If mainpanel.Visible Then mainpanel.Hide
    If statuspanel.Visible Then statuspanel.Hide
    If schedulerpanel.Visible Then schedulerpanel.Hide
    If Not dialogpanel.Visible Then dialogpanel.Show
    dialogok.SetFocus

    If systembackgui.W <> dialogpanel.W

      If unitimer.Enabled And Not sstart

        nwidth = dialogpanel.W
        nheight = dialogpanel.H
        windowmove

      Else

        systembackgui.Move(Screen.W / 2 - 253, Screen.H / 2 - 100, dialogpanel.W, dialogpanel.H)

      Endif

    Endif

  Endif

End

Public Sub dialogtimer_Timer()

  dialognumber.Text = Val(Left(dialognumber.Text, -1)) - 1
  dialognumber.Text &= "s"
  If dialognumber.Text = "0s" And If dialogok.Text = ("Reboot") Or dialogok.Text = ("X restart") Then dialogok_Click

End

Private Sub statusstart()

  If systembackgui.Stacking = 1 Then systembackgui.Stacking = 0
  If mainpanel.Visible Then mainpanel.Hide
  If dialogpanel.Visible Then dialogpanel.Hide

  statuspanel.Show
  nwidth = statuspanel.W
  nheight = statuspanel.H
  If Not sstart Then windowmove Else schedulerpanel.Hide
  focusworkaround.SetFocus

End

Private Sub pointupgrade()

  Dim item As String
  Dim rerun As Boolean

  While Not rerun

    rerun = True

    If pname1 <> Null Then pname1 = Null
    If pname2 <> Null Then pname2 = Null
    If pname3 <> Null Then pname3 = Null
    If pname4 <> Null Then pname4 = Null
    If pname5 <> Null Then pname5 = Null
    If pname6 <> Null Then pname6 = Null
    If pname7 <> Null Then pname7 = Null
    If pname8 <> Null Then pname8 = Null
    If pname9 <> Null Then pname9 = Null
    If pname10 <> Null Then pname10 = Null
    If pname11 <> Null Then pname11 = Null
    If pname12 <> Null Then pname12 = Null
    If pname13 <> Null Then pname13 = Null
    If pname14 <> Null Then pname14 = Null
    If pname15 <> Null Then pname15 = Null

    If IsDir(fsdir) And Access(fsdir, gb.Write)

      For Each item In Dir(fsdir, "[^.]*", gb.Directory)

        If Stat(fsdir & "/" & item).Type <> gb.Link And item Not Like "* *"

          Select Case Left(item, 4)

            Case "S01_"

              pname1 = Right(item, -4)

            Case "S02_"

              pname2 = Right(item, -4)

            Case "S03_"

              pname3 = Right(item, -4)

            Case "S04_"

              pname4 = Right(item, -4)

            Case "S05_"

              pname5 = Right(item, -4)

            Case "S06_"

              pname6 = Right(item, -4)

            Case "S07_"

              pname7 = Right(item, -4)

            Case "S08_"

              pname8 = Right(item, -4)

            Case "S09_"

              pname9 = Right(item, -4)

            Case "S10_"

              pname10 = Right(item, -4)

            Case "H01_"

              pname11 = Right(item, -4)

            Case "H02_"

              pname12 = Right(item, -4)

            Case "H03_"

              pname13 = Right(item, -4)

            Case "H04_"

              pname14 = Right(item, -4)

            Case "H05_"

              pname15 = Right(item, -4)

          End Select

        Endif

      Next

    Endif

    With point1

      If pname1 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname1

        Else If .Text <> pname1

          .Text = pname1

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With

    With point2

      If pname2 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname2

        Else If .Text <> pname2

          .Text = pname2

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With

    With point3

      If pname3 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber = 3 And .Background = Color.Default Then .Background = 16738151
          .Text = pname3

        Else If .Text <> pname3

          .Text = pname3

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With

    With point4

      If pname4 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 5 And .Background = Color.Default Then .Background = 16738151
          .Text = pname4

        Else If .Text <> pname4

          .Text = pname4

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber = 3

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With

    With point5

      If pname5 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 6 And .Background = Color.Default Then .Background = 16738151
          .Text = pname5

        Else If .Text <> pname5

          .Text = pname5

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 5

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With

    With point6

      If pname6 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 7 And .Background = Color.Default Then .Background = 16738151
          .Text = pname6

        Else If .Text <> pname6

          .Text = pname6

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 6

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With

    With point7

      If pname7 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 8 And .Background = Color.Default Then .Background = 16738151
          .Text = pname7

        Else If .Text <> pname7

          .Text = pname7

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 7

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With

    With point8

      If pname8 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 9 And .Background = Color.Default Then .Background = 16738151
          .Text = pname8

        Else If .Text <> pname8

          .Text = pname8

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 8

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With

    With point9

      If pname9 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 10 And .Background = Color.Default Then .Background = 16738151
          .Text = pname9

        Else If .Text <> pname9

          .Text = pname9

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 9

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With

    With point10

      If pname10 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          If .Background = Color.Default Then .Background = 16738151
          .Text = pname10

        Else If .Text <> pname10

          .Text = pname10

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 10

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With

    With point11

      If pname11 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname11

        Else If .Text <> pname11

          .Text = pname11

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With

    With point12

      If pname12 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname12

        Else If .Text <> pname12

          .Text = pname12

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With

    With point13

      If pname13 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname13

        Else If .Text <> pname13

          .Text = pname13

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With

    With point14

      If pname14 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname14

        Else If .Text <> pname14

          .Text = pname14

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With

    With point15

      If pname15 <> Null

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname15

        Else If .Text <> pname15

          .Text = pname15

        Endif

      Else If .Enabled

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With

    If pname15 <> Null And pname14 = Null

      Move fsdir & "/H05_" & pname15 To fsdir & "/H04_" & pname15
      rerun = False

    Endif

    If pname14 <> Null And pname13 = Null

      Move fsdir & "/H04_" & pname14 To fsdir & "/H03_" & pname14
      If rerun Then rerun = False

    Endif

    If pname13 <> Null And pname12 = Null

      Move fsdir & "/H03_" & pname13 To fsdir & "/H02_" & pname13
      If rerun Then rerun = False

    Endif

    If pname12 <> Null And pname11 = Null

      Move fsdir & "/H02_" & pname12 To fsdir & "/H01_" & pname12
      If rerun Then rerun = False

    Endif

    If pname10 <> Null And pname9 = Null

      Move fsdir & "/S10_" & pname10 To fsdir & "/S09_" & pname10
      If rerun Then rerun = False

    Endif

    If pname9 <> Null And pname8 = Null

      Move fsdir & "/S09_" & pname9 To fsdir & "/S08_" & pname9
      If rerun Then rerun = False

    Endif

    If pname8 <> Null And pname7 = Null

      Move fsdir & "/S08_" & pname8 To fsdir & "/S07_" & pname8
      If rerun Then rerun = False

    Endif

    If pname7 <> Null And pname6 = Null

      Move fsdir & "/S07_" & pname7 To fsdir & "/S06_" & pname7
      If rerun Then rerun = False

    Endif

    If pname6 <> Null And pname5 = Null

      Move fsdir & "/S06_" & pname6 To fsdir & "/S05_" & pname6
      If rerun Then rerun = False

    Endif

    If pname5 <> Null And pname4 = Null

      Move fsdir & "/S05_" & pname5 To fsdir & "/S04_" & pname5
      If rerun Then rerun = False

    Endif

    If pname4 <> Null And pname3 = Null

      Move fsdir & "/S04_" & pname4 To fsdir & "/S03_" & pname4
      If rerun Then rerun = False

    Endif

    If pname3 <> Null And pname2 = Null

      Move fsdir & "/S03_" & pname3 To fsdir & "/S02_" & pname3
      If rerun Then rerun = False

    Endif

    If pname2 <> Null And pname1 = Null

      Move fsdir & "/S02_" & pname2 To fsdir & "/S01_" & pname2
      If rerun Then rerun = False

    Endif

  Wend

End

Public Sub Form_Resize()

  If systembackgui.W > 1 And systembackgui.H > 1

    mainpanel.Resize(systembackgui.W, systembackgui.H)
    function1.W = systembackgui.W
    windowbutton1.X = systembackgui.W - 24
    borderpicture1.W = systembackgui.W

    If choosepanel.Visible

      With choosepanel

        .Resize(systembackgui.W - 2, systembackgui.H - 25)
        dirpath.W = .W - 42
        dirrefresh.X = .W - 32
        dirchoose.Resize(.W, .H - 80)
        dirchooseok.Move(.W - 120, .H - 40)
        choosecancel.Move(.W - 240, .H - 40)
        warning.Y = .H - 41
        chooseresize.Move(.W - chooseresize.W, .H - chooseresize.H)

      End With

    Else If copypanel.Visible

      With copypanel

        .Resize(systembackgui.W - 2, systembackgui.H - 25)
        partitionsettingstext.W = .W
        partitionsettings.Resize(.W - 154, .H - 200)
        umount.X = .W - 128
        mountpointtext.X = .W - 144
        mountpoint.X = umount.X
        filesystemtext.X = mountpointtext.X
        filesystem.X = umount.X
        format.X = partitionsettings.X + partitionsettings.W + (144 - format.W) / 2
        partitionupdate.X = umount.X
        changepartition.X = .W - 64
        partitionoptionstext.Y = .H - 160
        partitionoptionstext.W = .W
        userdatafilescopy.Y = .H - 128
        usersettingscopy.Y = userdatafilescopy.Y
        grubinstalltext.Y = .H - 96
        grubinstallcopy.Y = grubinstalltext.Y
        grubinstallcopydisable.Y = grubinstalltext.Y
        copyback.Y = .H - 48
        copynext.Move(.W - 152, copyback.Y)
        copyresize.Move(.W - copyresize.W, .H - copyresize.H)

      End With

    Else

      With excludepanel

        .Resize(systembackgui.W - 2, systembackgui.H - 25)
        itemstext.W = .W / 2 - 26
        excludedtext.X = .W / 2 + 26
        excludedtext.W = itemstext.W
        itemslist.Resize(.W / 2 - 46, .H - 160)
        excludedlist.X = .W / 2 + 36
        excludedlist.Resize(itemslist.W, itemslist.H)
        additem.Move(.W / 2 - 24, 96 + itemslist.H / 2 - 60)
        removeitem.Move(additem.X, 96 + itemslist.H / 2 + 12)
        excludeback.Y = .H - 48
        kendektext.Move(.W - 472, .H - 24)
        excluderesize.Move(.W - excluderesize.W, .H - excluderesize.H)

      End With

    Endif

  Endif

End

Public Sub dialogok_Click()

  Select Case True

    Case dialogok.Text = "OK"

      Select Case True

        Case dialog = 23

          If fullrestore.Value Then dialog = 20 Else dialog = 19
          dialogopen

        Case Not unitimer.Enabled Or sstart

          systembackgui.Close

        Case dialog = 3 Or dialog = 21 Or dialog = 26 Or dialog = 27 Or dialog = 28 Or dialog = 29 Or dialog = 31 Or dialog = 35 Or dialog = 36 Or dialog = 39 Or dialog = 40 Or dialog = 42 Or dialog = 43 Or dialog = 44 Or dialog = 45 Or dialog = 46 Or dialog = 47

          If systembackgui.Stacking = 1 Then systembackgui.Stacking = 0
          dialogpanel.Hide
          mainpanel.Show
          nwidth = 698
          nheight = 465
          windowmove

          If systembackpanel.Visible

            If functionmenunext.Enabled Then functionmenunext.SetFocus Else functionmenuback.SetFocus

          Else If copypanel.Visible

            copyback.SetFocus

          Else If livecreatepanel.Visible

            livecreateback.SetFocus

          Endif

        Case dialog = 33

          If Exist("/cdrom/casper/filesystem.squashfs") Or Exist("/live/image/live/filesystem.squashfs") Or Exist("/lib/live/mount/medium/live/filesystem.squashfs") Then systembackgui.Close Else dialogcancel_Click

        Case Else

          dialogcancel_Click

      End Select

    Case dialogok.Text = ("Start")

      Select Case dialog

        Case 4, 7, 8, 18

          restore

        Case 5, 6, 41

          repair

        Case 14, 15

          systemcopy

        Case 30

          livewrite

      End Select

    Case dialogok.Text = ("Reboot")

      If Exist("/sbin/reboot") Then Exec ["reboot"] Else Exec ["systemctl", "reboot"]
      systembackgui.Close

    Case dialogok.Text = ("X restart")

      Exec ["pkill", "-x", "Xorg"]
      systembackgui.Close

  End Select

End

Public Sub dialogcancel_Click()

  If unitimer.Enabled

    If dialog <> 30

      If dialogtimer.Enabled

        dialogtimer.Enabled = False
        If dialognumber.Text <> "30s" Then dialognumber.Text = "30s"

      Endif

      If Not systembackpanel.Visible

        systembackpanel.Show
        function1.Text = "Systemback"
        functionmenunext.SetFocus

        Select Case True

          Case restorepanel.Visible

            restorepanel.Hide

          Case copypanel.Visible

            copypanel.Hide

          Case livecreatepanel.Visible

            livecreatepanel.Hide

          Case repairpanel.Visible

            repairpanel.Hide

        End Select

      Endif

      Select Case True

        Case pointpipe1.Value

          pointpipe1.Value = False

        Case pointpipe2.Value

          pointpipe2.Value = False

        Case pointpipe3.Value

          pointpipe3.Value = False

        Case pointpipe4.Value

          pointpipe4.Value = False

        Case pointpipe5.Value

          pointpipe5.Value = False

        Case pointpipe6.Value

          pointpipe6.Value = False

        Case pointpipe7.Value

          pointpipe7.Value = False

        Case pointpipe8.Value

          pointpipe8.Value = False

        Case pointpipe9.Value

          pointpipe9.Value = False

        Case pointpipe10.Value

          pointpipe10.Value = False

        Case pointpipe11.Value

          pointpipe11.Value = False

        Case pointpipe12.Value

          pointpipe12.Value = False

        Case pointpipe13.Value

          pointpipe13.Value = False

        Case pointpipe14.Value

          pointpipe14.Value = False

        Case pointpipe15.Value

          pointpipe15.Value = False

      End Select

    Endif

    If systembackgui.Stacking = 1 Then systembackgui.Stacking = 0
    dialogpanel.Hide
    mainpanel.Show
    nwidth = 698
    nheight = 465
    windowmove

  Else

    systembackgui.Close

  Endif

End

Public Sub newrestorepoint_Click()

  Dim item As String

  statusstart

  For Each item In Dir(fsdir, ".*", gb.Directory)

    If Left(item, 9) = ".DELETED_" Or Left(item, 5) = ".S00_"

      If prun <> ("Deleting incomplete restore point") Then prun = ("Deleting incomplete restore point")
      wproc = Exec ["rm", "-rf", fsdir & "/" & item]
      wprocwait
      If prun = Null Then Return

    Endif

  Next

  If point10.Background = 16738151 Then ppipe = ppipe + 1
  If point9.Background = 16738151 Then ppipe = ppipe + 1
  If point8.Background = 16738151 Then ppipe = ppipe + 1
  If point7.Background = 16738151 Then ppipe = ppipe + 1
  If point6.Background = 16738151 Then ppipe = ppipe + 1
  If point5.Background = 16738151 Then ppipe = ppipe + 1
  If point4.Background = 16738151 Then ppipe = ppipe + 1
  If point3.Background = 16738151 Then ppipe = ppipe + 1

  If ppipe <> 0

    If dnum <> 0 Then dnum = 0

    If point10.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S10_" & pname10 To fsdir & "/.DELETED_" & pname10

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname10]
      wprocwait
      If prun = Null Then Return

    Endif

    If point9.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S09_" & pname9 To fsdir & "/.DELETED_" & pname9

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname9]
      wprocwait
      If prun = Null Then Return

    Endif

    If point8.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S08_" & pname8 To fsdir & "/.DELETED_" & pname8

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname8]
      wprocwait
      If prun = Null Then Return

    Endif

    If point7.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S07_" & pname7 To fsdir & "/.DELETED_" & pname7

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname7]
      wprocwait
      If prun = Null Then Return

    Endif

    If point6.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S06_" & pname6 To fsdir & "/.DELETED_" & pname6

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname6]
      wprocwait
      If prun = Null Then Return

    Endif

    If point5.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S05_" & pname5 To fsdir & "/.DELETED_" & pname5

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname5]
      wprocwait
      If prun = Null Then Return

    Endif

    If point4.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S04_" & pname4 To fsdir & "/.DELETED_" & pname4

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname4]
      wprocwait
      If prun = Null Then Return

    Endif

    If point3.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S03_" & pname3 To fsdir & "/.DELETED_" & pname3

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname3]
      wprocwait
      If prun = Null Then Return

    Endif

  Endif

  prun = ("Checking files and directories")
  If Exist(tmp & "pointpercent") Then Kill tmp & "pointpercent"
  dtime = Year(Now) & "-" & Right("0" & Month(Now), 2) & "-" & Right("0" & Day(Now), 2) & "," & Right("0" & Hour(Now), 2) & "." & Right("0" & Minute(Now), 2) & "." & Right("0" & Second(Now), 2)
  wproc = Exec ["systemback", "rpsync", dtime]

  While wproc.State = Process.Running And Not Exist(tmp & "pointpercent")

    Wait 0.1

  Wend

  If prun = Null Then Return
  prun = ("Creating restore point")
  wprocwait
  If prun = Null Then Return

  If wproc.Value = 0

    If IsDir(fsdir & "/S01_" & pname1)

      Move fsdir & "/S01_" & pname1 To fsdir & "/S02_" & pname1

      If IsDir(fsdir & "/S02_" & pname2)

        Move fsdir & "/S02_" & pname2 To fsdir & "/S03_" & pname2

        If IsDir(fsdir & "/S03_" & pname3)

          Move fsdir & "/S03_" & pname3 To fsdir & "/S04_" & pname3

          If IsDir(fsdir & "/S04_" & pname4)

            Move fsdir & "/S04_" & pname4 To fsdir & "/S05_" & pname4

            If IsDir(fsdir & "/S05_" & pname5)

              Move fsdir & "/S05_" & pname5 To fsdir & "/S06_" & pname5

              If IsDir(fsdir & "/S06_" & pname6)

                Move fsdir & "/S06_" & pname6 To fsdir & "/S07_" & pname6

                If IsDir(fsdir & "/S07_" & pname7)

                  Move fsdir & "/S07_" & pname7 To fsdir & "/S08_" & pname7

                  If IsDir(fsdir & "/S08_" & pname8)

                    Move fsdir & "/S08_" & pname8 To fsdir & "/S09_" & pname8

                    If IsDir(fsdir & "/S09_" & pname9)

                      Move fsdir & "/S09_" & pname9 To fsdir & "/S10_" & pname9

                    Endif

                  Endif

                Endif

              Endif

            Endif

          Endif

        Endif

      Endif

    Endif

    Copy "/etc/systemback.excludes" To fsdir & "/.S00_" & dtime & "/.excludes"
    Move fsdir & "/.S00_" & dtime To fsdir & "/S01_" & dtime
    File.Save(fsdir & "/.sbschedule", Null)

    prun = ("Emptying cache")
    wproc = Exec ["sync"]
    wprocwait
    File.Save("/proc/sys/vm/drop_caches", "3")

    If Not systembackgui.Closed

      If sstart

        systembackgui.Close

      Else

        statuspanel.Hide
        mainpanel.Show
        If functionmenunext.Enabled Then functionmenunext.SetFocus Else functionmenuback.SetFocus
        nwidth = 698
        nheight = 465
        windowmove

      Endif

    Endif

  Else If Dfree(fsdir) < 104857600

    dialog = 16
    dialogopen

  Else

    dialog = 38
    dialogopen

  Endif

  If Not sstart Then pointupgrade

End

Private Sub accesserror()

  pointupgrade

  If dialogpanel.Visible And dialogquestion.Visible

    dialogcancel_Click

  Else If mainpanel.Visible

    If restorepanel.Visible Then restoreback_Click
    If copypanel.Visible Then copyback_Click
    If installpanel.Visible Then installback_Click
    If repairpanel.Visible Then repairback_Click

  Endif

End

Public Sub unitimer_Timer()

  Dim com As Process
  Dim ofile As File
  Dim cline, cval, cperc, item As String
  Dim cfupdt As Boolean

  If sbstart

    sbstart = False
    unitimer.Delay = 500

    If Exist("/etc/systemback.conf")

      ofile = Open "/etc/systemback.conf" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        Select Case cline

          Case Like "storagedir=*"

            sdir = Right(cline, - InStr(cline, "="))

          Case Like "liveworkdir=*"

            lwdir = Right(cline, - InStr(cline, "="))

          Case Like "schedule=*"

            cval = Right(cline, - InStr(cline, "="))
            sdys = Left(cval, InStr(cval, ":") - 1)
            shrs = Mid(cval, Len(sdys) + 2, InStr(cval, ":", Len(sdys) + 2) - InStr(cval, ":") - 1)
            smts = Right(Left(cval, InStr(cval, ":", Len(sdys & shrs) + 3) - 1), - Len(sdys & shrs) - 2)
            ssds = Right(cval, - RInStr(cval, ":"))

          Case "pointsnumber=3"

            pnumber = 3
            pnumber3_Click

          Case "pointsnumber=4"

            pnumber = 4
            pnumber4.Value = True

          Case "pointsnumber=5"

            pnumber = 5
            pnumber5.Value = True

          Case "pointsnumber=6"

            pnumber = 6
            pnumber6.Value = True

          Case "pointsnumber=7"

            pnumber = 7
            pnumber7.Value = True

          Case "pointsnumber=8"

            pnumber = 8
            pnumber8.Value = True

          Case "pointsnumber=9"

            pnumber = 9
            pnumber9.Value = True

          Case "pointsnumber=10"

            pnumber = 10
            pnumber10.Value = True

          Case "timer=on"

            stimer = "on"

          Case "timer=off"

            stimer = "off"

          Case "silentmode=on"

            smode = "on"

          Case "silentmode=off"

            smode = "off"

          Case "windowposition=topleft"

            wpos = "topleft"

          Case "windowposition=topright"

            wpos = "topright"
            windowposition.Index = windowposition.Find(("Top right"))

          Case "windowposition=center"

            wpos = "center"
            windowposition.Index = windowposition.Find(("Center"))

          Case "windowposition=bottomleft"

            wpos = "bottomleft"
            windowposition.Index = windowposition.Find(("Bottom left"))

          Case "windowposition=bottomright"

            wpos = "bottomright"
            windowposition.Index = windowposition.Find(("Bottom right"))

        End Select

      Wend
      Close #ofile

    Endif

    If pnumber = 0

      pnumber = 5
      cfupdt = True
      pnumber5.Value = True

    Endif

    If wpos = Null

      wpos = "topright"
      windowposition.Index = windowposition.Find(("Top right"))
      If Not cfupdt Then cfupdt = True

    Endif

    If sdir = Null

      sdir = "/home"
      If Not cfupdt Then cfupdt = True
      If Not Exist("/home/Systemback") Then Try Mkdir "/home/Systemback"
      If Not Exist("/home/Systemback/.sbschedule") Then Try File.Save("/home/Systemback/.sbschedule", Null)

    Endif

    If lwdir = Null

      lwdir = "/home"
      If Not cfupdt Then cfupdt = True

    Endif

    Select Case True

      Case Val(sdys) = Null Or Val(shrs) = Null Or Val(smts) = Null Or Val(ssds) = Null

        sdys = 1
        shrs = 0
        smts = 0
        ssds = 10
        If Not cfupdt Then cfupdt = True

      Case Val(sdys) > 7 Or Val(shrs) > 23 Or Val(smts) > 59 Or Val(ssds) < 10 Or Val(ssds) > 99

        sdys = 1
        shrs = 0
        smts = 0
        ssds = 10
        If Not cfupdt Then cfupdt = True

      Case sdys = 0 And shrs = 0 And Val(smts) < 30

        smts = 30
        If Not cfupdt Then cfupdt = True

    End Select

    If smode = Null

      smode = "off"
      If Not cfupdt Then cfupdt = True

    Else If smode = "on"

      silentmode.Value = True

    Endif

    If stimer = Null

      stimer = "off"
      If Not cfupdt Then cfupdt = True

    Else If stimer = "on"

      schedulerstate_Click

    Endif

    If cfupdt Then configfileupdate
    fsdir = sdir & "/Systemback"
    statuspanel.Y = 0

    If Not sstart

      storagedir.Text = sdir
      liveworkdir.Text = lwdir
      restorepanel.Move(1, 24)
      copypanel.Move(1, 24)
      installpanel.Move(1, 24)
      livecreatepanel.Move(1, 24)
      repairpanel.Move(1, 24)
      excludepanel.Move(1, 24)
      schedulepanel.Move(1, 24)
      aboutpanel.Move(1, 24)
      licensepanel.Move(1, 24)
      choosepanel.Move(1, 24)
      schedulerday.Text = sdys & " " & ("day(s)")
      schedulerhour.Text = shrs & " " & ("hour(s)")
      schedulerminute.Text = smts & " " & ("minute(s)")
      schedulersecond.Text = ssds & " " & ("seconds")
      pshadow.Columns.Count = 3

      With partitionsettings

        .Columns.Count = 5
        .Columns[0].Text = ("Partition")
        .Columns[1].Text = ("Current mount point")
        .Columns[2].Text = ("New mount point")
        .Columns[3].Text = ("Filesystem")
        .Columns[4].Text = ("Format")
        .Columns[0].Alignment = Align.Center
        .Columns[1].Alignment = Align.Center
        .Columns[2].Alignment = Align.Center
        .Columns[3].Alignment = Align.Center
        .Columns[4].Alignment = Align.Center

      End With

      With livedevices

        .Columns.Count = 3
        .Columns[0].Text = ("Partition")
        .Columns[1].Text = ("Device")
        .Columns[2].Text = ("Format")
        .Columns[0].Alignment = Align.Center
        .Columns[1].Alignment = Align.Center
        .Columns[2].Alignment = Align.Center
        .Columns[1].W = .W - .Columns[0].W - .Font.TextWidth(.Columns[2].Text) - 36

      End With

      With includeuserstext

        .W = .Font.TextWidth(.Text) + 1
        includeusers.X = .W + 31

        If .Font.TextWidth(includeusers.Text) + 32 > includeusers.W

          If .Font.TextWidth(includeusers.Text) + 32 < 656 - .W

            includeusers.W = .Font.TextWidth(includeusers.Text) + 32

          Else If includeusers.W < 656 - .W

            includeusers.W = 656 - .W

          Endif

        Endif

        grubreinstallrestoretext.W = .Font.TextWidth(grubreinstallrestoretext.Text) + 1
        grubreinstallrestore.X = grubreinstallrestoretext.W + 15
        grubreinstallrestoredisable.X = grubreinstallrestore.X
        grubinstalltext.W = .Font.TextWidth(grubinstalltext.Text) + 1
        grubinstallcopy.X = grubinstalltext.W + 15
        grubinstallcopydisable.X = grubinstallcopy.X
        grubreinstallrepairtext.W = .Font.TextWidth(grubreinstallrepairtext.Text) + 1
        grubreinstallrepair.X = grubreinstallrepairtext.W + 15
        grubreinstallrepairdisable.X = grubreinstallrepair.X
        schedulerstatetext.W = .Font.TextWidth(schedulerstatetext.Text) + 1
        schedulerstate.X = schedulerstatetext.W + 15
        schedulersecondtext.W = .Font.TextWidth(schedulersecondtext.Text) + 1
        schedulersecondarea.X = schedulersecondtext.W + 15
        secondup.X = schedulersecondarea.X
        seconddown.X = schedulersecondarea.X
        windowpositiontext.W = .Font.TextWidth(windowpositiontext.Text) + 1
        windowposition.X = windowpositiontext.W + 15
        homepage1.W = .Font.TextWidth(homepage1.Text) + 1
        homepage2.W = .Font.TextWidth(homepage2.Text) + 1
        email.W = .Font.TextWidth(email.Text) + 1
        donate.W = .Font.TextWidth(donate.Text) + 1
        warning.W = warning.Font.TextWidth(warning.Text) + 1

        For Each item In windowposition.List

          If .Font.TextWidth(item) + 32 > windowposition.W Then windowposition.W = .Font.TextWidth(item) + 32

        Next

        format.W = 28 + .Font.TextWidth(format.Text)
        fullrestore.W = 28 + .Font.TextWidth(fullrestore.Text)
        systemrestore.W = 28 + .Font.TextWidth(systemrestore.Text)
        configurationfilesrestore.W = 28 + .Font.TextWidth(configurationfilesrestore.Text)
        keepfiles.W = 28 + .Font.TextWidth(keepfiles.Text)
        autorestoreoptions.W = 28 + .Font.TextWidth(autorestoreoptions.Text)
        skipfstabrestore.W = 28 + .Font.TextWidth(skipfstabrestore.Text)
        autorepairoptions.W = 28 + .Font.TextWidth(autorepairoptions.Text)
        skipfstabrepair.W = 28 + .Font.TextWidth(skipfstabrepair.Text)
        userdatafilescopy.W = 28 + .Font.TextWidth(userdatafilescopy.Text)
        usersettingscopy.W = 28 + .Font.TextWidth(usersettingscopy.Text)
        userdatainclude.W = 28 + .Font.TextWidth(userdatainclude.Text)
        systemrepair.W = 28 + .Font.TextWidth(systemrepair.Text)
        fullrepair.W = 28 + .Font.TextWidth(fullrepair.Text)
        grubrepair.W = 28 + .Font.TextWidth(grubrepair.Text)
        pointexclude.W = 28 + .Font.TextWidth(pointexclude.Text)
        liveexclude.W = 28 + .Font.TextWidth(liveexclude.Text)
        silentmode.W = 28 + .Font.TextWidth(silentmode.Text)

      End With

      With filesystem

        .Add("ext4")
        .Add("ext3")
        .Add("ext2")
        If Exist("/sbin/mkfs.btrfs") Then .Add("btrfs")
        If Exist("/sbin/mkfs.reiserfs") Then .Add("reiserfs")
        If Exist("/sbin/mkfs.jfs") Then .Add("jfs")
        If Exist("/sbin/mkfs.xfs") Then .Add("xfs")

      End With

      systembackversion.Text = Trim(File.Load("/usr/share/systemback/version")) & "_"

      If Component.IsLoaded("gb.gtk")

        systembackversion.Text &= "GTK+"

      Else If Component.IsLoaded("gb.gtk3")

        systembackversion.Text &= "GTK+3"

      Else If Component.IsLoaded("gb.qt4")

        systembackversion.Text &= "Qt4"

      Else

        systembackversion.Text &= "?"

      Endif

      With repairmountpoint

        .Text = "/mnt"
        .Add("/mnt")
        .Add("/mnt/home")
        .Add("/mnt/boot")

        If System.Architecture = "x86_64"

          If IsDir("/sys/firmware/efi")

            grub = "efi-amd64"
            .Add("/mnt/boot/efi")

          Else

            Exec ["modprobe", "efivars"] Wait
            If IsDir("/sys/firmware/efi") Then grub = "efi-amd64"

          Endif

        Endif

        .Add("/mnt/usr")
        .Add("/mnt/var")
        .Add("/mnt/opt")
        .Add("/mnt/usr/local")

      End With

      partitionupdate_Click
      livedevicesupdate_Click
      pointexclude_Click

      storagedirbutton.Enabled = True
      storagedirbutton.Mouse = Mouse.Pointing
      repairmenu.Enabled = True
      repairmenu.Mouse = Mouse.Pointing
      aboutmenu.Enabled = True
      aboutmenu.Mouse = Mouse.Pointing

      If Exist("/cdrom/casper/filesystem.squashfs") Or Exist("/live/image/live/filesystem.squashfs") Or Exist("/lib/live/mount/medium/live/filesystem.squashfs")

        If Exist("/.excludes")

          copymenu.Enabled = True
          copymenu.Mouse = Mouse.Pointing
          installmenu.Enabled = True
          installmenu.Mouse = Mouse.Pointing
          pname = ("Live image")
          installmenu_Click

        Endif

      Else

        copymenu.Enabled = True
        copymenu.Mouse = Mouse.Pointing
        installmenu.Enabled = True
        installmenu.Mouse = Mouse.Pointing
        livecreatemenu.Enabled = True
        livecreatemenu.Mouse = Mouse.Pointing
        systemupgrade.Enabled = True
        systemupgrade.Mouse = Mouse.Pointing
        excludemenu.Enabled = True
        excludemenu.Mouse = Mouse.Pointing
        schedulemenu.Enabled = True
        schedulemenu.Mouse = Mouse.Pointing
        pname = ("Currently running system")

      Endif

    Endif

    pointupgrade

    If sstart

      schedulerstart.Enabled = True
      schedulerstart.Mouse = Mouse.Pointing

    Endif

    com = Exec ["modprobe", "-n", "overlayfs"] Wait For Read

    If com.Value = 0

      ickernel = True

    Else

      com = Exec ["modprobe", "-n", "aufs"] Wait For Read

      If com.Value = 0

        ickernel = True

      Else

        com = Exec ["modprobe", "-n", "unionfs"] Wait For Read

        If com.Value = 0

          ickernel = True

        Else If Exist("/usr/bin/unionfs-fuse")

          ickernel = True

        Endif

      Endif

    Endif

    Dec Application.Busy

  Else If statuspanel.Visible

    If prun <> Null

      With points

        Select Case .Text

          Case "    "

            .Text = " .  "

          Case " .  "

            .Text = " .. "

          Case " .. "

            .Text = " ..."

          Case " ..."

            .Text = "    "

          Case Else

            .Text = " .  "

        End Select

        processrun.Text = prun & .Text

      End With

    Endif

    If prun = ("Creating restore point")

      If Not interrupt.Visible

        interruptdisable.Hide
        interrupt.Show

      Endif

      With progressbar

        If progressbartimer.Enabled

          progressbartimer.Stop
          If .Value = 1 Then .Value = 0

        Endif

        If Exist(tmp & "pointpercent")

          cperc = File.Load(tmp & "pointpercent")

          If cperc <> Null

            If cperc <> 0

              .Value = cperc / 100

            Else If .Value <> 0.01

              .Value = 0.01

            Endif

          Endif

          Kill tmp & "pointpercent"

        Endif

      End With

    Else If prun = ("Copying the system") Or prun = ("Installing the system")

      If Not interrupt.Visible

        interruptdisable.Hide
        interrupt.Show

      Endif

      With progressbar

        If progressbartimer.Enabled

          progressbartimer.Stop
          If .Value = 1 Then .Value = 0

        Endif

        If Exist(tmp & "copysize")

          cperc = File.Load(tmp & "copysize")

          If cperc <> Null

            cperc = Round(cperc / cssize, -2)

            If cperc < "0.03"

              If .Value = 0.03 Then .Value = 0 Else .Value = 0.03

            Else If cperc <= "0.99"

              If cperc > CStr(.Value) Or .Value = 1 Then .Value = cperc

            Else

              .Value = 1
              If cproc.State = Process.Running Then cproc.Kill

            Endif

          Endif

          Kill tmp & "copysize"

        Endif

      End With

    Else If prun = ("Writing Live image to USB device")

      If Not interrupt.Visible

        interruptdisable.Hide
        interrupt.Show

      Endif

    Else

      If prun = ("Creating Live system")

        If irfsc

          If Not interruptdisable.Visible

            interrupt.Hide
            interruptdisable.Show

          Endif

        Else If Not interrupt.Visible

          interruptdisable.Hide
          interrupt.Show

        Endif

      Else If prun Begins ("Deleting old restore point") Or prun = ("Creating restore point") Or prun Begins ("Deleting restore point") Or prun = ("Restoring the full system") Or prun = ("Restoring users configuration files") Or prun = ("Restoring the system files") Or prun = ("Repairing the system files") Or prun = ("Repairing the full system") Or prun = ("Deleting incomplete restore point") Or prun = ("Converting Live system image") Or prun = ("Checking files and directories")

        If Not interrupt.Visible

          interruptdisable.Hide
          interrupt.Show

        Endif

      Else If Not interruptdisable.Visible

        interrupt.Hide
        interruptdisable.Show

      Endif

      If Not progressbartimer.Enabled Then progressbartimer.Start

    Endif

  Else

    If fsdir <> Null

      If IsDir(fsdir) And Access(fsdir, gb.Write)

        If storagedirarea.Background = 16738151

          storagedirarea.Background = Color.TextBackground
          storagedir.Background = Color.Default
          pointupgrade

        Endif

        With newrestorepoint

          If ppipe = 0 And pname = ("Currently running system") And Not .Enabled

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        End With

        If point1.Enabled And Not IsDir(fsdir & "/S01_" & pname1) Then accesserror
        If point2.Enabled And Not IsDir(fsdir & "/S02_" & pname2) Then accesserror
        If point3.Enabled And Not IsDir(fsdir & "/S03_" & pname3) Then accesserror
        If point4.Enabled And Not IsDir(fsdir & "/S04_" & pname4) Then accesserror
        If point5.Enabled And Not IsDir(fsdir & "/S05_" & pname5) Then accesserror
        If point6.Enabled And Not IsDir(fsdir & "/S06_" & pname6) Then accesserror
        If point7.Enabled And Not IsDir(fsdir & "/S07_" & pname7) Then accesserror
        If point8.Enabled And Not IsDir(fsdir & "/S08_" & pname8) Then accesserror
        If point9.Enabled And Not IsDir(fsdir & "/S09_" & pname9) Then accesserror
        If point10.Enabled And Not IsDir(fsdir & "/S10_" & pname10) Then accesserror
        If point11.Enabled And Not IsDir(fsdir & "/H01_" & pname11) Then accesserror
        If point12.Enabled And Not IsDir(fsdir & "/H02_" & pname12) Then accesserror
        If point13.Enabled And Not IsDir(fsdir & "/H03_" & pname13) Then accesserror
        If point14.Enabled And Not IsDir(fsdir & "/H04_" & pname14) Then accesserror
        If point15.Enabled And Not IsDir(fsdir & "/H05_" & pname15) Then accesserror

      Else

        If point1.Enabled Or point11.Enabled Then accesserror

        With newrestorepoint

          If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

        If storagedirarea.Background = Color.TextBackground

          storagedirarea.Background = 16738151
          storagedir.Background = 16738151

        Endif

      Endif

    Endif

    Select Case True

      Case copypanel.Visible

        With copyresize

          If .W = 30 And systembackgui.Mouse <> Mouse.SizeNWSE And Not Mouse.Inside(copyresize)

            .Picture = Picture["resize.png"]
            .Move(.X + 20, .Y + 20, 10, 10)

          Endif

        End With

      Case installpanel.Visible

        If fullnamepipe.Visible And usernamepipe.Visible And hostnamepipe.Visible And passwordpipe.Visible And If rootpassword1.Length = 0 Or rootpasswordpipe.Visible

          With installnext

            If Not .Enabled

              .Enabled = True
              .Mouse = Mouse.Pointing

            Endif

          End With

        Endif

      Case livecreatepanel.Visible

        If livenameerror.Visible Or liveworkdir.Text = Null

          With livecreatenew

            If .Enabled

              .Enabled = False
              .Mouse = Mouse.Default

            Endif

          End With

        Else If livenamepipe.Visible Or livename.Text = "auto"

          If IsDir(lwdir) And Access(lwdir, gb.Write)

            If liveworkdirarea.Background = 16738151

              liveworkdirarea.Background = Color.TextBackground
              liveworkdir.Background = Color.Default

            Endif

            If ickernel

              With livecreatenew

                If Not .Enabled

                  .Enabled = True
                  .Mouse = Mouse.Pointing

                Endif

              End With

            Endif

            If Not livelist.Enabled

              livelist.Enabled = True
              livedevices.Enabled = True

            Endif

          Else

            If liveworkdirarea.Background = Color.TextBackground

              liveworkdirarea.Background = 16738151
              liveworkdir.Background = 16738151

            Endif

            With livecreatenew

              If .Enabled

                .Enabled = False
                .Mouse = Mouse.Default

              Endif

            End With

            With livedelete

              If .Enabled

                .Enabled = False
                .Mouse = Mouse.Default

              Endif

            End With

            With liveconvert

              If .Enabled

                .Enabled = False
                .Mouse = Mouse.Default

              Endif

            End With

            With livewritestart

              If .Enabled

                .Enabled = False
                .Mouse = Mouse.Default

              Endif

            End With

            If livedevices.Key

              If livedevices[livedevices.Key][2] = "x" Then livedevices[livedevices.Key][2] = "-"

            Endif

            If livedevices.Enabled Then livedevices.Enabled = False
            If livelist.Text <> Null Then livelist.UnselectAll
            If livedevices.Key <> Null Then livedevices.UnselectAll
            If livelist.Enabled Then livelist.Enabled = False

          Endif

        Else If livecreatenew.Enabled

          livecreatenew.Enabled = False
          livecreatenew.Mouse = Mouse.Default

        Endif

      Case repairpanel.Visible

        With repairnext

          If File.Load("/proc/self/mounts") Like "* /mnt *"

            If grubrepair.Value

              If Exist("/mnt/usr/sbin/update-grub2") And Exist("/mnt/var/lib/dpkg/info/grub-" & grub & ".list")

                If Not grubreinstallrepair.Visible

                  grubreinstallrepair.Show
                  grubreinstallrepairdisable.Hide

                Endif

                If Not .Enabled

                  .Enabled = True
                  .Mouse = Mouse.Pointing

                Endif

              Else

                If grubreinstallrepair.Visible

                  grubreinstallrepair.Hide
                  grubreinstallrepairdisable.Show

                Endif

                If .Enabled

                  .Enabled = False
                  .Mouse = Mouse.Default

                Endif

              Endif

            Else If Not .Enabled

              .Enabled = True
              .Mouse = Mouse.Pointing

            Endif

          Else

            If grubrepair.Value And grubreinstallrepair.Visible

              grubreinstallrepair.Hide
              grubreinstallrepairdisable.Show

            Endif

            If .Enabled

              .Enabled = False
              .Mouse = Mouse.Default

            Endif

          Endif

        End With

      Case excludepanel.Visible

        With excluderesize

          If .W = 30 And systembackgui.Mouse <> Mouse.SizeNWSE And Not Mouse.Inside(excluderesize)

            .Picture = Picture["resize.png"]
            .Move(.X + 20, .Y + 20, 10, 10)

          Endif

        End With

      Case choosepanel.Visible

        With chooseresize

          If .W = 30 And systembackgui.Mouse <> Mouse.SizeNWSE And Not Mouse.Inside(chooseresize)

            .Picture = Picture["resize.png"]
            .Move(.X + 20, .Y + 20, 10, 10)

          Endif

        End With

    End Select

    If prun <> Null Then prun = Null
    If processrun.Text <> Null Then processrun.Text = Null
    If points.Text <> Null Then points.Text = Null
    If progressbartimer.Enabled Then progressbartimer.Stop
    If progressbar.Value <> 0 Then progressbar.Value = 0

    If Not interruptdisable.Visible

      interrupt.Hide
      interruptdisable.Show

    Endif

  Endif

End

Public Sub progressbartimer_Timer()

  With progressbar

    If prun Ends "/" & ppipe And Len(prun) = InStr(prun, "/" & ppipe) + Len("/" & ppipe) - 1

      If .Value = 0 Then .Value = Round(dnum / ppipe, -2) Else .Value = 0

    Else

      If .Value = 0 Then .Value = 1 Else .Value = 0

    Endif

  End With

End

Public Sub pointhighlight_Click()

  Inc Application.Busy
  If IsDir(fsdir & "/" & cpoint & "_" & pname) Then Move fsdir & "/" & cpoint & "_" & pname To fsdir & "/H05_" & pname
  pointupgrade
  Dec Application.Busy

End

Public Sub pointrename_Click()

  Inc Application.Busy
  If dialog = 3 Then dialog = 0

  If pointpipe1.Value And point1.Text <> pname1

    If point1.Text Like "* *"

      dialog = 3

    Else

      Try Move fsdir & "/S01_" & pname1 To fsdir & "/S01_" & point1.Text
      If Not Error Then pointpipe1.Value = False Else dialog = 3

    Endif

  Endif

  If pointpipe2.Value And point2.Text <> pname2

    If point2.Text Not Like "* *"

      Try Move fsdir & "/S02_" & pname2 To fsdir & "/S02_" & point2.Text

      If Not Error

        pointpipe2.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe3.Value And point3.Text <> pname3

    If point3.Text Not Like "* *"

      Try Move fsdir & "/S03_" & pname3 To fsdir & "/S03_" & point3.Text

      If Not Error

        pointpipe3.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe4.Value And point4.Text <> pname4

    If point4.Text Not Like "* *"

      Try Move fsdir & "/S04_" & pname4 To fsdir & "/S04_" & point4.Text

      If Not Error

        pointpipe4.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe5.Value And point5.Text <> pname5

    If point5.Text Not Like "* *"

      Try Move fsdir & "/S05_" & pname5 To fsdir & "/S05_" & point5.Text

      If Not Error

        pointpipe5.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe6.Value And point6.Text <> pname6

    If point6.Text Not Like "* *"

      Try Move fsdir & "/S06_" & pname6 To fsdir & "/S06_" & point6.Text

      If Not Error

        pointpipe6.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe7.Value And point7.Text <> pname7

    If point7.Text Not Like "* *"

      Try Move fsdir & "/S07_" & pname7 To fsdir & "/S07_" & point7.Text

      If Not Error

        pointpipe7.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe8.Value And point8.Text <> pname8

    If point8.Text Not Like "* *"

      Try Move fsdir & "/S08_" & pname8 To fsdir & "/S08_" & point8.Text

      If Not Error

        pointpipe8.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe9.Value And point9.Text <> pname9

    If point9.Text Not Like "* *"

      Try Move fsdir & "/S09_" & pname9 To fsdir & "/S09_" & point9.Text

      If Not Error

        pointpipe9.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe10.Value And point10.Text <> pname10

    If point10.Text Not Like "* *"

      Try Move fsdir & "/S10_" & pname10 To fsdir & "/S10_" & point10.Text

      If Not Error

        pointpipe10.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe11.Value And point11.Text <> pname11

    If point11.Text Not Like "* *"

      Try Move fsdir & "/H01_" & pname11 To fsdir & "/H01_" & point11.Text

      If Not Error

        pointpipe11.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe12.Value And point12.Text <> pname12

    If point12.Text Not Like "* *"

      Try Move fsdir & "/H02_" & pname12 To fsdir & "/H02_" & point12.Text

      If Not Error

        pointpipe12.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe13.Value And point13.Text <> pname13

    If point13.Text Not Like "* *"

      Try Move fsdir & "/H03_" & pname13 To fsdir & "/H03_" & point13.Text

      If Not Error

        pointpipe13.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe14.Value And point14.Text <> pname14

    If point14.Text Not Like "* *"

      Try Move fsdir & "/H04_" & pname14 To fsdir & "/H04_" & point14.Text

      If Not Error

        pointpipe14.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe15.Value And point15.Text <> pname15

    If point15.Text Not Like "* *"

      Try Move fsdir & "/H05_" & pname15 To fsdir & "/H05_" & point15.Text

      If Not Error

        pointpipe15.Value = False

      Else If dialog <> 3

        dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  pointupgrade
  If dialog = 3 Then dialogopen
  Dec Application.Busy

End

Public Sub function1_MouseMove()

  With systembackgui

    If Mouse.Left And .W <> Screen.AvailableWidth And .H <> Screen.AvailableHeight And Not wmove

      wmove = True
      .Move(Mouse.ScreenX - Mouse.StartX, Mouse.ScreenY - Mouse.StartY)

      Wait 0.02

      wmove = False

    Endif

  End With

End

Public Sub function2_MouseMove()

  If Mouse.Left And Not wmove

    wmove = True
    systembackgui.Move(Mouse.ScreenX - Mouse.StartX, Mouse.ScreenY - Mouse.StartY)

    Wait 0.02

    wmove = False

  Endif

End

Public Sub function3_MouseMove()

  function1_MouseMove

End

Public Sub function4_MouseMove()

  function2_MouseMove

End

Public Sub chooseresize_MouseMove()

  Dim mainw As Short = Mouse.ScreenX - systembackgui.X + 5
  Dim mainh As Short = Mouse.ScreenY - systembackgui.Y + 5

  If Mouse.Left

    With systembackgui

      If mainw < 642

        If .W <> 642 Then .W = 642

      Else If mainw > 1920

        If .W <> 1920 Then .W = 1920

      Else If Abs(mainw - .W) > 9

        .W = mainw

      Endif

      If mainh < 481

        If .H <> 481 Then .H = 481

      Else If mainh > 1080

        If .H <> 1080 Then .H = 1080

      Else If Abs(mainh - .H) > 9

        .H = mainh

      Endif

    End With

  Endif

End

Public Sub copyresize_MouseMove()

  Dim mainw As Short = Mouse.ScreenX - systembackgui.X + 5
  Dim mainh As Short = Mouse.ScreenY - systembackgui.Y + 5

  If Mouse.Left

    With systembackgui

      If mainw < 698

        If .W <> 698 Then .W = 698

      Else If mainw > 1920

        If .W <> 1920 Then .W = 1920

      Else If Abs(mainw - .W) > 9

        .W = mainw

      Endif

      If mainh < 465

        If .H <> 465 Then .H = 465

      Else If mainh > 1080

        If .H <> 1080 Then .H = 1080

      Else If Abs(mainh - .H) > 9

        .H = mainh

      Endif

    End With

  Endif

End

Public Sub excluderesize_MouseMove()

  copyresize_MouseMove

End

Public Sub function1_MouseDown()

  If Mouse.Left Then systembackgui.Mouse = Mouse.SizeAll

End

Public Sub function1_MouseUp()

  If systembackgui.Mouse = Mouse.SizeAll Then systembackgui.Mouse = Mouse.Default

End

Public Sub function2_MouseDown()

  function1_MouseDown

End

Public Sub function2_MouseUp()

  function1_MouseUp

End

Public Sub function3_MouseDown()

  function1_MouseDown

End

Public Sub function3_MouseUp()

  function1_MouseUp

End

Public Sub function4_MouseDown()

  function1_MouseDown

End

Public Sub function4_MouseUp()

  function1_MouseUp

End

Public Sub chooseresize_Enter()

  With chooseresize

    If .W = 10

      .Picture = Picture["bigresize.png"]
      .Move(.X - 20, .Y - 20, 30, 30)

    Endif

  End With

End

Public Sub chooseresize_Leave()

  With chooseresize

    If .W = 30 And systembackgui.Mouse <> Mouse.SizeNWSE And Not Mouse.Inside(chooseresize)

      .Picture = Picture["resize.png"]
      .Move(.X + 20, .Y + 20, 10, 10)

    Endif

  End With

End

Public Sub chooseresize_MouseDown()

  If Mouse.Left

    chooseresize.Mouse = Mouse.Default
    copyresize.Mouse = Mouse.Default
    excluderesize.Mouse = Mouse.Default
    systembackgui.Mouse = Mouse.SizeNWSE

    With systembackgui

      winx = .X
      winy = .Y
      winw = .W
      winh = .H

    End With

  Endif

End

Public Sub chooseresize_MouseUp()

  If systembackgui.Mouse = Mouse.SizeNWSE

    chooseresize.Mouse = Mouse.Pointing
    copyresize.Mouse = Mouse.Pointing
    excluderesize.Mouse = Mouse.Pointing
    systembackgui.Mouse = Mouse.Default

  Endif

  If chooseresize.W = 30 Then chooseresize_Leave

End

Public Sub copyresize_Enter()

  With copyresize

    If .W = 10

      .Picture = Picture["bigresize.png"]
      .Move(.X - 20, .Y - 20, 30, 30)

    Endif

  End With

End

Public Sub copyresize_Leave()

  With copyresize

    If .W = 30 And systembackgui.Mouse <> Mouse.SizeNWSE And Not Mouse.Inside(copyresize)

      .Picture = Picture["resize.png"]
      .Move(.X + 20, .Y + 20, 10, 10)

    Endif

  End With

End

Public Sub copyresize_MouseDown()

  chooseresize_MouseDown

End

Public Sub copyresize_MouseUp()

  chooseresize_MouseUp
  If copyresize.W = 30 Then copyresize_Leave

End

Public Sub excluderesize_Enter()

  With excluderesize

    If .W = 10

      .Picture = Picture["bigresize.png"]
      .Move(.X - 20, .Y - 20, 30, 30)

    Endif

  End With

End

Public Sub excluderesize_Leave()

  With excluderesize

    If .W = 30 And systembackgui.Mouse <> Mouse.SizeNWSE And Not Mouse.Inside(excluderesize)

      .Picture = Picture["resize.png"]
      .Move(.X + 20, .Y + 20, 10, 10)

    Endif

  End With

End

Public Sub excluderesize_MouseDown()

  chooseresize_MouseDown

End

Public Sub excluderesize_MouseUp()

  chooseresize_MouseUp
  If excluderesize.W = 30 Then excluderesize_Leave

End

Public Sub windowbutton1_Enter()

  If mainpanel.Background = Color.Foreground Then windowbutton1_MouseDown

End

Public Sub windowbutton1_MouseDown()

  With windowminimize

    If .Background = Color.TextBackground Then .Background = Color.TextForeground
    If .Foreground <> Color.TextBackground Then .Foreground = Color.TextBackground

  End With

  With windowclose

    If .Background = Color.TextForeground Then .Background = Color.TextBackground
    If .Foreground <> Color.TextForeground Then .Foreground = Color.TextForeground
    If Not .Visible Then .Show

  End With

  With buttonspanel

    If copypanel.Visible Or excludepanel.Visible Or choosepanel.Visible

      With windowmaximize

        If systembackgui.W = Screen.AvailableWidth And systembackgui.H = Screen.AvailableHeight

          If .Text = "‚ñ°" Then .Text = "‚ñ≠"

        Else If .Text = "‚ñ≠"

          .Text = "‚ñ°"

        Endif

        If .Background = Color.TextBackground Then .Background = Color.TextForeground
        If .Foreground <> Color.TextBackground Then .Foreground = Color.TextBackground
        If Not .Visible Then .Show

      End With

      If windowminimize.X <> 47 Then windowminimize.X = 47
      If windowclose.X <> 92 Then windowclose.X = 92
      If .W <> 138 Then .W = 138

    Else

      If windowmaximize.Visible Then windowmaximize.Hide
      If windowminimize.X <> 2 Then windowminimize.X = 2
      If windowclose.X <> 47 Then windowclose.X = 47
      If .W <> 93 Then .W = 93

    Endif

    If .X <> systembackgui.W - .W Then .X = systembackgui.W - .W
    .Visible = True
    buttonstimer.Start

  End With

End

Public Sub windowbutton2_Enter()

  If mainpanel.Background = Color.Foreground Then windowbutton2_MouseDown

End

Public Sub windowbutton2_MouseDown()

  If windowmaximize.Visible Then windowmaximize.Hide

  With windowminimize

    If .Background = Color.TextBackground Then .Background = Color.TextForeground
    If .Foreground <> Color.TextBackground Then .Foreground = Color.TextBackground
    If .X <> 2 Then .X = 2

  End With

  With windowclose

    If .Background = Color.TextForeground Then .Background = Color.TextBackground
    If .Foreground <> Color.TextForeground Then .Foreground = Color.TextForeground
    If Not .Visible Then .Show
    If .X <> 47 Then .X = 47

  End With

  With buttonspanel

    If .W <> 93 Then .W = 93
    If .X <> systembackgui.W - .W Then .X = systembackgui.W - .W
    .Visible = True
    buttonstimer.Start

  End With

End

Public Sub windowbutton3_Enter()

  If mainpanel.Background = Color.Foreground Then windowbutton3_MouseDown

End

Public Sub windowbutton3_MouseDown()

  If windowmaximize.Visible Then windowmaximize.Hide
  If windowclose.Visible Then windowclose.Hide

  With windowminimize

    If .Background = Color.TextForeground Then .Background = Color.TextBackground
    If .Foreground <> Color.TextForeground Then .Foreground = Color.TextForeground
    If .X <> 2 Then .X = 2

  End With

  With buttonspanel

    If .W <> 48 Then .W = 48
    If .X <> systembackgui.W - .W Then .X = systembackgui.W - .W
    .Visible = True
    buttonstimer.Start

  End With

End

Public Sub windowbutton4_Enter()

  If mainpanel.Background = Color.Foreground Then windowbutton3_MouseDown

End

Public Sub windowbutton4_MouseDown()

  windowbutton3_MouseDown

End

Public Sub windowmaximize_MouseDown()

  If Mouse.Left Then windowmaximize.Foreground = Color.SelectedBackground

End

Public Sub windowmaximize_MouseUp()

  If windowmaximize.Foreground = Color.SelectedBackground And buttonspanel.Visible

    With systembackgui

      If windowmaximize.Text = "‚ñ°"

        buttonspanel.Hide
        buttonstimer.Stop

        winx = .X
        winy = .Y
        winw = .W
        winh = .H

        .Move(0, 0, Screen.AvailableWidth, Screen.AvailableHeight)

      Else

        .Resize(1, 1)

        Wait 0.15

        .Move(winx, winy, winw, winh)

      Endif

    End With

  Endif

End

Public Sub windowmaximize_Enter()

  With windowmaximize

    If .Background = Color.TextForeground

      .Background = Color.TextBackground
      .Foreground = Color.TextForeground

    Endif

  End With

End

Public Sub windowmaximize_Leave()

  With windowmaximize

    If .Background = Color.TextBackground

      .Background = Color.TextForeground
      .Foreground = Color.TextBackground

    Endif

  End With

End

Public Sub windowminimize_MouseDown()

  If Mouse.Left Then windowminimize.Foreground = Color.SelectedBackground

End

Public Sub windowminimize_MouseUp()

  If windowminimize.Foreground = Color.SelectedBackground And buttonspanel.Visible

    systembackgui.Minimized = True

    Wait 0.3

    If buttonspanel.Visible

      buttonspanel.Hide
      buttonstimer.Stop

    Endif

  Endif

End

Public Sub windowminimize_Enter()

  With windowminimize

    If .Background = Color.TextForeground

      .Background = Color.TextBackground
      .Foreground = Color.TextForeground

    Endif

  End With

End

Public Sub windowminimize_Leave()

  With windowminimize

    If .Background = Color.TextBackground

      .Background = Color.TextForeground
      .Foreground = Color.TextBackground

    Endif

  End With

End

Public Sub windowclose_MouseDown()

  If Mouse.Left Then windowclose.Foreground = Color.SelectedBackground

End

Public Sub windowclose_MouseUp()

  If windowclose.Foreground = Color.SelectedBackground And buttonspanel.Visible Then systembackgui.Close

End

Public Sub windowclose_Enter()

  With windowclose

    If .Background = Color.TextForeground

      .Background = Color.TextBackground
      .Foreground = Color.TextForeground

    Endif

  End With

End

Public Sub windowclose_Leave()

  With windowclose

    If .Background = Color.TextBackground

      .Background = Color.TextForeground
      .Foreground = Color.TextBackground

    Endif

  End With

End

Public Sub buttonspanel_Leave()

  buttonspanel.Hide
  buttonstimer.Stop

End

Public Sub buttonspanel_LostFocus()

  buttonspanel.Hide
  buttonstimer.Stop

End

Public Sub pointdelete_Click()

  statusstart

  If dnum <> 0 Then dnum = 0

  If pointpipe10.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S10_" & pname10 To fsdir & "/.DELETED_" & pname10

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname10]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe9.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S09_" & pname9 To fsdir & "/.DELETED_" & pname9

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname9]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe8.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S08_" & pname8 To fsdir & "/.DELETED_" & pname8

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname8]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe7.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S07_" & pname7 To fsdir & "/.DELETED_" & pname7

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname7]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe6.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S06_" & pname6 To fsdir & "/.DELETED_" & pname6

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname6]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe5.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S05_" & pname5 To fsdir & "/.DELETED_" & pname5

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname5]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe4.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S04_" & pname4 To fsdir & "/.DELETED_" & pname4

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname4]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe3.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S03_" & pname3 To fsdir & "/.DELETED_" & pname3

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname3]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe2.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S02_" & pname2 To fsdir & "/.DELETED_" & pname2

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname2]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe1.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S01_" & pname1 To fsdir & "/.DELETED_" & pname1

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname1]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe11.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/H01_" & pname11 To fsdir & "/.DELETED_" & pname11

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname11]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe12.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/H02_" & pname12 To fsdir & "/.DELETED_" & pname12

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname12]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe13.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/H03_" & pname13 To fsdir & "/.DELETED_" & pname13

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname13]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe14.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/H04_" & pname14 To fsdir & "/.DELETED_" & pname14

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname14]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe15.Value

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/H05_" & pname15 To fsdir & "/.DELETED_" & pname15

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname15]
    wprocwait
    If prun = Null Then Return

  Endif

  pointupgrade

  prun = ("Emptying cache")
  wproc = Exec ["sync"]
  wprocwait
  File.Save("/proc/sys/vm/drop_caches", "3")

  If Not systembackgui.Closed

    statuspanel.Hide
    mainpanel.Show
    If functionmenunext.Enabled Then functionmenunext.SetFocus Else functionmenuback.SetFocus
    nwidth = 698
    nheight = 465
    windowmove

  Endif

End

Public Sub autorestoreoptions_Click()

  If autorestoreoptions.Value

    skipfstabrestore.Enabled = False
    skipfstabrestore.Mouse = Mouse.Default
    grubreinstallrestore.Enabled = False
    grubreinstallrestore.Mouse = Mouse.Default
    grubreinstallrestoredisable.Enabled = False
    grubreinstallrestoredisable.Mouse = Mouse.Default

  Else

    skipfstabrestore.Enabled = True
    skipfstabrestore.Mouse = Mouse.Pointing
    grubreinstallrestore.Enabled = True
    grubreinstallrestore.Mouse = Mouse.Pointing
    grubreinstallrestoredisable.Enabled = True
    grubreinstallrestoredisable.Mouse = Mouse.Pointing

  Endif

End

Public Sub storagedirbutton_Click()

  dirrefresh_Click
  If textoutputwindow.Visible Then textoutputwindow.Hide
  systembackpanel.Hide
  choosepanel.Show
  function1.Text = ("Storage directory")
  dirchooseok.SetFocus
  nwidth = 642
  nheight = 481
  windowmove

End

Public Sub dirchooseok_Click()

  Dim item As String

  If IsDir(dirchoose.Key)

    If function1.Text = ("Storage directory")

      If sdir <> dirchoose.Key

        If IsDir(fsdir)

          If Dir(fsdir).Count = 0

            Try Rmdir fsdir

          Else If Dir(fsdir).Count = 1 And Exist(fsdir & "/.sbschedule")

            Try Kill fsdir & "/.sbschedule"
            If Not Error Then Try Rmdir fsdir

          Endif

        Endif

        sdir = dirchoose.Key
        configfileupdate
        fsdir = sdir & "/Systemback"
        storagedir.Text = sdir
        pointupgrade

      Endif

      If Not IsDir(fsdir)

        Try Mkdir fsdir

        If Error

          Move fsdir To fsdir & "_" & Int(Rnd(1000000000, 9999999999))
          Mkdir fsdir

        Endif

      Endif

      If Not Exist(fsdir & "/.sbschedule") Then File.Save(fsdir & "/.sbschedule", Null)
      If Application.Args[1] <> "notextoutput" Then textoutputwindow.Show
      choosepanel.Hide
      systembackpanel.Show
      function1.Text = "Systemback"
      If functionmenunext.Enabled Then functionmenunext.SetFocus Else functionmenuback.SetFocus

    Else

      If lwdir <> dirchoose.Key

        lwdir = dirchoose.Key
        configfileupdate
        liveworkdir.Text = lwdir

        If livelist.Count <> 0 Then livelist.Clear

        With livedelete

          If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

        With liveconvert

          If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

        With livewritestart

          If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

        If IsDir(lwdir)

          For Each item In Dir(lwdir, "*.sblive", gb.File)

            With Stat(lwdir & "/" & item)

              If Len(item) > 7 And item Not Like "* *" And .Size > 0 And .Type <> gb.Link

                If Exist(lwdir & "/" & Left(item, -7) & ".iso")

                  With Stat(lwdir & "/" & Left(item, -7) & ".iso")

                    If .Size > 0 And .Type <> gb.Link

                      livelist.Add(Left(item, -7) & " (" & Round(.Size / 1024 / 1024 / 1024, -2) & " GiB, sblive+iso)")

                    Else

                      livelist.Add(Left(item, -7) & " (" & Round(.Size / 1024 / 1024 / 1024, -2) & " GiB, sblive)")

                    Endif

                  End With

                Else

                  livelist.Add(Left(item, -7) & " (" & Round(.Size / 1024 / 1024 / 1024, -2) & " GiB, sblive)")

                Endif

              Endif

            End With

          Next

        Endif

      Endif

      If Application.Args[1] <> "notextoutput" Then textoutputwindow.Show
      choosepanel.Hide
      livecreatepanel.Show
      function1.Text = ("Live system create")
      livecreateback.SetFocus

    Endif

    nwidth = 698
    nheight = 465
    windowmove

  Else

    With dirchoose

      dirchoose[.Key].Picture = Picture["dirx.png"]
      If dirchoose[.Key].Expanded Then dirchoose[.Key].Expanded = False
      dirchooseok.Enabled = False
      dirchooseok.Mouse = Mouse.Default
      dirpath.Foreground = Color.Red

    End With

  Endif

End

Public Sub choosecancel_Click()

  If dirchooseok.Picture = Null

    If Application.Args[1] <> "notextoutput" Then textoutputwindow.Show
    choosepanel.Hide

    If function1.Text = ("Storage directory")

      systembackpanel.Show
      function1.Text = "Systemback"
      If functionmenunext.Enabled Then functionmenunext.SetFocus Else functionmenuback.SetFocus

    Else

      livecreatepanel.Show
      function1.Text = ("Live system create")
      livecreateback.SetFocus

    Endif

    nwidth = 698
    nheight = 465
    windowmove

  Endif

End

Public Sub fullrestore_Click()

  With keepfiles

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default
      includeusers.Enabled = False
      includeusers.Mouse = Mouse.Default
      autorestoreoptions.Enabled = True
      autorestoreoptions.Mouse = Mouse.Pointing

      If Not autorestoreoptions.Value

        skipfstabrestore.Enabled = True
        skipfstabrestore.Mouse = Mouse.Pointing
        grubreinstallrestore.Enabled = True
        grubreinstallrestore.Mouse = Mouse.Pointing
        grubreinstallrestoredisable.Enabled = True
        grubreinstallrestoredisable.Mouse = Mouse.Pointing

      Endif

    Endif

  End With

  If Not restorenext.Enabled Then restorenext.Enabled = True

End

Public Sub systemrestore_Click()

  fullrestore_Click

End

Public Sub configurationfilesrestore_Click()

  With keepfiles

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing
      includeusers.Enabled = True
      includeusers.Mouse = Mouse.Pointing
      autorestoreoptions.Enabled = False
      autorestoreoptions.Mouse = Mouse.Default

      If Not autorestoreoptions.Value

        skipfstabrestore.Enabled = False
        skipfstabrestore.Mouse = Mouse.Default
        grubreinstallrestore.Enabled = False
        grubreinstallrestore.Mouse = Mouse.Default
        grubreinstallrestoredisable.Enabled = False
        grubreinstallrestoredisable.Mouse = Mouse.Default

      Endif

    Endif

  End With

  includeusers_Click

End

Public Sub includeusers_Click()

  With includeusers

    If .Font.TextWidth(.Text) + 32 < 113

      If .W <> 112 Then .W = 112

    Else If .Font.TextWidth(.Text) + 32 <> .W

      If .Font.TextWidth(.Text) + 32 < 656 - includeuserstext.W

        .W = .Font.TextWidth(.Text) + 32

      Else If .W < 656 - includeuserstext.W

        .W = 656 - includeuserstext.W

      Endif

    Endif

    If .Index < 2 Or If .Index > 1 And IsDir(fsdir & "/" & cpoint & "_" & pname & "/home/" & .Text)

      If Not restorenext.Enabled Then restorenext.Enabled = True

    Else If restorenext.Enabled

      restorenext.Enabled = False

    Endif

  End With

End

Public Sub restorenext_Click()

  Select Case True

    Case fullrestore.Value

      dialog = 18

    Case systemrestore.Value

      dialog = 4

    Case keepfiles.Value

      dialog = 8

    Case Else

      dialog = 7

  End Select

  dialogopen

End

Private Sub restore()

  Dim ofile As File
  Dim cline, fstab1, fstab2, elist, usr, mntdev As String

  statusstart

  If dialog = 23 Then dialog = 0

  If fullrestore.Value Or systemrestore.Value

    If fullrestore.Value Then prun = ("Restoring the full system") Else prun = ("Restoring the system files")

    If autorestoreoptions.Value

      If Exist("/etc/fstab")

        Exec ["sha1sum", "/etc/fstab"] To fstab1
        fstab1 = Left(fstab1, InStr(fstab1, " ") - 1)
        Exec ["sha1sum", fsdir & "/" & cpoint & "_" & pname & "/etc/fstab"] To fstab2
        fstab2 = Left(fstab2, InStr(fstab2, " ") - 1)
        If fstab1 <> fstab2 Then Try Copy "/etc/fstab" To "/tmp/sbrestorefstab"

      Endif

    Else If skipfstabrestore.Value

      Try Copy "/etc/fstab" To "/tmp/sbrestorefstab"

    Endif

    If prun = Null Then Return
    wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete '" & fsdir & "'/" & cpoint & "_" & pname & "/ / --include=/{bin,boot,cdrom,dev,etc,home,lib,lib32,lib64,mnt,opt,proc,run,root,sbin,selinux,srv,sys,tmp,usr,var,initrd*,vmlinuz*} --exclude={/*,/home/*,/proc/*,/run/*,/sys/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/root/*,/var/tmp/*,/var/run/*,/etc/mtab,/etc/sudoers.d/99_systemback,/etc/xdg/autostart/sbschedule.desktop,/var/lib/udisks/mtab,/var/lib/dpkg/info/systemback*,/usr/bin/systemback*,/usr/bin/sbsync,/usr/share/systemback,/etc/systemback*,lost+found}"]
    wprocwait
    If prun = Null Then Return

    If Exist("/tmp/sbrestorefstab") And If autorestoreoptions.Value Or skipfstabrestore.Value

      Try Kill "/etc/fstab"
      Copy "/tmp/sbrestorefstab" To "/etc/fstab"
      Kill "/tmp/sbrestorefstab"

    Endif

    If prun = Null Then Return
    wproc = Exec ["sbsync", "-ax", "--delete", fsdir & "/" & cpoint & "_" & pname & "/media", "/"]
    wprocwait
    If prun = Null Then Return

  Endif

  If fullrestore.Value Or configurationfilesrestore.Value

    If Not keepfiles.Enabled Or Not keepfiles.Value

      If configurationfilesrestore.Value Then prun = ("Restoring users configuration files")

      elist = "/" & rtmp & ",/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,/.Xauthority"

      ofile = Open fsdir & "/" & cpoint & "_" & pname & "/.excludes" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If Left(cline) = "." Then elist &= ",'/" & cline & "'"

      Wend
      Close #ofile

      For Each usr In Dir(fsdir & "/" & cpoint & "_" & pname & "/home", "*", gb.Directory)

        If Not includeusers.Enabled Or includeusers.Index = 0 Or includeusers.Text = usr

          If Not IsDir("/home/" & usr)

            Try Mkdir "/home/" & usr

            If Error

              Move "/home/" & usr To "/home/" & usr & "_" & Int(Rnd(1000000000, 9999999999))
              Mkdir "/home/" & usr

            Endif

          Endif

          If prun = Null Then Return
          wproc = Exec ["bash", "-c", "sbsync -rptgoD --delete --min-size=8MB --link-dest=../ /home/" & usr & "/ /home/" & usr & "/" & rtmp & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgo --delete '" & fsdir & "'/" & cpoint & "_" & pname & "/home/" & usr & "/ /home/" & usr & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgom --link-dest=" & rtmp & "/ /home/" & usr & "/" & rtmp & "/ /home/" & usr]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["rm", "-rf", "/home/" & usr & "/" & rtmp]
          wprocwait

        Endif

      Next

      If Not includeusers.Enabled Or includeusers.Index < 2

        If prun = Null Then Return
        wproc = Exec ["bash", "-c", "sbsync -rptgoD --delete --min-size=8MB --link-dest=../ /root/ /root/" & rtmp & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgo --delete '" & fsdir & "'/" & cpoint & "_" & pname & "/root/ /root --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgom --link-dest=" & rtmp & "/ /root/" & rtmp & "/ /root"]
        wprocwait
        If prun = Null Then Return
        wproc = Exec ["rm", "-rf", "/root/" & rtmp]
        wprocwait
        If prun = Null Then Return

      Endif

    Else

      prun = ("Restoring users configuration files")

      If includeusers.Index < 2

        If includeusers.Index = 0

          wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/home/", "/home"]
          wprocwait
          If prun = Null Then Return

        Endif

        wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/root/", "/root"]

      Else

        wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/home/" & includeusers.Text & "/", "/home/" & includeusers.Text]

      Endif

      wprocwait
      If prun = Null Then Return

    Endif

  Endif

  If fullrestore.Value Or systemrestore.Value

    If grubreinstallrestore.Visible

      If prun = Null Then Return

      If autorestoreoptions.Value Or grubreinstallrestore.Text = "Auto"

        If fstab1 = fstab2

          wproc = Exec ["update-grub"]

        Else

          wproc = Exec ["update-grub"]
          wprocwait
          If prun = Null Then Return

          ofile = Open "/proc/self/mounts" For Input
          While Not Eof(ofile)
            Line Input #ofile, cline

            If cline Like "* /boot *"

              mntdev = Left(cline, InStr(cline, " ") - 1)
              Break

            Else If cline Like "* / *"

              mntdev = Left(cline, InStr(cline, " ") - 1)

            Endif

          Wend
          Close #ofile

          If prun = Null Then Return
          wproc = Exec ["grub-install", "--force", Left(mntdev, 8)]

        Endif

      Else

        wproc = Exec ["update-grub"]
        wprocwait
        If prun = Null Then Return
        wproc = Exec ["grub-install", "--force", grubreinstallrestore.Text]

      Endif

      wprocwait
      If prun = Null Then Return

      If wproc.Value <> 0 Then dialog = 23

    Endif

    File.Save(fsdir & "/.sbschedule", Null)

  Endif

  If dialog <> 23

    If fullrestore.Value

      dialog = 20

    Else If systemrestore.Value

      dialog = 19

    Else If configurationfilesrestore.Value

      If keepfiles.Value Then dialog = 10 Else dialog = 9

    Endif

  Endif

  dialogopen

End

Public Sub pnumber3_Click()

  If pnumber <> 3

    pnumber = 3
    configfileupdate

  Endif

  With point3

    If .Enabled And .Background = Color.Default Then .Background = 16738151

  End With

  With point4

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point5

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point6

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point7

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point8

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point9

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point10

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber4_Click()

  If pnumber <> 4

    pnumber = 4
    configfileupdate

  Endif

  With point3

    If .Enabled And .Background = 16738151 Then .Background = Color.Default

  End With

  With point4

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point5

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point6

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point7

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point8

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point9

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point10

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber5_Click()

  If pnumber <> 5

    pnumber = 5
    configfileupdate

  Endif

  With point3

    If .Enabled And .Background = 16738151 Then .Background = Color.Default

  End With

  With point4

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point5

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point6

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point7

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point8

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point9

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point10

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber6_Click()

  If pnumber <> 6

    pnumber = 6
    configfileupdate

  Endif

  With point3

    If .Enabled And .Background = 16738151 Then .Background = Color.Default

  End With

  With point4

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point5

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point6

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point7

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point8

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point9

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point10

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber7_Click()

  If pnumber <> 7

    pnumber = 7
    configfileupdate

  Endif

  With point3

    If .Enabled And .Background = 16738151 Then .Background = Color.Default

  End With

  With point4

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point5

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point6

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point7

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point8

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point9

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point10

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber8_Click()

  If pnumber <> 8

    pnumber = 8
    configfileupdate

  Endif

  With point3

    If .Enabled And .Background = 16738151 Then .Background = Color.Default

  End With

  With point4

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point5

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point6

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point7

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point8

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point9

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

  With point10

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber9_Click()

  If pnumber <> 9

    pnumber = 9
    configfileupdate

  Endif

  With point3

    If .Enabled And .Background = 16738151 Then .Background = Color.Default

  End With

  With point4

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point5

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point6

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point7

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point8

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point9

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point10

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber10_Click()

  If pnumber <> 10

    pnumber = 10
    configfileupdate

  Endif

  With point3

    If .Enabled And .Background = 16738151 Then .Background = Color.Default

  End With

  With point4

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point5

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point6

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point7

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point8

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point9

    If .Enabled

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

  With point10

    If .Enabled

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

End

Public Sub autorepairoptions_Click()

  If autorepairoptions.Value

    With skipfstabrepair

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With grubreinstallrepair

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default
        grubreinstallrepairdisable.Enabled = False
        grubreinstallrepairdisable.Mouse = Mouse.Default

      Endif

    End With

  Else

    With skipfstabrepair

      If Not .Enabled

        .Enabled = True
        .Mouse = Mouse.Pointing

      Endif

    End With

    With grubreinstallrepair

      If Not .Enabled

        .Enabled = True
        .Mouse = Mouse.Pointing
        grubreinstallrepairdisable.Enabled = True
        grubreinstallrepairdisable.Mouse = Mouse.Pointing

      Endif

    End With

  Endif

End

Public Sub systemrepair_Click()

  If grubrepair.Value

    With autorepairoptions

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With skipfstabrepair

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With grubreinstallrepair

      If Not .Enabled

        .Enabled = True
        .Mouse = Mouse.Pointing
        grubreinstallrepairdisable.Enabled = True
        grubreinstallrepairdisable.Mouse = Mouse.Pointing

      Endif

    End With

  Else

    With autorepairoptions

      If Not .Enabled

        .Enabled = True
        .Mouse = Mouse.Pointing
        autorepairoptions_Click

      Endif

    End With

    With grubreinstallrepair

      If ppipe = 1

        If Exist(fsdir & "/" & cpoint & "_" & pname & "/usr/sbin/update-grub2") And Exist(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dpkg/info/grub-" & grub & ".list")

          If Not .Visible

            .Show
            grubreinstallrepairdisable.Hide

          Endif

        Else If .Visible

          .Hide
          grubreinstallrepairdisable.Show

        Endif

      Else If pname = ("Live image")

        If Exist("/usr/sbin/update-grub2") And Exist("/var/lib/dpkg/info/grub-" & grub & ".list")

          If Not .Visible

            .Show
            grubreinstallrepairdisable.Hide

          Endif

        Else If .Visible

          .Hide
          grubreinstallrepairdisable.Show

        Endif

      Endif

    End With

  Endif

End

Public Sub fullrepair_Click()

  systemrepair_Click

End

Public Sub grubrepair_Click()

  systemrepair_Click

End

Public Sub repairnext_Click()

  If systemrepair.Value

    dialog = 5

  Else If fullrepair.Value

    dialog = 6

  Else

    dialog = 41

  Endif

  dialogopen

End

Private Sub repair()

  Dim ofile As File
  Dim cline, srcdir, fstab1, fstab2, elist, usr, mntdev As String

  statusstart

  If systemrepair.Value

    prun = ("Repairing the system files")

  Else

    If fullrepair.Value Then prun = ("Repairing the full system") Else prun = ("Repairing the GRUB 2")

  Endif

  If grubrepair.Value

    wproc = Exec ["mount", "-B", "/dev", "/mnt/dev"]
    wprocwait
    wproc = Exec ["mount", "-B", "/dev/pts", "/mnt/dev/pts"]
    wprocwait
    wproc = Exec ["mount", "-B", "/proc", "/mnt/proc"]
    wprocwait
    wproc = Exec ["mount", "-B", "/sys", "/mnt/sys"]
    wprocwait
    If prun = Null Then Return

    If grubreinstallrepair.Text = "Auto"

      ofile = Open "/proc/self/mounts" For Input
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Like "* /mnt/boot *"

          mntdev = Left(cline, InStr(cline, " ") - 1)
          Break

        Else If cline Like "* /mnt *"

          mntdev = Left(cline, InStr(cline, " ") - 1)

        Endif

      Wend
      Close #ofile

      File.Save("/mnt/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & Left(mntdev, 8) & "\n")

    Else

      File.Save("/mnt/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & grubreinstallrepair.Text & "\n")

    Endif

    Chmod "/mnt/grubinst" To "rwxrwxr-x"

    If prun = Null Then Return
    wproc = Exec ["chroot", "/mnt", "/grubinst"]
    wprocwait

    If wproc.Value = 0 Then dialog = 32 Else dialog = 37

    Kill "/mnt/grubinst"

    wproc = Exec ["umount", "-l", "/mnt/dev/pts", "/mnt/dev", "/mnt/proc", "/mnt/sys"]
    wprocwait
    If prun = Null Then Return

  Else

    If pname = ("Live image")

      If Not IsDir("/.systembacklivepoint")

        Try Mkdir "/.systembacklivepoint"

        If Error

          Move "/.systembacklivepoint" To "/.systembacklivepoint_" & Int(Rnd(1000000000, 9999999999))
          Mkdir "/.systembacklivepoint"

        Endif

      Endif

      If prun = Null Then Return

      If Exist("/cdrom/casper/filesystem.squashfs")

        wproc = Exec ["mount", "-o", "loop", "/cdrom/casper/filesystem.squashfs", "/.systembacklivepoint"]

      Else If Exist("/lib/live/mount/medium/live/filesystem.squashfs")

        wproc = Exec ["mount", "-o", "loop", "/lib/live/mount/medium/live/filesystem.squashfs", "/.systembacklivepoint"]

      Else

        wproc = Exec ["mount", "-o", "loop", "/live/image/live/filesystem.squashfs", "/.systembacklivepoint"]

      Endif

      wprocwait
      If prun = Null Then Return

      srcdir = "/.systembacklivepoint"

    Else

      srcdir = fsdir & "/" & cpoint & "_" & pname

    Endif

    If autorepairoptions.Value

      If Exist("/mnt/etc/fstab")

        Exec ["sha1sum", "/mnt/etc/fstab"] To fstab1
        fstab1 = Left(fstab1, InStr(fstab1, " ") - 1)
        Exec ["sha1sum", srcdir & "/etc/fstab"] To fstab2
        fstab2 = Left(fstab2, InStr(fstab2, " ") - 1)

        If fstab1 <> fstab2

          If Exist("/tmp/sbrepairfstab") Then Kill "/tmp/sbrepairfstab"
          Copy "/mnt/etc/fstab" To "/tmp/sbrepairfstab"

        Endif

      Endif

    Else If skipfstabrepair.Value

      If Exist("/tmp/sbrepairfstab") Then Kill "/tmp/sbrepairfstab"
      Copy "/mnt/etc/fstab" To "/tmp/sbrepairfstab"

    Endif

    If prun = Null Then Return

    If Exist("/mnt/var/lib/dpkg/info/systemback.conffiles") And Exist("/mnt/var/lib/dpkg/info/systemback.list") And Exist("/mnt/var/lib/dpkg/info/systemback.md5sums") And Exist("/mnt/var/lib/dpkg/info/systemback.postinst") And Exist("/mnt/var/lib/dpkg/info/systemback.postrm") And Exist("/mnt/var/lib/dpkg/info/systemback.preinst") And Exist("/mnt/var/lib/dpkg/info/systemback.prerm") And Exist("/mnt/usr/bin/sbsync") And Exist("/mnt/usr/bin/systemback") And Exist("/mnt/usr/share/systemback/sbstart") And Exist("/mnt/usr/share/systemback/version") And Exist("/mnt/etc/sudoers.d/99_systemback") And Exist("/mnt/etc/xdg/autostart/sbschedule.desktop")

      wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete '" & srcdir & "'/ /mnt --include=/{bin,boot,cdrom,dev,etc,home,lib,lib32,lib64,mnt,opt,proc,run,root,sbin,selinux,srv,sys,tmp,usr,var,initrd*,vmlinuz*} --exclude={/*,/home/*,/proc/*,/run/*,/sys/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/root/*,/var/log/*,/var/tmp/*,/var/run/*,/etc/mtab,/etc/sudoers.d/99_systemback,/etc/xdg/autostart/sbschedule.desktop,/var/lib/udisks/mtab,/var/lib/dpkg/info/systemback*,/usr/bin/systemback*,/usr/bin/sbsync,/usr/bin/sbstart,/usr/share/systemback,/etc/systemback*,lost+found}"]

    Else

      wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete '" & srcdir & "'/ /mnt --include=/{bin,boot,cdrom,dev,etc,home,lib,lib32,lib64,mnt,opt,proc,run,root,sbin,selinux,srv,sys,tmp,usr,var,initrd*,vmlinuz*} --exclude={/*,/home/*,/proc/*,/run/*,/sys/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/root/*,/var/log/*,/var/tmp/*,/var/run/*,/etc/mtab,/var/lib/udisks/mtab,/etc/systemback*,lost+found}"]

    Endif

    wprocwait
    If prun = Null Then Return

    If pname = ("Live image")

      wproc = Exec ["sbsync", "-rlptgo", "/.systembacklivepoint/.systemback/", "/mnt"]
      wprocwait

    Endif

    If Exist("/tmp/sbrepairfstab") And If autorepairoptions.Value Or skipfstabrepair.Value

      Try Kill "/mnt/etc/fstab"
      Copy "/tmp/sbrepairfstab" To "/mnt/etc/fstab"
      Kill "/tmp/sbrepairfstab"

    Endif

    If prun = Null Then Return
    wproc = Exec ["sbsync", "-ax", "--delete", srcdir & "/media", "/mnt"]
    wprocwait
    If prun = Null Then Return
    wproc = Exec ["bash", "-c", "sbsync -rlptgo '" & srcdir & "'/var/log /mnt/var --include=*/ --exclude=*"]
    wprocwait
    If prun = Null Then Return

    If fullrepair.Value

      elist = "/" & rtmp & ",/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,/.Xauthority"

      ofile = Open srcdir & "/.excludes" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If Left(cline) = "." Then elist &= ",'/" & cline & "'"

      Wend
      Close #ofile

      For Each usr In Dir(srcdir & "/home", "*", gb.Directory)

        If IsDir("/mnt/home/" & usr)

          If prun = Null Then Return
          wproc = Exec ["bash", "-c", "sbsync -rptgoD --delete --min-size=8MB --link-dest=../ /mnt/home/" & usr & "/ /mnt/home/" & usr & "/" & rtmp & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgo --delete '" & srcdir & "'/home/" & usr & "/ /mnt/home/" & usr & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgom --link-dest=" & rtmp & "/ /mnt/home/" & usr & "/" & rtmp & "/ /mnt/home/" & usr]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["rm", "-rf", "/mnt/home/" & usr & "/" & rtmp]
          wprocwait

        Else

          If Exist("/mnt/home/" & usr) Then Move "/mnt/home/" & usr To "/mnt/home/" & usr & "_" & Int(Rnd(1000000000, 9999999999))

          If prun = Null Then Return
          wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete '" & srcdir & "'/home/" & usr & "/ /mnt/home/" & usr]
          wprocwait
          If prun = Null Then Return

          If Exist("/mnt/home/" & usr & "/.config/user-dirs.dirs")

            ofile = Open "/mnt/home/" & usr & "/.config/user-dirs.dirs" For Read
            While Not Eof(ofile)
              Line Input #ofile, cline

              If Left(cline) <> "#" And cline Like "*$HOME*" Then Try Mkdir "/mnt/home/" & usr & "/" & Left(Right(cline, - InStr(cline, "/")), -1)

            Wend
            Close #ofile

          Endif

        Endif

      Next

      If IsDir("/mnt/root")

        If prun = Null Then Return
        wproc = Exec ["bash", "-c", "sbsync -rptgoD --delete --min-size=8MB --link-dest=../ /mnt/root/ /mnt/root/" & rtmp & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgo --delete '" & srcdir & "'/root/ /mnt/root --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgom --link-dest=" & rtmp & "/ /mnt/root/" & rtmp & "/ /mnt/root"]
        wprocwait
        If prun = Null Then Return
        wproc = Exec ["rm", "-rf", "/mnt/root/" & rtmp]

      Else

        If prun = Null Then Return
        wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete '" & srcdir & "'/root/ /mnt/root --exclude={" & elist & "} --include=/.* --exclude=/*"]

      Endif

      wprocwait
      If prun = Null Then Return

    Endif

    If grubreinstallrepair.Visible

      If autorepairoptions.Value Or grubreinstallrepair.Text = "Auto"

        If prun = Null Then Return
        wproc = Exec ["mount", "-B", "/dev", "/mnt/dev"]
        wprocwait
        wproc = Exec ["mount", "-B", "/dev/pts", "/mnt/dev/pts"]
        wprocwait
        wproc = Exec ["mount", "-B", "/proc", "/mnt/proc"]
        wprocwait
        wproc = Exec ["mount", "-B", "/sys", "/mnt/sys"]
        wprocwait
        If prun = Null Then Return

        If fstab1 = fstab2

          File.Save("/mnt/grubinst", "#!/bin/bash\nupdate-grub\n")

        Else

          ofile = Open "/proc/self/mounts" For Input
          While Not Eof(ofile)
            Line Input #ofile, cline

            If cline Like "* /mnt/boot *"

              mntdev = Left(cline, InStr(cline, " ") - 1)
              Break

            Else If cline Like "* /mnt *"

              mntdev = Left(cline, InStr(cline, " ") - 1)

            Endif

          Wend
          Close #ofile

          File.Save("/mnt/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & Left(mntdev, 8) & "\n")

        Endif

      Else

        File.Save("/mnt/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & grubreinstallrepair.Text & "\n")

      Endif

      Chmod "/mnt/grubinst" To "rwxrwxr-x"

      If prun = Null Then Return
      wproc = Exec ["chroot", "/mnt", "/grubinst"]
      wprocwait
      If prun = Null Then Return

      If wproc.Value <> 0

        If fullrepair.Value Then dialog = 24 Else dialog = 11

      Endif

      Kill "/mnt/grubinst"

      If prun = Null Then Return
      wproc = Exec ["umount", "-l", "/mnt/dev/pts", "/mnt/dev", "/mnt/proc", "/mnt/sys"]
      wprocwait
      If prun = Null Then Return

    Endif

    prun = ("Emptying cache")
    wproc = Exec ["sync"]
    wprocwait
    File.Save("/proc/sys/vm/drop_caches", "3")

    If dialog = 5 Or dialog = 6 Or dialog = 41

      If ppipe = 1 And Exist(fsdir) And Access(fsdir, gb.Write) Then File.Save(fsdir & "/.sbschedule", Null)
      If fullrepair.Value Then dialog = 12 Else dialog = 13

    Endif

    If pname = ("Live image")

      wproc = Exec ["umount", "-l", "/.systembacklivepoint"]
      wprocwait

      Try Rmdir "/.systembacklivepoint"

    Endif

  Endif

  dialogopen

End

Public Sub skipfstabrepair_Click()

  If skipfstabrepair.Value And Not Exist("/mnt/etc/fstab") Then skipfstabrepair.Value = False

End

Public Sub skipfstabrestore_Click()

  If skipfstabrestore.Value And Not Exist("/etc/fstab") Then skipfstabrestore.Value = False

End

Public Sub partitionupdate_Click()

  Dim com As Process
  Dim ofile As File
  Dim out, cline, fsystem, uuid, dev, dsize As String
  Dim spc As Integer

  Inc Application.Busy

  If partitionsettings.Count <> 0

    partitionsettings.Clear
    pshadow.Clear

  Endif

  If repairpartition.Text <> Null Then repairpartition.Clear

  If grubinstallcopy.Text <> Null

    grubinstallcopy.Clear
    grubreinstallrestore.Clear
    grubreinstallrepair.Clear

  Endif

  grubinstallcopy.Add("Auto")
  grubreinstallrestore.Add("Auto")
  grubreinstallrepair.Add("Auto")
  grubinstallcopy.Add(("Disabled"))
  grubreinstallrestore.Add(("Disabled"))
  grubreinstallrepair.Add(("Disabled"))

  For Each dev In Dir("/dev", "[hs]d[a-z]", gb.Device).Sort()

    grubinstallcopy.Add("/dev/" & dev)
    grubreinstallrestore.Add("/dev/" & dev)
    grubreinstallrepair.Add("/dev/" & dev)

  Next

  For Each dev In Dir("/dev", "[hs]d[a-z][1-9]*", gb.Device).Sort()

    Exec ["blockdev", "--getsize64", "/dev/" & dev] To dsize
    dsize = Trim(dsize)

    If Val(dsize) >= 1048576

      partitionsettings.Add("/dev/" & dev, "/dev/" & dev)
      pshadow.Add("/dev/" & dev, "/dev/" & dev)

    Endif

    grubinstallcopy.Add("/dev/" & dev)
    grubreinstallrestore.Add("/dev/" & dev)
    grubreinstallrepair.Add("/dev/" & dev)

  Next

  With partitionsettings

    .MoveFirst

    While .Available

      Exec ["blkid", "-o", "value", "-s", "UUID", .Item[0]] To uuid
      uuid = Trim(uuid)

      If uuid = Null

        ofile = Open "/proc/self/mounts" For Input
        While Not Eof(ofile)
          Line Input #ofile, cline

          If cline Begins .Item[0] & " "

            spc = InStr(cline, " ")
            .Item[1] = Replace(Mid(cline, spc + 1, InStr(cline, " ", spc + 1) - spc - 1), "\\040", " ")
            Break

          Endif

        Wend
        Close #ofile

        fsystem = "?"

      Else

        ofile = Open "/proc/self/mounts" For Input
        While Not Eof(ofile)
          Line Input #ofile, cline

          If cline Begins .Item[0] & " " Or cline Begins "/dev/disk/by-uuid/" & uuid & " "

            spc = InStr(cline, " ")
            .Item[1] = Replace(Mid(cline, spc + 1, InStr(cline, " ", spc + 1) - spc - 1), "\\040", " ")
            Break

          Endif

        Wend
        Close #ofile

        If .Item[1] = Null

          com = Exec ["swapon", "-s"] For Read
          While Not Eof(com)
            Line Input #com, out

            If out Begins .Item[0] & " "

              .Item[1] = "SWAP"
              Break

            Endif

          Wend

        Endif

        Exec ["blkid", "-o", "value", "-s", "TYPE", .Item[0]] To fsystem
        fsystem = Trim(fsystem)

      Endif

      .Item[3] = fsystem
      pshadow[.Item[0]][2] = fsystem
      If .Item[1] = Null Then repairpartition.Add(.Item[0])
      .Item[4] = "-"

      .MoveNext

    Wend

  End With

  With mountpoint

    .Clear
    .Add(Null)
    .Add("/")
    .Add("/home")
    .Add("/boot")
    If grub = "efi-amd64" Then .Add("/boot/efi")
    .Add("/tmp")
    .Add("/usr")
    .Add("/var")
    .Add("/srv")
    .Add("/opt")
    .Add("/usr/local")
    .Add("SWAP")

  End With

  With copynext

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If mountpoint.Enabled

    mountpoint.Enabled = False

    With changepartition

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

  Endif

  With filesystem

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default
      format.Enabled = False
      format.Mouse = Mouse.Default

      With umount

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

  End With

  With userdatafilescopy

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  With repairmount

    If repairpartition.Length = 0

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    Else If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  Dec Application.Busy

End

Public Sub installnext_Click()

  Dim mnts As String

  With grubinstallcopy

    If ppipe = 1

      If Exist(fsdir & "/" & cpoint & "_" & pname & "/usr/sbin/update-grub2") And Exist(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dpkg/info/grub-" & grub & ".list")

        If Not .Visible

          .Show
          grubinstallcopydisable.Hide

        Endif

      Else If .Visible

        .Hide
        grubinstallcopydisable.Show

      Endif

    Else If Exist("/usr/sbin/update-grub2") And Exist("/var/lib/dpkg/info/grub-" & grub & ".list")

      If Not .Visible

        .Show
        grubinstallcopydisable.Hide

      Endif

    Else If .Visible

      .Hide
      grubinstallcopydisable.Show

    Endif

  End With

  If Not usersettingscopy.Visible

    usersettingscopy.Show
    userdatafilescopy.Hide

  Endif

  If partitionsettings.Key <> Null

    mnts = File.Load("/proc/self/mounts")

    If mnts Like "* /.sb{systemcopy,livesystemwrite}*"

      partitionupdate_Click

    Else

      With mountpoint

        If partitionsettings[partitionsettings.Key][1] = "/home" And .Enabled

          If .Index <> 0 Then .Index = 0
          .Enabled = False

        Endif

      End With

      With partitionsettings

        .MoveFirst

        While .Available

          If .Item[1] = "/home" And .Item[2] <> Null

            .Item[2] = Null
            pshadow[.Item[0]][1] = Null
            mountpoint.Add("/home")
            Break

          Endif

          .MoveNext

        Wend

      End With

    Endif

  Endif

  installpanel.Hide
  copypanel.Show
  copyback.SetFocus
  Form_Resize

End

Public Sub changepartition_Click()

  Dim com As Process
  Dim out As String
  Dim mindex As Byte = mountpoint.Find(mountpoint.Text)
  Dim isw As Boolean

  Inc Application.Busy

  With partitionsettings

    If partitionsettings[.Key][2] <> Null

      If partitionsettings[.Key][2] = "/"

        copynext.Enabled = False
        copynext.Mouse = Mouse.Default
        mountpoint.Add(partitionsettings[.Key][2])

      Else If partitionsettings[.Key][2] Like "/{home,boot,tmp,usr,var,srv,opt}" Or partitionsettings[.Key][2] Like "/{boot/efi,usr/local}"

        mountpoint.Add(partitionsettings[.Key][2])

      Endif

    Endif

    If partitionsettings[.Key][1] = Null

      If mountpoint.Text = "/boot/efi"

        partitionsettings[.Key][2] = mountpoint.Text
        pshadow[.Key][1] = mountpoint.Text
        partitionsettings[.Key][3] = "vfat"
        partitionsettings[.Key][4] = "x"

      Else If mountpoint.Text = "SWAP"

        partitionsettings[.Key][2] = mountpoint.Text
        pshadow[.Key][1] = mountpoint.Text
        partitionsettings[.Key][3] = "swap"

        com = Exec ["swapon", "-s"] For Read
        While Not Eof(com)
          Input #com, out

          If out Begins mountpoint.Text & " "

            isw = True
            Break

          Endif

        Wend

        If isw Then partitionsettings[.Key][4] = "-" Else partitionsettings[.Key][4] = "x"

      Else

        partitionsettings[.Key][2] = mountpoint.Text
        pshadow[.Key][1] = mountpoint.Text
        partitionsettings[.Key][3] = filesystem.Text

        If format.Value Then partitionsettings[.Key][4] = "x" Else partitionsettings[.Key][4] = "-"

        If mountpoint.Text = "/"

          copynext.Enabled = True
          copynext.Mouse = Mouse.Pointing

        Endif

      Endif

    Else

      partitionsettings[.Key][2] = mountpoint.Text

      pshadow[.Key][1] = mountpoint.Text
      userdatafilescopy.Enabled = False
      userdatafilescopy.Mouse = Mouse.Default

    Endif

  End With

  If mindex <> -1 And mountpoint.Text <> "SWAP" Then mountpoint.Remove(mindex)
  If mountpoint.Index = 0 Then mountpoint.Text = Null Else mountpoint.Index = 0
  Dec Application.Busy

End

Public Sub mountpoint_Change()

  Dim mpoint As String = mountpoint.Text
  Dim cdir As String = Replace(mpoint, "/", Null)
  Dim check As Boolean

  With partitionsettings

    If mpoint Like "{/boot/efi,SWAP}" Or partitionsettings[.Key][1] Like "{/home,SWAP}"

      With filesystem

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default
          format.Enabled = False
          format.Mouse = Mouse.Default

        Endif

      End With

    Else If Not filesystem.Enabled

      filesystem.Enabled = True
      filesystem.Mouse = Mouse.Pointing
      format.Enabled = True
      format.Mouse = Mouse.Pointing

    Endif

    If mpoint = Null Or mpoint = partitionsettings[.Key][2]

      With changepartition

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Else

      If partitionsettings[.Key][1] = "/home" And mpoint <> "/home"

        check = True

      Else If partitionsettings[.Key][1] = "SWAP" And mpoint <> "SWAP"

        check = True

      Else If mpoint <> "SWAP"

        With pshadow

          .MoveFirst

          While .Available

            If .Item[1] = mpoint

              check = True
              Break

            Endif

            .MoveNext

          Wend

        End With

      Endif

      If check

        With changepartition

          If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

      Else If mpoint = "/" Or mpoint Like "{/home,/boot,/tmp,/usr,/var,/srv,/opt,SWAP}" Or mpoint Like "/{boot/efi,usr/local}"

        With changepartition

          If Not .Enabled

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        End With

      Else

        With changepartition

          If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

          If mpoint Begins "/" And mpoint Not Like "*[ ']*" And mpoint Not Like "*\"*" And mpoint Not Like "*//*" And RInStr(mpoint, "/") <> Len(mpoint)

            Wait 0.3

            If mpoint = mountpoint.Text

              Try Mkdir tmp & "checkdir" & cdir

              If Not Error And mpoint = mountpoint.Text

                Rmdir tmp & "checkdir" & cdir
                .Enabled = True
                .Mouse = Mouse.Pointing

              Endif

            Endif

          Endif

        End With

      Endif

    Endif

  End With

End

Public Sub mountpoint_Click()

  mountpoint_Change

End

Public Sub mountpoint_KeyRelease()

  If Key.Code = Key.F5

    partitionupdate_Click

  Else If changepartition.Enabled And If Key.Code = Key.Enter Or Key.Code = Key.Return

    changepartition_Click

  Endif

End

Public Sub filesystem_Click()

  format_Click

End

Public Sub format_Click()

  If Not format.Value And pshadow[partitionsettings.Key][2] <> filesystem.Text Then format.Value = True

End

Public Sub umount_Click()

  Dim com As Process
  Dim out, mnts, uuid As String
  Dim scheck As Boolean

  Inc Application.Busy

  With partitionsettings

    If partitionsettings[.Key][1] = "SWAP"

      wproc = Exec ["swapoff", .Key]
      wprocwait

      com = Exec ["swapon", "-s"] For Read
      While Not Eof(com)
        Line Input #com, out

        If out Begins .Key & " "

          scheck = 1
          Break

        Endif

      Wend

    Else

      wproc = Exec ["umount", "-l", .Key]
      wprocwait
      wproc = Exec ["sync"]
      wprocwait

    Endif

    mnts = File.Load("/proc/self/mounts")

    If mnts Not Like "*" & .Key & " *" And scheck = 0

      partitionsettings[.Key][1] = Null

      .MoveFirst

      While .Available

        If .Item[1] <> Null And .Item[1] <> "SWAP"

          Exec ["blkid", "-o", "value", "-s", "UUID", .Item[0]] To uuid
          uuid = Trim(uuid)

          If uuid = Null

            If mnts Not Like "*" & .Item[0] & " *"

              wproc = Exec ["umount", "-l", .Item[0]]
              wprocwait

              .Item[1] = Null

            Endif

          Else If mnts Not Like "*" & .Item[0] & " *" And mnts Not Like "*/dev/disk/by-uuid/" & uuid & " *"

            wproc = Exec ["umount", "-l", .Item[0]]
            wprocwait

            .Item[1] = Null

          Endif

        Endif

        .MoveNext

      Wend

      umount.Enabled = False
      umount.Mouse = Mouse.Default
      mountpoint.Enabled = True
      filesystem.Enabled = True
      filesystem.Mouse = Mouse.Pointing
      format.Enabled = True
      format.Mouse = Mouse.Pointing

    Endif

  End With

  Dec Application.Busy

End

Public Sub partitionsettings_Select()

  Dim ofile As File
  Dim cline As String
  Dim mntcheck As Boolean

  With partitionsettings

    If partitionsettings[.Key][1] = Null

      If Not mountpoint.Enabled Then mountpoint.Enabled = True

      With filesystem

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing
          format.Enabled = True
          format.Mouse = Mouse.Pointing

        Endif

      End With

      With umount

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

      If mountpoint.Index = 0 Then mountpoint.Text = Null Else mountpoint.Index = 0

    Else If partitionsettings[.Key][1] = "SWAP"

      If Not mountpoint.Enabled Then mountpoint.Enabled = True

      With filesystem

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default
          format.Enabled = False
          format.Mouse = Mouse.Default

        Endif

      End With

      With umount

        If Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

      If mountpoint.Text <> "SWAP"

        If mountpoint.Index = 0 Then mountpoint.Text = Null Else mountpoint.Index = 0

      Else If partitionsettings[.Key][2] = "SWAP"

        With changepartition

          If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

      Else If Not changepartition.Enabled

        changepartition.Enabled = True
        changepartition.Mouse = Mouse.Pointing

      Endif

    Else If partitionsettings[.Key][1] = "/home" And Not usersettingscopy.Visible

      If Not mountpoint.Enabled Then mountpoint.Enabled = True

      With filesystem

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default
          format.Enabled = False
          format.Mouse = Mouse.Default

        Endif

      End With

      With umount

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

      With mountpoint

        If .Text <> "/home"

          If .Index = 0 Then .Text = Null Else .Index = 0

        Endif

      End With

    Else

      If mountpoint.Enabled Then mountpoint.Enabled = False

      With filesystem

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default
          format.Enabled = False
          format.Mouse = Mouse.Default

        Endif

      End With

      If mountpoint.Index = 0 Then mountpoint.Text = Null Else mountpoint.Index = 0

      If partitionsettings[.Key][1] Like "/{cdrom,live/image,lib/live/mount/medium}"

        mntcheck = True

      Else If Exist("/etc/fstab")

        ofile = Open "/etc/fstab" For Read
        While Not Eof(ofile)
          Line Input #ofile, cline

          If Replace(cline, "\\040", " ") Like "*[ \t]" & partitionsettings[.Key][1] & "[ \t]*" Or Replace(cline, "\\040", " ") Like "*[ \t]" & partitionsettings[.Key][1] & "/[ \t]*"

            mntcheck = True
            Break

          Endif

        Wend
        Close #ofile

      Endif

      With umount

        If Not mntcheck

          If Not .Enabled

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        Else If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

  End With

  If Not format.Value Then format.Value = True

End

Public Sub partitionsettings_KeyRelease()

  If Key.Code = Key.F5

    partitionupdate_Click

  Else If umount.Enabled And Key.Code = Key.Delete

    umount_Click

  Endif

End

Public Sub copynext_Click()

  If function1.Text = ("System copy") Then dialog = 14 Else dialog = 15
  dialogopen

End

Private Sub systemcopy()

  Dim ofile, wfile As File
  Dim usr As String = admins.Text
  Dim out, cline, chome, uid, macid, moptions, pass, mntdev, cdir, item, cval, ouname, opasswd, ohname, fdir, nconf, char, pfix As String
  Dim cter As Byte
  Dim cerr As Boolean

  statusstart

  If pname = ("Currently running system")

    prun = ("Checking files and directories")

    Try Mkdir "/media/" & btmp

    If Exist("/etc/fstab")

      For Each item In Dir("/media", "[^.]*", gb.Directory)

        ofile = Open "/etc/fstab" For Read
        While Not Eof(ofile)
          Line Input #ofile, cline

          If Replace(cline, "\\040", " ") Like "*[ \t]/media/" & item & "[ \t]*" Or Replace(cline, "\\040", " ") Like "*[ \t]/media/" & item & "/*"

            If prun = Null Then Return
            wproc = Exec ["bash", "-c", "sbsync -rlptgox /media/ /media/" & btmp & " --include=/" & item & " --exclude=/* --include=*/ --exclude=*"]
            wprocwait

          Endif

        Wend
        Close #ofile

      Next

    Endif

    If prun = Null Then Return

    Try Mkdir "/var/log/" & btmp

    For Each item In RDir("/var/log", "[^.]*")

      With Stat("/var/log/" & item)

        If .Type = gb.Directory

          Try Mkdir "/var/log/" & btmp & "/" & item

        Else If .Type = gb.File And Right(item, 2) <> ".0" And Right(item, 2) <> ".1" And Right(item, 3) <> ".gz" And Right(item, 4) <> ".old"

          Try File.Save("/var/log/" & btmp & "/" & item, Null)

        Endif

        Try Chmod "/var/log/" & btmp & "/" & item To .Auth
        Try Chown "/var/log/" & btmp & "/" & item To .User
        Try Chgrp "/var/log/" & btmp & "/" & item To .Group

      End With

    Next

    If prun = Null Then Return
    wproc = Exec ["bash", "-c", "sbsync -rlptgo --list-only / --include=/{bin,boot,cdrom,dev,etc,lib,lib32,lib64,media,media/" & btmp & ",mnt,opt,proc,run,sbin,selinux,srv,sys,tmp,usr,var,var/log/" & btmp & ",var/lib/ureadahead/debugfs,initrd*,vmlinuz*} --exclude={/*,/proc/*,/run/*,/sys/*,/media/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/var/lib/ureadahead/*,/var/log/*,/var/tmp/*,/var/cache/apt/*.bin,/var/cache/apt/*.bin.*,/var/cache/apt/archives/*.deb,/var/run/*,/etc/mtab,/var/lib/udisks/mtab,lost+found,*.dpkg-old,*~} | wc -l >/" & tmp & "systemsize"]
    wprocwait
    If prun = Null Then Return

    cssize = Trim(File.Load(tmp & "systemsize"))
    Kill tmp & "systemsize"

  Else

    If pname = ("Live image") Then cssize = Trim(File.Load("/.pointsize")) Else cssize = Trim(File.Load(fsdir & "/" & cpoint & "_" & pname & "/.pointsize"))

  Endif

  If userdatafilescopy.Visible Then prun = ("Copying the system") Else prun = ("Installing the system")

  With partitionsettings

    .MoveFirst

    While .Available

      If .Item[2] <> Null Then mountsort.Add(.Item[2])

      .MoveNext

    Wend

    mountsort.Sorted = True

    Try Mkdir "/.sbsystemcopy"

    If Exist(tmp & "copysize") Then Kill tmp & "copysize"
    cproc = Exec ["systemback", "copysize"] For Read

    .MoveFirst

    While .Available

      If mountsort.Count = 0

        Break

      Else If mountsort.Find(.Item[2]) = 0

        mountsort.Remove(0)

        If .Item[1] = "/home" And .Item[2] = "/home"

          chome = 1

        Else If .Item[2] <> Null

          If File.Load("/proc/self/mounts") Like "*" & .Item[0] & " *"

            If prun = Null Then Return
            wproc = Exec ["umount", "-l", .Item[0]]
            wprocwait
            If prun = Null Then Return
            wproc = Exec ["sync"]
            wprocwait
            If prun = Null Then Return

          Endif

          If .Item[4] = "x"

            If prun = Null Then Return

            Select Case .Item[3]

              Case "swap"

                wproc = Exec ["mkswap", .Item[0]]
                wprocwait

              Case Like "{j,reiser}fs"

                wproc = Exec ["mkfs." & .Item[3], "-q", .Item[0]]
                wprocwait

              Case "xfs"

                wproc = Exec ["mkfs." & .Item[3], "-f", .Item[0]]
                wprocwait

              Case "vfat"

                wproc = Exec ["parted", "-s", Left(.Item[0], 8), "set", Right(.Item[0], -8), "boot", "On"]
                wprocwait
                If prun = Null Then Return
                wproc = Exec ["mkfs." & .Item[3], "-F", "32", .Item[0]]
                wprocwait

              Case "btrfs"

                wproc = Exec ["mkfs." & .Item[3], "-f", .Item[0]]
                wprocwait

                If wproc.Value <> 0

                  If prun = Null Then Return
                  wproc = Exec ["mkfs." & .Item[3], .Item[0]]
                  wprocwait

                Endif

              Case Else

                wproc = Exec ["mkfs." & .Item[3], .Item[0]]
                wprocwait

            End Select

            If prun = Null Then Return

            If wproc.Value <> 0

              File.Save(tmp & "formaterror", .Item[0])
              dialog = 36

              cerr = True
              Break

            Endif

          Endif

          If .Item[2] <> "SWAP"

            If Not IsDir("/.sbsystemcopy" & .Item[2])

              fdir = "/.sbsystemcopy"

              For Each cdir In Split(.Item[2], "/")

                If cdir <> Null

                  fdir &= "/" & cdir

                  If Not IsDir(fdir)

                    Try Mkdir fdir

                    If Error

                      Move fdir To fdir & "_" & Int(Rnd(1000000000, 9999999999))
                      Mkdir fdir

                    Endif

                  Endif

                Endif

              Next

            Endif

            If prun = Null Then Return
            wproc = Exec ["mount", .Item[0], "/.sbsystemcopy" & .Item[2]]
            wprocwait
            If prun = Null Then Return

            If wproc.Value = 0

              If .Item[3] = "btrfs"

                If prun = Null Then Return
                wproc = Exec ["bash", "-c", "btrfs subvolume create /.sbsystemcopy" & .Item[2] & "/@" & Right(.Item[2], -1)]
                wprocwait
                If prun = Null Then Return
                wproc = Exec ["umount", "-l", .Item[0]]
                wprocwait
                If prun = Null Then Return
                wproc = Exec ["bash", "-c", "mount -o defaults,subvol=@" & Right(.Item[2], -1) & " " & .Item[0] & " /.sbsystemcopy" & .Item[2]]
                wprocwait
                If prun = Null Then Return

                If wproc.Value <> 0

                  File.Save(tmp & "mounterror", .Item[0])
                  dialog = 31

                  cerr = True
                  Break

                Endif

              Endif

            Else

              File.Save(tmp & "mounterror", .Item[0])
              dialog = 31

              cerr = True
              Break

            Endif

          Endif

        Endif

        .MoveFirst

      Else

        .MoveNext

      Endif

    Wend

  End With

  If cerr

    ofile = Open "/proc/self/mounts" For Input
    While Not Eof(ofile)
      Line Input #ofile, cline

      If cline Like "* /.sbsystemcopy*"

        If prun = Null Then Return
        wproc = Exec ["umount", "-l", Left(cline, InStr(cline, " ") - 1)]
        wprocwait
        If prun = Null Then Return

      Endif

    Wend
    Close #ofile

    Try Rmdir "/.sbsystemcopy"

  Else

    If Not Exist("/.sbsystemcopy/home") Then Mkdir "/.sbsystemcopy/home"

    If pname = ("Currently running system")

      With Stat("/home")

        Chmod "/.sbsystemcopy/home" To .Auth
        Chown "/.sbsystemcopy/home" To .User
        Chgrp "/.sbsystemcopy/home" To .Group

      End With

      If userdatafilescopy.Visible

        If chome = Null

          ofile = Open "/etc/passwd" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If cline Like "*:/home/*"

              usr = Left(cline, InStr(cline, ":") - 1)

              If IsDir("/home/" & usr)

                If prun = Null Then Return

                If userdatafilescopy.Value

                  wproc = Exec ["bash", "-c", "sbsync -rlptgo /home/" & usr & "/ /.sbsystemcopy/home/" & usr & " --exclude={/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,*~}"]

                Else

                  wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB /home/" & usr & "/ /.sbsystemcopy/home/" & usr & " --exclude={/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,*~} --include=/.* --exclude=/* ; sbsync -rlptgo /home/" & usr & "/ /.sbsystemcopy/home/" & usr & " --exclude=/.* --include=*/ --exclude=*"]

                Endif

                wprocwait
                If prun = Null Then Return

              Endif

            Endif

          Wend
          Close #ofile

        Endif

        If prun = Null Then Return

        If userdatafilescopy.Value

          wproc = Exec ["bash", "-c", "sbsync -rlptgo /root/ /.sbsystemcopy/root --exclude={/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,*~}"]

        Else

          wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB /root/ /.sbsystemcopy/root --exclude={/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,*~} --include=/.* --exclude=/* ; sbsync -rlptgo /root/ /.sbsystemcopy/root --exclude=/.* --include=*/ --exclude=*"]

        Endif

        wprocwait
        If prun = Null Then Return

      Else

        If Exist("/var/lib/dbus/machine-id")

          macid = Trim(File.Load("/var/lib/dbus/machine-id"))

        Endif

        If usr = Null

          ofile = Open "/etc/passwd" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If cline Like "*:x:10{00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15}:10*"

              usr = Left(cline, InStr(cline, ":") - 1)
              Break

            Endif

          Wend
          Close #ofile

        Endif

        If prun = Null Then Return

        If usersettingscopy.Value

          wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB /home/" & usr & "/ /.sbsystemcopy/home/" & username.Text & " --exclude={/.gvfs,/.cache/gvfs,/.gnupg,/.ssh,/.local/share/Trash/files/*,/.local/share/Trash/info/*,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "*,*~} --include=/.* --exclude=/* ; sbsync -rlptgo --max-size=8MB /root/ /.sbsystemcopy/root --exclude={/.gvfs,/.cache/gvfs,/.gnupg,/.ssh,/.local/share/Trash/files/*,/.local/share/Trash/info/*,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "*,*~} --include=/.* --exclude=/*"]

        Else

          wproc = Exec ["sbsync", "-rlptgo", "/etc/skel/", "/.sbsystemcopy/home/" & username.Text]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["sbsync", "-rlptgo", "/etc/skel/", "/.sbsystemcopy/root"]

        Endif

        wprocwait
        If prun = Null Then Return

        If Exist("/home/" & usr & "/.config/user-dirs.dirs")

          ofile = Open "/home/" & usr & "/.config/user-dirs.dirs" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If Left(cline) <> "#" And cline Like "*$HOME*"

              Try Mkdir "/.sbsystemcopy/home/" & username.Text & "/" & Left(Right(cline, - InStr(cline, "/")), -1)

            Endif

          Wend
          Close #ofile

        Endif

      Endif

      If prun = Null Then Return
      wproc = Exec ["bash", "-c", "sbsync -rlptgo / /.sbsystemcopy --include=/{bin,boot,cdrom,dev,etc,lib,lib32,lib64,media,media/" & btmp & ",mnt,opt,proc,run,sbin,selinux,srv,sys,tmp,usr,var,var/log/" & btmp & ",var/lib/ureadahead/debugfs,initrd*,vmlinuz*} --exclude={/*,/proc/*,/run/*,/sys/*,/media/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/var/lib/ureadahead/*,/var/log/*,/var/tmp/*,/var/cache/apt/*.bin,/var/cache/apt/*.bin.*,/var/cache/apt/archives/*.deb,/var/run/*,/etc/mtab,/var/lib/udisks/mtab,/etc/udev/rules.d/*-persistent-*.rules,$([ \"" & macid & "\" != \"\" ] && echo /var/lib/dbus/machine-id)," & macid & ",lost+found,*.dpkg-old,*~}"]
      wprocwait
      If prun = Null Then Return

      Exec ["rm", "-rf", "/media/" & btmp, "/var/log/" & btmp]

      If wproc.Value = 0

        If userdatafilescopy.Visible And stimer = "on" Then File.Save("/.sbsystemcopy/etc/systemback.conf", "storagedir=" & sdir & "\nliveworkdir=" & lwdir & "\npointsnumber=" & pnumber & "\ntimer=off\nschedule=" & sdys & ":" & shrs & ":" & smts & ":" & ssds & "\nsilentmode=" & smode & "\nwindowposition=" & wpos & "\n")

        For Each item In Dir("/.sbsystemcopy/media/" & btmp)

          Move "/.sbsystemcopy/media/" & btmp & "/" & item To "/.sbsystemcopy/media/" & item

        Next

        Rmdir "/.sbsystemcopy/media/" & btmp

        For Each item In Dir("/.sbsystemcopy/var/log/" & btmp)

          Move "/.sbsystemcopy/var/log/" & btmp & "/" & item To "/.sbsystemcopy/var/log/" & item

        Next

        Rmdir "/.sbsystemcopy/var/log/" & btmp

      Else

        cerr = True

      Endif

    Else If pname = ("Live image")

      If Not IsDir("/.systembacklivepoint")

        Try Mkdir "/.systembacklivepoint"

        If Error

          Move "/.systembacklivepoint" To "/.systembacklivepoint_" & Int(Rnd(1000000000, 9999999999))
          Mkdir "/.systembacklivepoint"

        Endif

      Endif

      If prun = Null Then Return

      If Exist("/cdrom/casper/filesystem.squashfs")

        wproc = Exec ["mount", "-o", "loop", "/cdrom/casper/filesystem.squashfs", "/.systembacklivepoint"]

      Else If Exist("/lib/live/mount/medium/live/filesystem.squashfs")

        wproc = Exec ["mount", "-o", "loop", "/lib/live/mount/medium/live/filesystem.squashfs", "/.systembacklivepoint"]

      Else

        wproc = Exec ["mount", "-o", "loop", "/live/image/live/filesystem.squashfs", "/.systembacklivepoint"]

      Endif

      wprocwait

      With Stat("/.systembacklivepoint/home")

        Chmod "/.sbsystemcopy/home" To .Auth
        Chown "/.sbsystemcopy/home" To .User
        Chgrp "/.sbsystemcopy/home" To .Group

      End With

      If userdatafilescopy.Visible

        If prun = Null Then Return

        If userdatafilescopy.Value

          wproc = Exec ["sbsync", "-rlptgo", "/.systembacklivepoint/home/", "/.sbsystemcopy/home"]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["sbsync", "-rlptgo", "/.systembacklivepoint/root/", "/.sbsystemcopy/root"]

        Else

          wproc = Exec ["bash", "-c", "sbsync -rlptgo /.systembacklivepoint/home/ /.sbsystemcopy/home --include=/*/.* --exclude=/*/* ; sbsync -rlptgo /.systembacklivepoint/home/ /.sbsystemcopy/home --exclude=/*/.* --include=*/ --exclude=* ; sbsync -rlptgo /.systembacklivepoint/root/ /.sbsystemcopy/root --include=/.* --exclude=/* ; sbsync -rlptgo /.systembacklivepoint/root/ /.sbsystemcopy/root --exclude=/.* --include=*/ --exclude=*"]

        Endif

        wprocwait
        If prun = Null Then Return

      Else

        If Exist("/.systembacklivepoint/var/lib/dbus/machine-id")

          macid = Trim(File.Load("/.systembacklivepoint/var/lib/dbus/machine-id"))

        Endif

        If usr = Null

          ofile = Open "/etc/passwd" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If cline Like "*:x:10{00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15}:10*"

              usr = Left(cline, InStr(cline, ":") - 1)
              Break

            Endif

          Wend
          Close #ofile

        Endif

        If prun = Null Then Return

        If usersettingscopy.Value

          wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB /.systembacklivepoint/home/" & usr & "/ /.sbsystemcopy/home/" & username.Text & " --exclude={/.gnupg,/.ssh,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "} --include=/.* --exclude=/* ; sbsync -rlptgo /.systembacklivepoint/root/ /.sbsystemcopy/root --exclude={/.gnupg,/.ssh,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "} --include=/.* --exclude=/*"]

        Else

          wproc = Exec ["sbsync", "-rlptgo", "/.systembacklivepoint/etc/skel/", "/.sbsystemcopy/home/" & username.Text]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["sbsync", "-rlptgo", "/.systembacklivepoint/etc/skel/", "/.sbsystemcopy/root"]

        Endif

        wprocwait
        If prun = Null Then Return

        If Exist("/.systembacklivepoint/home/" & usr & "/.config/user-dirs.dirs")

          ofile = Open "/.systembacklivepoint/home/" & usr & "/.config/user-dirs.dirs" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If Left(cline) <> "#" And cline Like "*$HOME*"

              Try Mkdir "/.sbsystemcopy/home/" & username.Text & "/" & Left(Right(cline, - InStr(cline, "/")), -1)

            Endif

          Wend
          Close #ofile

        Endif

      Endif

      If prun = Null Then Return
      wproc = Exec ["bash", "-c", "sbsync -rlptgo /.systembacklivepoint/ /.sbsystemcopy --exclude={/.systemback,/.excludes,/.pointsize,/home,/root,/etc/udev/rules.d/*-persistent-*.rules,$([ \"" & macid & "\" != \"\" ] && echo /var/lib/dbus/machine-id)," & macid & "}"]
      wprocwait
      If prun = Null Then Return

      If wproc.Value = 0

        If userdatafilescopy.Visible And File.Load("/.sbsystemcopy/etc/systemback.conf") Like "*timer=on*"

          ofile = Open "/.sbsystemcopy/etc/systemback.conf" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If cline = "timer=on" Then nconf &= "timer=off\n" Else nconf &= cline & "\n"

          Wend
          Close #ofile

          File.Save("/.sbsystemcopy/etc/systemback.conf", nconf)

        Endif

      Else

        cerr = True

      Endif

      If prun = Null Then Return
      wproc = Exec ["umount", "-l", "/.systembacklivepoint"]
      wprocwait
      If prun = Null Then Return

      Try Rmdir "/.systembacklivepoint"

    Else

      With Stat(fsdir & "/" & cpoint & "_" & pname & "/home")

        Chmod "/.sbsystemcopy/home" To .Auth
        Chown "/.sbsystemcopy/home" To .User
        Chgrp "/.sbsystemcopy/home" To .Group

      End With

      If userdatafilescopy.Visible

        For Each usr In Dir(fsdir & "/" & cpoint & "_" & pname & "/home", "*", gb.Directory)

          If IsDir("/home/" & usr)

            If prun = Null Then Return

            If userdatafilescopy.Value

              wproc = Exec ["bash", "-c", "sbsync -rlptgo /home/" & usr & "/ /.sbsystemcopy/home/" & usr & " --exclude={/.*,*~}"]

            Else

              wproc = Exec ["bash", "-c", "sbsync -rlptgo /home/" & usr & "/ /.sbsystemcopy/home/" & usr & " --exclude=/.* --include=*/ --exclude=*"]

            Endif

            wprocwait
            If prun = Null Then Return

          Else If Exist(fsdir & "/" & cpoint & "_" & pname & "/home/" & usr & "/.config/user-dirs.dirs")

            ofile = Open fsdir & "/" & cpoint & "_" & pname & "/home/" & usr & "/.config/user-dirs.dirs" For Read
            While Not Eof(ofile)
              Line Input #ofile, cline

              If Left(cline) <> "#" And cline Like "*$HOME*"

                Try Mkdir "/.sbsystemcopy/home/" & username.Text & "/" & Left(Right(cline, - InStr(cline, "/")), -1)

              Endif

            Wend
            Close #ofile

          Endif

        Next

        If prun = Null Then Return

        If userdatafilescopy.Value

          wproc = Exec ["bash", "-c", "sbsync -rlptgo /root/ /.sbsystemcopy/root --exclude={/.*,*~}"]

        Else

          wproc = Exec ["bash", "-c", "sbsync -rlptgo /root/ /.sbsystemcopy/root --exclude=/.* --include=*/ --exclude=*"]

        Endif

        wprocwait
        If prun = Null Then Return
        wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/home/", "/.sbsystemcopy/home"]
        wprocwait
        If prun = Null Then Return
        wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/root/", "/.sbsystemcopy/root"]
        wprocwait
        If prun = Null Then Return

      Else

        If Exist(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dbus/machine-id")

          macid = Trim(File.Load(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dbus/machine-id"))

        Endif

        If usr = Null

          ofile = Open "/etc/passwd" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If cline Like "*:x:10{00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15}:10*"

              usr = Left(cline, InStr(cline, ":") - 1)
              Break

            Endif

          Wend
          Close #ofile

        Endif

        If prun = Null Then Return

        If usersettingscopy.Value

          wproc = Exec ["bash", "-c", "sbsync -rlptgo '" & fsdir & "'/" & cpoint & "_" & pname & "/home/" & usr & "/ /.sbsystemcopy/home/" & username.Text & " --exclude={/.gnupg,/.ssh,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "} ; sbsync -rlptgo '" & fsdir & "'/" & cpoint & "_" & pname & "/root/ /.sbsystemcopy/root --exclude={/.gnupg,/.ssh,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "}"]

        Else

          wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/etc/skel/", "/.sbsystemcopy/home/" & username.Text]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/etc/skel/", "/.sbsystemcopy/root"]

        Endif

        wprocwait
        If prun = Null Then Return

        If Exist(fsdir & "/" & cpoint & "_" & pname & "/home/" & usr & "/.config/user-dirs.dirs")

          ofile = Open fsdir & "/" & cpoint & "_" & pname & "/home/" & usr & "/.config/user-dirs.dirs" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If Left(cline) <> "#" And cline Like "*$HOME*"

              Try Mkdir "/.sbsystemcopy/home/" & username.Text & "/" & Left(Right(cline, - InStr(cline, "/")), -1)

            Endif

          Wend
          Close #ofile

        Endif

      Endif

      If prun = Null Then Return
      wproc = Exec ["bash", "-c", "sbsync -rlptgo '" & fsdir & "'/" & cpoint & "_" & pname & "/ /.sbsystemcopy --exclude={/.excludes,/.pointsize,/home,/root,/etc/udev/rules.d/*-persistent-*.rules,$([ \"" & macid & "\" != \"\" ] && echo /var/lib/dbus/machine-id)," & macid & "}"]
      wprocwait
      If prun = Null Then Return

      If wproc.Value = 0

        If userdatafilescopy.Visible And File.Load("/.sbsystemcopy/etc/systemback.conf") Like "*timer=on*"

          ofile = Open "/.sbsystemcopy/etc/systemback.conf" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If cline = "timer=on" Then nconf &= "timer=off\n" Else nconf &= cline & "\n"

          Wend
          Close #ofile

          File.Save("/.sbsystemcopy/etc/systemback.conf", nconf)

        Endif

      Else

        cerr = True

      Endif

    Endif

    If Not cerr And usersettingscopy.Visible

      Try Kill "/.sbsystemcopy/etc/systemback.conf"
      Try Kill "/.sbsystemcopy/etc/systemback.excludes"

      ofile = Open "/.sbsystemcopy/etc/passwd" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Begins usr & ":"

          For Each cval In Split(cline, ":")

            cter = cter + 1

            Select Case cter

              Case 3

                uid = cval & ":"

              Case 4

                uid &= cval

              Case 5

                ouname = cval
                Break

            End Select

          Next

          Break

        Endif

      Wend
      Close #ofile

      ofile = Open "/.sbsystemcopy/etc/shadow" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Begins usr & ":"

          opasswd = Mid(cline, Len(usr) + 2, InStr(cline, ":", Len(usr) + 2) - Len(usr) - 2)
          Break

        Endif

      Wend
      Close #ofile

      If prun = Null Then Return

      While Len(pfix) < 16

        char = Mid(chars, Int(Rnd(1, 62)), 1)
        If Right(pfix) <> char Then pfix &= char

      Wend

      wproc = Exec ["bash", "-c", "chown -R " & uid & " /.sbsystemcopy/home/" & username.Text & " ; sed -i \"s+^" & usr & ":x:" & uid & ":" & ouname & ":/home/" & usr & "+" & username.Text & ":x:" & uid & ":" & fullname.Text & ",,,:/home/" & username.Text & "+g\" /.sbsystemcopy/etc/passwd ; sed -i 's+^" & usr & ":" & opasswd & "+" & username.Text & ":" & Crypt(password1.Text, "$6$" & pfix) & "+g' /.sbsystemcopy/etc/shadow"]
      wprocwait
      If prun = Null Then Return

      ofile = Open "/.sbsystemcopy/etc/shadow" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Begins "root:"

          opasswd = Mid(cline, 6, InStr(cline, ":", 6) - 6)
          Break

        Endif

      Wend
      Close #ofile

      If prun = Null Then Return

      If rootpassword1.Text <> Null

        pfix = Null

        While Len(pfix) < 16

          char = Mid(chars, Int(Rnd(1, 62)), 1)
          If Right(pfix) <> char Then pfix &= char

        Wend

        wproc = Exec ["sed", "-i", "s+^root:" & opasswd & "+root:" & Crypt(rootpassword1.Text, "$6$" & pfix) & "+g", "/.sbsystemcopy/etc/shadow"]

      Else

        wproc = Exec ["sed", "-i", "s+^root:" & opasswd & "+root:!+g", "/.sbsystemcopy/etc/shadow"]

      Endif

      wprocwait
      If prun = Null Then Return

      ohname = Trim(File.Load("/.sbsystemcopy/etc/hostname"))

      File.Save("/.sbsystemcopy/etc/hostname", hostname.Text & "\n")

      wproc = Exec ["bash", "-c", "sed -i -e s+^" & usr & ":+" & username.Text & ":+g -e s+:" & usr & "$+:" & username.Text & "+g -e s+:" & usr & ",+:" & username.Text & ",+g -e s+," & usr & ",+," & username.Text & ",+g -e s+," & usr & "$+," & username.Text & "+g /.sbsystemcopy/etc/g{roup,shadow} ; sed -i -e s+\\t" & ohname & "\\t+\\t" & hostname.Text & "\\t+g -e ':a;N;$!ba;s+\\t" & ohname & "\\n+\\t" & hostname.Text & "\\n+g' /.sbsystemcopy/etc/hosts"]
      wprocwait
      If prun = Null Then Return

      If Exist("/.sbsystemcopy/etc/subuid") And Exist("/.sbsystemcopy/etc/subgid")

        wproc = Exec ["bash", "-c", "sed -i -e s+^" & usr & ":+" & username.Text & ":+g /.sbsystemcopy/etc/sub{u,g}id"]
        wprocwait
        If prun = Null Then Return

      Endif

      File.Save("/.sbsystemcopy/deluser", "#!/bin/bash\nfor rmuser in $(grep :\\$6\\$* /etc/shadow | cut -d : -f 1)\ndo [ ${rmuser} != " & username.Text & " -a ${rmuser} != root ] && userdel ${rmuser}\ndone\n")
      Chmod "/.sbsystemcopy/deluser" To "rwxrwxr-x"

      wproc = Exec ["chroot", "/.sbsystemcopy", "/deluser"]
      wprocwait
      If prun = Null Then Return

      Kill "/.sbsystemcopy/deluser"

    Endif

    If Dfree("/.sbsystemcopy") > 104857600 And Dfree("/.sbsystemcopy/home") > 104857600 And Dfree("/.sbsystemcopy/boot") > 52428800

      If Not cerr

        If File.Load("/proc/cmdline") Like "*noxconf*"

          Try Kill "/.sbsystemcopy/etc/X11/xorg.conf"

        Endif

        File.Save("/.sbsystemcopy/etc/fstab", "# /etc/fstab: static file system information.\n#\n# Use 'blkid' to print the universally unique identifier for a\n# device; this may be used with UUID= as a more robust way to name devices\n# that works even if disks are added and removed. See fstab(5).\n#\n# <file system> <mount point>   <type>  <options>       <dump>  <pass>\n")

        With partitionsettings

          .MoveFirst

          While .Available

            If .Item[2] <> Null

              If .Item[2] = "/"

                If .Item[3] Like "{ext4,ext3,ext2,jfs,xfs}"

                  moptions = "defaults,errors=remount-ro"

                Else

                  If .Item[3] = "reiserfs" Then moptions = "notail" Else moptions = "defaults,subvol=@"

                Endif

                pass = 1

              Else

                If .Item[3] = "reiserfs"

                  moptions = "notail"

                Else

                  If .Item[3] = "btrfs" Then moptions = "defaults,subvol=@" & Right(.Item[2], -1) Else moptions = "defaults"

                Endif

                pass = 2

              Endif

              If .Item[1] = "/home" And .Item[2] = "/home"

                ofile = Open "/etc/fstab" For Read
                While Not Eof(ofile)
                  Line Input #ofile, cline

                  If cline Like "*[ \t]/home[ \t]*" Or cline Like "*[ \t]/home/[ \t]*" Then Break

                Wend
                Close #ofile

                wfile = Open "/.sbsystemcopy/etc/fstab" For Write Append
                Print #wfile, "# /home\n" & cline
                Close #wfile

              Else If .Item[2] = "SWAP"

                Exec ["blkid", "-o", "value", "-s", "UUID", .Item[0]] To out
                out = Trim(out)

                wfile = Open "/.sbsystemcopy/etc/fstab" For Write Append
                Print #wfile, "# swap\nUUID=" & out & "   none   swap   sw   0   0"
                Close #wfile

              Else

                Exec ["blkid", "-o", "value", "-s", "UUID", .Item[0]] To out
                out = Trim(out)

                wfile = Open "/.sbsystemcopy/etc/fstab" For Write Append
                Print #wfile, "# " & .Item[2] & "\nUUID=" & out & "   " & .Item[2] & "   " & .Item[3] & "   " & moptions & "   0   " & pass
                Close #wfile

              Endif

            Endif

            .MoveNext

          Wend

        End With

        If Exist("/etc/fstab")

          If File.Load("/etc/fstab") Like "*/dev/{cdrom,sr}*"

            wfile = Open "/.sbsystemcopy/etc/fstab" For Write Append
            Print #wfile, "# cdrom"

            ofile = Open "/etc/fstab" For Read
            While Not Eof(ofile)
              Line Input #ofile, cline

              If cline Like "/dev/{cdrom,sr}*" Then Print #wfile, cline

            Wend
            Close #wfile

          Endif

          If File.Load("/etc/fstab") Like "*/dev/fd*"

            wfile = Open "/.sbsystemcopy/etc/fstab" For Write Append
            Print #wfile, "# floppy"

            ofile = Open "/etc/fstab" For Read
            While Not Eof(ofile)
              Line Input #ofile, cline

              If cline Begins "/dev/fd" Then Print #wfile, cline

            Wend
            Close #wfile

          Endif

        Endif

        If grubinstallcopy.Visible And grubinstallcopy.Text <> ("Disabled")

          If prun = Null Then Return
          wproc = Exec ["mount", "-B", "/dev", "/.sbsystemcopy/dev"]
          wprocwait
          wproc = Exec ["mount", "-B", "/dev/pts", "/.sbsystemcopy/dev/pts"]
          wprocwait
          wproc = Exec ["mount", "-B", "/proc", "/.sbsystemcopy/proc"]
          wprocwait
          wproc = Exec ["mount", "-B", "/sys", "/.sbsystemcopy/sys"]
          wprocwait
          If prun = Null Then Return

          If grubinstallcopy.Text = "Auto"

            mntdev = Null

            ofile = Open "/proc/self/mounts" For Input
            While Not Eof(ofile)
              Line Input #ofile, cline

              If cline Like "* /.sbsystemcopy/boot *"

                mntdev = Left(cline, InStr(cline, " ") - 1)
                Break

              Else If cline Like "* /.sbsystemcopy *"

                mntdev = Left(cline, InStr(cline, " ") - 1)

              Endif

            Wend
            Close #ofile

            File.Save("/.sbsystemcopy/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & Left(mntdev, 8) & "\n")

          Else

            File.Save("/.sbsystemcopy/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & grubinstallcopy.Text & "\n")

          Endif

          Chmod "/.sbsystemcopy/grubinst" To "rwxrwxr-x"

          If prun = Null Then Return
          wproc = Exec ["chroot", "/.sbsystemcopy", "/grubinst"]
          wprocwait
          If prun = Null Then Return

          If wproc.Value <> 0

            If userdatafilescopy.Visible Then dialog = 22 Else dialog = 34

          Endif

          Kill "/.sbsystemcopy/grubinst"

          wproc = Exec ["umount", "-l", "/.sbsystemcopy/dev/pts", "/.sbsystemcopy/dev", "/.sbsystemcopy/proc", "/.sbsystemcopy/sys"]
          wprocwait
          If prun = Null Then Return

        Endif

      Else

        If userdatafilescopy.Visible Then dialog = 39 Else dialog = 40

      Endif

    Else

      If userdatafilescopy.Visible Then dialog = 21 Else dialog = 35

    Endif

    prun = ("Emptying cache")

    ofile = Open "/proc/self/mounts" For Input
    While Not Eof(ofile)
      Line Input #ofile, cline

      If cline Like "* /.sbsystemcopy*"

        wproc = Exec ["umount", "-l", Left(cline, InStr(cline, " ") - 1)]
        wprocwait

      Endif

    Wend
    Close #ofile

    Try Rmdir "/.sbsystemcopy"

    wproc = Exec ["sync"]
    wprocwait

    File.Save("/proc/sys/vm/drop_caches", "3")

    If Not cerr

      If userdatafilescopy.Visible Then dialog = 25 Else dialog = 33

    Endif

  Endif

  dialogopen

End

Private Sub windowmove()

  Dim wmovex, wmovey As Short

  With systembackgui

    If .W <> nwidth Or .H <> nheight

      wmovex = .X + (.W - nwidth) / 2
      If wmovex < 0 Then wmovex = 0
      wmovey = .Y + (.H - nheight) / 2
      If wmovey < 0 Then wmovey = 0
      .Resize(1, 1)

      Wait 0.15

      .Move(wmovex, wmovey, nwidth, nheight)

    Endif

  End With

End

Public Sub partitionupdate2_Click()

  Dim ofile As File
  Dim cline As String

  Inc Application.Busy

  ofile = Open "/proc/self/mounts" For Input
  While Not Eof(ofile)
    Line Input #ofile, cline

    If cline Like "* /mnt/*" Or cline Like "* /mnt *"

      wproc = Exec ["umount", "-l", Left(cline, InStr(cline, " ") - 1)]
      wprocwait

    Endif

  Wend
  Close #ofile

  wproc = Exec ["sync"]
  wprocwait

  With repairmountpoint

    .Clear
    .Text = "/mnt"
    .Add("/mnt")
    .Add("/mnt/home")
    .Add("/mnt/boot")
    If grub = "efi-amd64" Then .Add("/mnt/boot/efi")
    .Add("/mnt/usr")
    .Add("/mnt/var")
    .Add("/mnt/opt")
    .Add("/mnt/usr/local")

  End With

  systemrepair_Click
  Dec Application.Busy
  partitionupdate_Click

End

Public Sub repairmount_Click()

  Dim item, path As String
  Dim mindex As Byte = repairmountpoint.Find(repairmountpoint.Text)

  Inc Application.Busy

  For Each item In Split(Right(repairmountpoint.Text, -5), "/")

    path = path & "/" & item

    If Not IsDir("/mnt" & path)

      If Exist("/mnt" & path) Then Move "/mnt" & path To "/mnt" & path & "_" & Int(Rnd(1000000000, 9999999999))
      Mkdir "/mnt" & path

    Endif

  Next

  wproc = Exec ["mount", repairpartition.Text, repairmountpoint.Text]
  wprocwait

  If wproc.Value = 0

    partitionupdate_Click

    If mindex <> -1 Then repairmountpoint.Remove(mindex)
    repairmountpoint.Text = Null

  Else

    With repairmount

      .Text = Null
      .Picture = Picture["error.png"]

      Wait 0.5

      .Picture = Null
      .Text = ("Mount")

    End With

  Endif

  If grubrepair.Value Then systemrepair_Click
  Dec Application.Busy

End

Public Sub repairmountpoint_Change()

  Dim rmpoint As String = repairmountpoint.Text
  Dim cdir As String = Replace(rmpoint, "/", Null)
  Dim mnts As String = File.Load("/proc/self/mounts")

  With repairmount

    Select Case True

      Case rmpoint = Null Or repairpartition.Text = Null

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      Case mnts Not Like "* /mnt *" And rmpoint <> "/mnt"

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      Case mnts Not Like "* " & rmpoint & "[ /]*"

        If rmpoint = "/mnt" Or rmpoint Like "/mnt/{home,boot,usr,var,opt}" Or rmpoint Like "/mnt/{boot/efi,usr/local}"

          If Not .Enabled

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        Else

          If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

          If rmpoint Begins "/" And rmpoint Not Like "*[ ']*" And rmpoint Not Like "*\"*" And rmpoint Not Like "*//*" And RInStr(rmpoint, "/") <> Len(rmpoint)

            Wait 0.3

            If rmpoint = repairmountpoint.Text

              Try Mkdir tmp & "checkdir" & cdir

              If Not Error And rmpoint = repairmountpoint.Text

                Rmdir tmp & "checkdir" & cdir
                .Enabled = True
                .Mouse = Mouse.Pointing

              Endif

            Endif

          Endif

        Endif

      Case .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

    End Select

  End With

End

Public Sub repairmountpoint_Click()

  repairmountpoint_Change

End

Public Sub repairmountpoint_KeyRelease()

  If Key.Code = Key.F5

    partitionupdate2_Click

  Else If repairmount.Enabled And If Key.Code = Key.Enter Or Key.Code = Key.Return

    repairmount_Click

  Endif

End

Public Sub liveworkdirbutton_Click()

  dirrefresh_Click
  If textoutputwindow.Visible Then textoutputwindow.Hide
  livecreatepanel.Hide
  choosepanel.Show
  function1.Text = ("Working directory")
  dirchooseok.SetFocus
  nwidth = 642
  nheight = 481
  windowmove

End

Public Sub livedelete_Click()

  Dim item As String

  Inc Application.Busy
  Try Kill lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".sblive"
  Try Kill lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".iso"

  livelist.Clear

  livedelete.Enabled = False
  livedelete.Mouse = Mouse.Default

  With liveconvert

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  With livewritestart

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If IsDir(lwdir)

    For Each item In Dir(lwdir, "*.sblive", gb.File)

      With Stat(lwdir & "/" & item)

        If Len(item) > 7 And item Not Like "* *" And .Size > 0 And .Type <> gb.Link

          If Exist(lwdir & "/" & Left(item, -7) & ".iso")

            With Stat(lwdir & "/" & Left(item, -7) & ".iso")

              If .Size > 0 And .Type <> gb.Link

                livelist.Add(Left(item, -7) & " (" & Round(.Size / 1024 / 1024 / 1024, -2) & " GiB, sblive+iso)")

              Else

                livelist.Add(Left(item, -7) & " (" & Round(.Size / 1024 / 1024 / 1024, -2) & " GiB, sblive)")

              Endif

            End With

          Else

            livelist.Add(Left(item, -7) & " (" & Round(.Size / 1024 / 1024 / 1024, -2) & " GiB, sblive)")

          Endif

        Endif

      End With

    Next

  Endif

  Dec Application.Busy

End

Public Sub livename_Change()

  Dim out As String
  Dim iname As String = livename.Text

  If iname <> piname

    piname = iname

    If livenamepipe.Visible Then livenamepipe.Hide

    With livecreatenew

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    If livename.Text = "auto"

      livename.Font = Font["Italic"]
      If livenameerror.Visible Then livenameerror.Hide

    Else

      livename.Font = Font[Null]

      If iname <> Null And iname Not Like "*[ ']*" And iname Not Like "*\"*" And iname Not Like "*.[iI][sS][oO]"

        Wait 0.3

        If iname = livename.Text

          Exec ["bash", "-c", "echo -n '" & iname & "' | wc -c"] To out

          If Val(Trim(out)) < 33

            Try File.Save(tmp & iname, Null)

            If Error

              If Not livenameerror.Visible Then livenameerror.Show

            Else

              If iname = livename.Text

                If livenameerror.Visible Then livenameerror.Hide
                livenamepipe.Show

              Endif

              Kill tmp & livename.Text

            Endif

          Else If Not livenameerror.Visible

            livenameerror.Show

          Endif

        Endif

      Else If Not livenameerror.Visible

        livenameerror.Show

      Endif

    Endif

  Endif

End

Public Sub additem_Click()

  Dim wfile As File

  Inc Application.Busy
  additem.Enabled = False
  additem.Mouse = Mouse.Default

  With itemslist

    wfile = Open "/etc/systemback.excludes" For Write Append
    Print #wfile, .Key
    Close #wfile

    excludedlist.Add(.Key)
    .Remove(.Key)
    If .Count <> 0 Then .UnselectAll

  End With

  Dec Application.Busy

End

Public Sub removeitem_Click()

  Dim ofile As File
  Dim cline, usr, item, sitem, clist As String

  Inc Application.Busy
  removeitem.Enabled = False
  removeitem.Mouse = Mouse.Default

  ofile = Open "/etc/systemback.excludes" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If cline <> excludedlist.Text Then clist &= cline & "\n"

  Wend
  Close #ofile

  File.Save("/etc/systemback.excludes", clist)
  excludedlist.Remove((excludedlist.Find(excludedlist.Text)))

  If itemslist.Count <> 0 Then itemslist.Clear

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If cline Like "*:/home/*"

      usr = Left(cline, InStr(cline, ":") - 1)

      If IsDir("/home/" & usr)

        For Each item In Dir("/home/" & usr)

          If Left(item) = "." And pointexclude.Value Or If Left(item) <> "." And liveexclude.Value

            If excludedlist.Find(item) = -1 And item Not Like ".{gvfs,Xauthority}"

              If Not itemslist.Exist(item)

                If Access("/home/" & usr & "/" & item, gb.Read)

                  If Stat("/home/" & usr & "/" & item).Type = gb.Directory

                    itemslist.Add(item, item, Picture["dir.png"])

                    For Each sitem In Dir("/home/" & usr & "/" & item)

                      If excludedlist.Find(item & "/" & sitem) = -1 And item & "/" & sitem <> ".cache/gvfs" Then itemslist.Add(item & "/" & sitem, sitem,, item)

                    Next

                  Else

                    itemslist.Add(item, item)

                  Endif

                Else

                  itemslist.Add(item, item)

                Endif

              Else If Access("/home/" & usr & "/" & item, gb.Read)

                If Stat("/home/" & usr & "/" & item).Type = gb.Directory

                  If itemslist[item].Picture = Null Then itemslist[item].Picture = Picture["dir.png"]

                  For Each sitem In Dir("/home/" & usr & "/" & item)

                    If excludedlist.Find(item & "/" & sitem) = -1 And item & "/" & sitem <> ".cache/gvfs" And Not itemslist.Exist(item & "/" & sitem) Then itemslist.Add(item & "/" & sitem, sitem,, item)

                  Next

                Endif

              Endif

            Endif

          Endif

        Next

      Endif

    Endif

  Wend
  Close #ofile

  For Each item In Dir("/root")

    If Left(item) = "." And pointexclude.Value Or If Left(item) <> "." And liveexclude.Value

      If excludedlist.Find(item) = -1 And item Not Like ".{gvfs,Xauthority}"

        If Not itemslist.Exist(item)

          If Stat("/root/" & item).Type = gb.Directory

            itemslist.Add(item, item, Picture["dir.png"])

            For Each sitem In Dir("/root/" & item)

              If excludedlist.Find(item & "/" & sitem) = -1 And item & "/" & sitem <> ".cache/gvfs" Then itemslist.Add(item & "/" & sitem, sitem,, item)

            Next

          Else

            itemslist.Add(item, item)

          Endif

        Else If Stat("/root/" & item).Type = gb.Directory

          If itemslist[item].Picture = Null Then itemslist[item].Picture = Picture["dir.png"]

          For Each sitem In Dir("/root/" & item)

            If excludedlist.Find(item & "/" & sitem) = -1 And item & "/" & sitem <> ".cache/gvfs" And Not itemslist.Exist(item & "/" & sitem) Then itemslist.Add(item & "/" & sitem, sitem,, item)

          Next

        Endif

      Endif

    Endif

  Next

  If excludedlist.Count <> 0 Then excludedlist.UnselectAll
  Dec Application.Busy

End

Public Sub itemslist_Select()

  With additem

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

      With removeitem

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

  End With

  If excludedlist.Text <> Null Then excludedlist.UnselectAll

End

Public Sub excludedlist_Select()

  With removeitem

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

      With additem

        If .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

  End With

  If itemslist.Text <> Null Then itemslist.UnselectAll

End

Public Sub interrupt_Click()

  prun = Null

  If wproc

    If wproc.State = Process.Running Then wproc.Kill

  Endif

  If cproc

    If cproc.State = Process.Running Then cproc.Kill

  Endif

  If sstart

    File.Save(fsdir & "/.sbschedule", Null)
    systembackgui.Close

  Else

    If pointpipe1.Value Then pointpipe1.Value = False
    If pointpipe2.Value Then pointpipe2.Value = False
    If pointpipe3.Value Then pointpipe3.Value = False
    If pointpipe4.Value Then pointpipe4.Value = False
    If pointpipe5.Value Then pointpipe5.Value = False
    If pointpipe6.Value Then pointpipe6.Value = False
    If pointpipe7.Value Then pointpipe7.Value = False
    If pointpipe8.Value Then pointpipe8.Value = False
    If pointpipe9.Value Then pointpipe9.Value = False
    If pointpipe10.Value Then pointpipe10.Value = False
    If pointpipe11.Value Then pointpipe11.Value = False
    If pointpipe12.Value Then pointpipe12.Value = False
    If pointpipe13.Value Then pointpipe13.Value = False
    If pointpipe14.Value Then pointpipe14.Value = False
    If pointpipe15.Value Then pointpipe15.Value = False
    statuspanel.Hide

    If livecreatepanel.Visible

      livecreateback.SetFocus

    Else

      If Not systembackpanel.Visible

        systembackpanel.Show
        function1.Text = "Systemback"

        If restorepanel.Visible

          restorepanel.Hide

        Else If copypanel.Visible

          copypanel.Hide

        Else If repairpanel.Visible

          repairpanel.Hide

        Endif

      Endif

      If functionmenunext.Enabled Then functionmenunext.SetFocus Else functionmenuback.SetFocus

    Endif

    mainpanel.Show
    nwidth = 698
    nheight = 465
    windowmove

  Endif

End

Public Sub password1_Change()

  If passwordpipe.Visible Then passwordpipe.Hide

  With installnext

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If password1.Length = 0

    If password2.Length <> 0 Then password2.Text = Null
    If password2.Enabled Then password2.Enabled = False
    If passworderror.Visible Then passworderror.Hide

  Else

    If Not password2.Enabled Then password2.Enabled = True

    If password2.Length = 0

      If passworderror.Visible Then passworderror.Hide

    Else If password1.Text = password2.Text

      If passworderror.Visible Then passworderror.Hide
      passwordpipe.Show

    Else If Not passworderror.Visible

      passworderror.Show

    Endif

  Endif

End

Public Sub password1_KeyRelease()

  If password2.Enabled And If Key.Code = Key.Enter Or Key.Code = Key.Return Then password2.SetFocus

End

Public Sub password2_Change()

  password1_Change

End

Public Sub password2_KeyRelease()

  If passwordpipe.Visible And If Key.Code = Key.Enter Or Key.Code = Key.Return Then rootpassword1.SetFocus

End

Public Sub rootpassword1_Change()

  If rootpasswordpipe.Visible Then rootpasswordpipe.Hide

  With installnext

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If rootpassword1.Length = 0

    If rootpassword2.Length <> 0 Then rootpassword2.Text = Null
    If rootpassword2.Enabled Then rootpassword2.Enabled = False
    If rootpassworderror.Visible Then rootpassworderror.Hide

  Else

    If Not rootpassword2.Enabled Then rootpassword2.Enabled = True

    If rootpassword2.Length = 0

      If rootpassworderror.Visible Then rootpassworderror.Hide

    Else If rootpassword1.Text = rootpassword2.Text

      If rootpassworderror.Visible Then rootpassworderror.Hide
      rootpasswordpipe.Show

    Else If Not rootpassworderror.Visible

      rootpassworderror.Show

    Endif

  Endif

End

Public Sub rootpassword1_KeyRelease()

  If rootpassword2.Enabled And If Key.Code = Key.Enter Or Key.Code = Key.Return Then rootpassword2.SetFocus

End

Public Sub rootpassword2_Change()

  rootpassword1_Change

End

Public Sub rootpassword2_KeyRelease()

  If rootpasswordpipe.Visible And If Key.Code = Key.Enter Or Key.Code = Key.Return Then hostname.SetFocus

End

Public Sub fullname_Change()

  If fullname.Length = 0

    If fullnamepipe.Visible

      fullnamepipe.Hide

    Else If fullnameerror.Visible

      fullnameerror.Hide

    Endif

    With installnext

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

  Else If fullname.Text Begins " " Or fullname.Text Ends " " Or InStr(fullname.Text, "  ") <> 0 Or fullname.Text Like "*[:#,']*" Or fullname.Text Like "*\"*"

    If Not fullnameerror.Visible

      If fullnamepipe.Visible Then fullnamepipe.Hide
      fullnameerror.Show

    Endif

    If installnext.Enabled

      installnext.Enabled = False
      installnext.Mouse = Mouse.Default

    Endif

  Else If Not fullnamepipe.Visible

    If fullnameerror.Visible Then fullnameerror.Hide
    fullnamepipe.Show

  Endif

End

Public Sub fullname_KeyRelease()

  If fullnamepipe.Visible And If Key.Code = Key.Enter Or Key.Code = Key.Return Then username.SetFocus

End

Public Sub username_Change()

  Dim uname As String = username.Text

  If uname <> puname

    puname = uname

    If usernamepipe.Visible Then usernamepipe.Hide

    With installnext

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    If uname = Null

      If usernameerror.Visible Then usernameerror.Hide

    Else If uname Like "*[ :#,']*" Or uname Like "*\"*"

      If Not usernameerror.Visible Then usernameerror.Show

    Else

      Wait 0.3

      If uname = username.Text

        wproc = Exec ["useradd", uname]
        wprocwait

        If wproc.Value = 0

          Exec ["userdel", uname]

          If uname = username.Text

            If usernameerror.Visible Then usernameerror.Hide
            usernamepipe.Show

          Endif

        Else If wproc.Value = 9 And uname = username.Text

          If usernameerror.Visible Then usernameerror.Hide
          usernamepipe.Show

        Else If uname = username.Text And Not usernameerror.Visible

          usernameerror.Show

        Endif

      Endif

    Endif

  Endif

End

Public Sub username_KeyRelease()

  If usernamepipe.Visible And If Key.Code = Key.Enter Or Key.Code = Key.Return Then password1.SetFocus

End

Public Sub hostname_Change()

  Dim chname As String
  Dim hname As String = hostname.Text

  If phname <> hname

    phname = hname

    If hostnamepipe.Visible Then hostnamepipe.Hide

    With installnext

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    If hname = Null

      If hostnameerror.Visible Then hostnameerror.Hide

    Else

      If hname Not Like "* *"

        Wait 0.3

        If hname = hostname.Text

          chname = Trim(File.Load("/etc/hostname"))

          wproc = Exec ["hostname", hname]
          wprocwait

          If wproc.Value = 0

            Exec ["hostname", chname]

            If hname = hostname.Text

              If hostnameerror.Visible Then hostnameerror.Hide
              hostnamepipe.Show

            Endif

          Else If hname = hostname.Text And Not hostnameerror.Visible

            hostnameerror.Show

          Endif

        Endif

      Else If Not hostnameerror.Visible

        hostnameerror.Show

      Endif

    Endif

  Endif

End

Public Sub hostname_KeyRelease()

  If installnext.Enabled And If Key.Code = Key.Enter Or Key.Code = Key.Return Then installnext.SetFocus

End

Public Sub homepage1_MouseDown()

  If Mouse.Left Then homepage1.Foreground = Color.SelectedBackground

End

Public Sub homepage1_MouseUp()

  Dim ofile As File
  Dim usr As String = admins.Text
  Dim cline As String

  If Mouse.Left And homepage1.Foreground = Color.SelectedBackground

    If usr = Null

      ofile = Open "/etc/passwd" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Like "*:x:10{00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15}:10*"

          usr = Left(cline, InStr(cline, ":") - 1)
          Break

        Endif

      Wend
      Close #ofile

    Endif

    Exec ["sudo", "-iu", usr, "xdg-open", "https://sourceforge.net/projects/systemback"]
    homepage1.Foreground = Color.Default

  Endif

End

Public Sub homepage1_MouseMove()

  If Mouse.Left

    With homepage1

      If Mouse.Inside(homepage1)

        If .Foreground = Color.Default Then .Foreground = Color.SelectedBackground

      Else If .Foreground = Color.SelectedBackground

        .Foreground = Color.Default

      Endif

    End With

  Endif

End

Public Sub homepage2_MouseDown()

  If Mouse.Left Then homepage2.Foreground = Color.SelectedBackground

End

Public Sub homepage2_MouseUp()

  Dim ofile As File
  Dim usr As String = admins.Text
  Dim cline As String

  If Mouse.Left And homepage2.Foreground = Color.SelectedBackground

    If usr = Null

      ofile = Open "/etc/passwd" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Like "*:x:10{00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15}:10*"

          usr = Left(cline, InStr(cline, ":") - 1)
          Break

        Endif

      Wend
      Close #ofile

    Endif

    Exec ["sudo", "-iu", usr, "xdg-open", "https://launchpad.net/systemback"]
    homepage2.Foreground = Color.Default

  Endif

End

Public Sub homepage2_MouseMove()

  If Mouse.Left

    With homepage2

      If Mouse.Inside(homepage2)

        If .Foreground = Color.Default Then .Foreground = Color.SelectedBackground

      Else If .Foreground = Color.SelectedBackground

        .Foreground = Color.Default

      Endif

    End With

  Endif

End

Public Sub email_MouseDown()

  If Mouse.Left Then email.Foreground = Color.SelectedBackground

End

Public Sub email_MouseUp()

  Dim ofile As File
  Dim usr As String = admins.Text
  Dim cline As String

  If Mouse.Left And email.Foreground = Color.SelectedBackground

    If usr = Null

      ofile = Open "/etc/passwd" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Like "*:x:10{00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15}:10*"

          usr = Left(cline, InStr(cline, ":") - 1)
          Break

        Endif

      Wend
      Close #ofile

    Endif

    Exec ["sudo", "-iu", usr, "xdg-email", "nemh@freemail.hu"]
    email.Foreground = Color.Default

  Endif

End

Public Sub email_MouseMove()

  If Mouse.Left

    With email

      If Mouse.Inside(email)

        If .Foreground = Color.Default Then .Foreground = Color.SelectedBackground

      Else If .Foreground = Color.SelectedBackground

        .Foreground = Color.Default

      Endif

    End With

  Endif

End

Public Sub donate_MouseDown()

  If Mouse.Left Then donate.Foreground = Color.SelectedBackground

End

Public Sub donate_MouseUp()

  Dim ofile As File
  Dim usr As String = admins.Text
  Dim cline As String

  If Mouse.Left And donate.Foreground = Color.SelectedBackground

    If usr = Null

      ofile = Open "/etc/passwd" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Like "*:x:10{00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15}:10*"

          usr = Left(cline, InStr(cline, ":") - 1)
          Break

        Endif

      Wend
      Close #ofile

    Endif

    Exec ["sudo", "-iu", usr, "xdg-open", "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=ZQ668BBR7UCEQ"]
    donate.Foreground = Color.Default

  Endif

End

Public Sub donate_MouseMove()

  If Mouse.Left

    With donate

      If Mouse.Inside(donate)

        If .Foreground = Color.Default Then .Foreground = Color.SelectedBackground

      Else If .Foreground = Color.SelectedBackground

        .Foreground = Color.Default

      Endif

    End With

  Endif

End

Public Sub livecreatenew_Click()

  Dim rproc As Process
  Dim ofile As File
  Dim cline, ckernel, lvtype, lvusr, did, fname, item, ifname, usr, ldest, ide, elist, delist, grxorg, srxorg As String
  Dim rpart As String = " "
  Dim ncount As Integer
  Dim dcopy As Boolean

  statusstart

  prun = ("Creating Live system")
  If dialog = 29 Then dialog = 0

  Exec ["uname", "-r"] To ckernel
  ckernel = Trim(ckernel)

  If Exist(lwdir & "/.sblivesystemcreate")

    If prun = Null Then Return
    wproc = Exec ["rm", "-rf", lwdir & "/.sblivesystemcreate"]
    wprocwait
    If prun = Null Then Return

  Endif

  Mkdir lwdir & "/.sblivesystemcreate"
  If Exist("/usr/share/initramfs-tools/scripts/casper") Then lvtype = "casper" Else lvtype = "live"
  Mkdir lwdir & "/.sblivesystemcreate/.disk"
  Mkdir lwdir & "/.sblivesystemcreate/" & lvtype
  Mkdir lwdir & "/.sblivesystemcreate/syslinux"

  If livename.Text = "auto" Then ifname = "systemback_live_" & Year(Now) & "-" & Right("0" & Month(Now), 2) & "-" & Right("0" & Day(Now), 2) Else ifname = livename.Text

  While Exist(lwdir & "/" & ifname & ".sblive")

    ncount = ncount + 1
    If ncount = 1 Then ifname &= "_1" Else ifname = Left(ifname, RInStr(ifname, "_") - 1) & "_" & ncount

  Wend

  If System.Architecture = "x86" Then File.Save(lwdir & "/.sblivesystemcreate/.disk/info", "Systemback Live (" & ifname & ") - Release i386\n") Else File.Save(lwdir & "/.sblivesystemcreate/.disk/info", "Systemback Live (" & ifname & ") - Release amd64\n")

  Copy "/boot/vmlinuz-" & ckernel To lwdir & "/.sblivesystemcreate/" & lvtype & "/vmlinuz"

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If admins.Text <> Null And cline Begins admins.Text & ":" Or If admins.Length = 0 And cline Like "*:x:10{00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15}:10*"

      lvusr = Left(cline, InStr(cline, ":") - 1)
      fname = Right(cline, - InStr(cline, ":"))
      fname = Right(fname, - InStr(fname, ":"))
      fname = Right(fname, - InStr(fname, ":"))
      fname = Right(fname, - InStr(fname, ":"))
      fname = Left(fname, InStr(fname, ",") - 1)

      Break

    Endif

  Wend
  Close #ofile

  If lvtype = "casper"

    ofile = Open "/etc/lsb-release" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If cline Begins "DISTRIB_ID="

        did = Right(cline, - InStr(cline, "="))
        Break

      Endif

    Wend
    Close #ofile

    If did = Null Then did = "Ubuntu"

    File.Save("/etc/casper.conf", "USERNAME=\"" & lvusr & "\"\nUSERFULLNAME=\"" & fname & "\"\nHOST=\"" & Trim(File.Load("/etc/hostname")) & "\"\nBUILD_SYSTEM=\"" & did & "\"\n\nexport USERNAME USERFULLNAME HOST BUILD_SYSTEM\n")

    For Each item In Dir("/usr/share/initramfs-tools/scripts/casper-bottom", "[^.]*", gb.File)

      If Right(item, -2) <> "integrity_check" And Right(item, -2) <> "mountpoints" And Right(item, -2) <> "fstab" And Right(item, -2) <> "swap" And Right(item, -2) <> "xconfig" And Right(item, -2) <> "networking" And Right(item, -2) <> "preseed" And Right(item, -2) <> "disable_update_notifier" And Right(item, -2) <> "disable_hibernation" And Right(item, -2) <> "disable_kde_services" And Right(item, -2) <> "fix_language_selector" And Right(item, -2) <> "disable_trackerd" And Right(item, -2) <> "disable_updateinitramfs" And Right(item, -2) <> "kubuntu_disable_restart_notifications" And Right(item, -2) <> "kubuntu_mobile_session" Then Chmod "/usr/share/initramfs-tools/scripts/casper-bottom/" & item To "rw-r--r--"

    Next

    For Each item In Dir("/usr/share/initramfs-tools/scripts/casper-bottom", "[^.]*", gb.File)

      If Right(item, -2) <> "integrity_check" And Right(item, -2) <> "mountpoints" And Right(item, -2) <> "fstab" And Right(item, -2) <> "swap" And Right(item, -2) <> "xconfig" And Right(item, -2) <> "networking" And Right(item, -2) <> "preseed" And Right(item, -2) <> "disable_update_notifier" And Right(item, -2) <> "disable_hibernation" And Right(item, -2) <> "disable_kde_services" And Right(item, -2) <> "fix_language_selector" And Right(item, -2) <> "disable_trackerd" And Right(item, -2) <> "disable_updateinitramfs" And Right(item, -2) <> "kubuntu_disable_restart_notifications" And Right(item, -2) <> "kubuntu_mobile_session" Then Chmod "/usr/share/initramfs-tools/scripts/casper-bottom/" & item To "rw-r--r--"

    Next

  Else

    Try Chmod "/usr/share/initramfs-tools/scripts/live-bottom/30accessibility" To "rw-r--r--"

    If Error

      Try File.Save("/usr/share/initramfs-tools/scripts/init-bottom/sbfstab", "#!/bin/sh\nif [ \"${BOOT}\" = \"live\" -a ! -e \"/root/etc/fstab\" ]\nthen touch /root/etc/fstab\nfi\n")
      If Not Error Then Chmod "/usr/share/initramfs-tools/scripts/init-bottom/sbfstab" To "rwxr-xr-x"

    Endif

  Endif

  If Exist("/etc/X11/xorg.conf")

    Try File.Save("/usr/share/initramfs-tools/scripts/init-bottom/sbnoxconf", "#!/bin/sh\nif [ \"$(grep noxconf /proc/cmdline)\" -a -s \"/root/etc/X11/xorg.conf\" ]\nthen rm -rf \"/root/etc/X11/xorg.conf\"\nfi\n")
    If Not Error Then Chmod "/usr/share/initramfs-tools/scripts/init-bottom/sbnoxconf" To "rwxr-xr-x"

    grxorg = "menuentry \"" & ("Boot Live without xorg.conf file") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & " noxconf quiet splash\n  initrd /" & lvtype & "/initrd.gz\n}\n\n"
    srxorg = "label noxconf\n  menu label " & ("Boot Live without xorg.conf file") & "\n  kernel /" & lvtype & "/vmlinuz\n  append" & rpart & "boot=" & lvtype & " initrd=/" & lvtype & "/initrd.gz noxconf quiet splash\n\n"

  Endif

  If prun = Null Then Return
  If Not irfsc Then irfsc = True
  wproc = Exec ["update-initramfs", "-tck", ckernel]
  wprocwait
  irfsc = False
  If prun = Null Then Return

  If lvtype = "casper"

    For Each item In Dir("/usr/share/initramfs-tools/scripts/casper-bottom", "[^.]*", gb.File)

      If Right(item, -2) <> "integrity_check" And Right(item, -2) <> "mountpoints" And Right(item, -2) <> "fstab" And Right(item, -2) <> "swap" And Right(item, -2) <> "xconfig" And Right(item, -2) <> "networking" And Right(item, -2) <> "preseed" And Right(item, -2) <> "disable_update_notifier" And Right(item, -2) <> "disable_hibernation" And Right(item, -2) <> "disable_kde_services" And Right(item, -2) <> "fix_language_selector" And Right(item, -2) <> "disable_trackerd" And Right(item, -2) <> "disable_updateinitramfs" And Right(item, -2) <> "kubuntu_disable_restart_notifications" And Right(item, -2) <> "kubuntu_mobile_session" Then Chmod "/usr/share/initramfs-tools/scripts/casper-bottom/" & item To "rwxr-xr-x"

    Next

  Else

    Try Chmod "/usr/share/initramfs-tools/scripts/live-bottom/30accessibility" To "rwxr-xr-x"
    If Error Then Try Kill "/usr/share/initramfs-tools/scripts/init-bottom/sbfstab"

  Endif

  Try Kill "/usr/share/initramfs-tools/scripts/init-bottom/sbnoxconf"
  Copy "/boot/initrd.img-" & ckernel To lwdir & "/.sblivesystemcreate/" & lvtype & "/initrd.gz"
  Copy "/usr/lib/syslinux/isolinux.bin" To lwdir & "/.sblivesystemcreate/syslinux/isolinux.bin"
  Copy "/usr/lib/syslinux/vesamenu.c32" To lwdir & "/.sblivesystemcreate/syslinux/vesamenu.c32"
  Copy "/usr/share/systemback/splash.png" To lwdir & "/.sblivesystemcreate/syslinux/splash.png"
  Try Mkdir "/media/" & btmp
  Try Mkdir "/media/" & btmp & "/media"

  If Exist("/etc/fstab")

    For Each item In Dir("/media", "[^.]*", gb.Directory)

      ofile = Open "/etc/fstab" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If Replace(cline, "\\040", " ") Like "*[ \t]/media/" & item & "[ \t]*" Or Replace(cline, "\\040", " ") Like "*[ \t]/media/" & item & "/*"

          If prun = Null Then Return
          wproc = Exec ["bash", "-c", "sbsync -rlptgox /media/ /media/" & btmp & "/media --include=/" & item & " --exclude=/* --include=*/ --exclude=*"]
          wprocwait
          If prun = Null Then Return

        Endif

      Wend
      Close #ofile

    Next

  Endif

  If Exist("/var/" & btmp)

    If prun = Null Then Return
    wproc = Exec ["rm", "-rf", "/var/" & btmp]
    wprocwait
    If prun = Null Then Return

  Endif

  Try Mkdir "/var/" & btmp

  If prun = Null Then Return
  wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete / /" & btmp & " --include={/cdrom,/dev,/mnt,/proc,/run,/srv,/sys,/tmp} --exclude=* ; sbsync -rlptgo --delete --link-dest=../../ /var/ /var/" & btmp & "/var --exclude={" & btmp & ",/lib/ureadahead/*,/log/*,/tmp/*,/cache/apt/*.bin,/cache/apt/*.bin.*,/cache/apt/archives/*.deb,/run/*,/lib/udisks/mtab,/lost+found,*.dpkg-old,*~}"]
  wprocwait
  If prun = Null Then Return

  For Each item In RDir("/var/log", "[^.]*")

    With Stat("/var/log/" & item)

      If .Type = gb.Directory

        Try Mkdir "/var/" & btmp & "/var/log/" & item

      Else If .Type = gb.File And Right(item, 2) <> ".0" And Right(item, 2) <> ".1" And Right(item, 3) <> ".gz" And Right(item, 4) <> ".old"

        Try File.Save("/var/" & btmp & "/var/log/" & item, Null)

      Endif

      Try Chmod "/var/" & btmp & "/var/log/" & item To .Auth
      Try Chown "/var/" & btmp & "/var/log/" & item To .User
      Try Chgrp "/var/" & btmp & "/var/log/" & item To .Group

    End With

  Next

  For Each item In ["/bin", "/boot", "/etc", "/lib", "/lib32", "/lib64", "/opt", "/sbin", "/selinux", "/usr", "/initrd.img", "/initrd.img.old", "/vmlinuz", "/vmlinuz.old"]

    If Exist(item) Then ide &= " " & item

  Next

  If prun = Null Then Return
  wproc = Exec ["bash", "-c", "mksquashfs " & ide & " /" & btmp & "/* /media/" & btmp & "/media /var/" & btmp & "/var " & lwdir & "/.sblivesystemcreate/" & lvtype & "/filesystem.squashfs -b 1M -no-duplicates -no-recovery -always-use-fragments -e {/etc/fstab,/etc/mtab,/etc/udev/rules.d/70-persistent-cd.rules,/etc/udev/rules.d/70-persistent-net.rules}"]

  While wproc.State = Process.Running

    If Dfree(lwdir) < 104857600

      wproc.Kill
      dialog = 29

    Endif

    Wait 0.5

  Wend

  If prun = Null Then Return

  rproc = Exec ["rm", "-rf", "/" & btmp, "/media/" & btmp, "/var/" & btmp]

  While rproc.State = Process.Running

    Wait 0.1

  Wend

  If dialog <> 29

    If wproc.Value = 0

      Mkdir lwdir & "/.sblivesystemcreate/mount"

      If prun = Null Then Return
      wproc = Exec ["mount", "-o", "loop", lwdir & "/.sblivesystemcreate/" & lvtype & "/filesystem.squashfs", lwdir & "/.sblivesystemcreate/mount"]
      wprocwait
      If prun = Null Then Return
      wproc = Exec ["bash", "-c", "sbsync -rlptgo --list-only " & lwdir & "/.sblivesystemcreate/mount | wc -l >" & lwdir & "/.sblivesystemcreate/.pointsize"]
      wprocwait
      If prun = Null Then Return
      wproc = Exec ["umount", "-l", lwdir & "/.sblivesystemcreate/mount"]
      wprocwait
      If prun = Null Then Return

      Rmdir lwdir & "/.sblivesystemcreate/mount"
      Mkdir lwdir & "/.sblivesystemcreate/.systemback"
      Mkdir lwdir & "/.sblivesystemcreate/.systemback/etc"
      Mkdir lwdir & "/.sblivesystemcreate/.systemback/etc/udev"
      Mkdir lwdir & "/.sblivesystemcreate/.systemback/etc/udev/rules.d"
      Try Copy "/etc/udev/rules.d/70-persistent-cd.rules" To lwdir & "/.sblivesystemcreate/.systemback/etc/udev/rules.d/70-persistent-cd.rules"
      Try Copy "/etc/udev/rules.d/70-persistent-net.rules" To lwdir & "/.sblivesystemcreate/.systemback/etc/udev/rules.d/70-persistent-net.rules"
      Try Copy "/etc/fstab" To lwdir & "/.sblivesystemcreate/.systemback/etc/fstab"
      Copy "/etc/systemback.excludes" To lwdir & "/.sblivesystemcreate/.excludes"

      ide = lwdir & "/.sblivesystemcreate/.systemback " & lwdir & "/.sblivesystemcreate/.pointsize " & lwdir & "/.sblivesystemcreate/.excludes"

      If Not userdatainclude.Value

        If Dfree("/home") > 104857600 And Dfree("/root") > 104857600

          ofile = Open "/etc/passwd" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If cline Like "*:/home/*"

              usr = Left(cline, InStr(cline, ":") - 1)

              If IsDir("/home/" & usr)

                If Dfree("/home/" & usr) <> Dfree("/home")

                  dcopy = True
                  Return

                Endif

              Endif

            Endif

          Wend
          Close #ofile

        Else

          dcopy = True

        Endif

      Endif

      If userdatainclude.Value Or Not dcopy

        If prun = Null Then Return

        If Exist("/home/" & btmp)

          wproc = Exec ["rm", "-rf", "/home/" & btmp]
          wprocwait
          If prun = Null Then Return

        Endif

        Try Mkdir "/home/" & btmp
        Try Mkdir "/home/" & btmp & "/home"

        If Exist("/root/" & btmp)

          wproc = Exec ["rm", "-rf", "/root/" & btmp]
          wprocwait
          If prun = Null Then Return

        Endif

        Try Mkdir "/root/" & btmp
        ide &= " /home/" & btmp & "/* /root/" & btmp & "/root"

      Else

        Mkdir lwdir & "/.sblivesystemcreate/usersettings"
        Mkdir lwdir & "/.sblivesystemcreate/usersettings/home"
        ide &= " " & lwdir & "/.sblivesystemcreate/usersettings/*"

      Endif

      elist = "/" & btmp & ",/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,/.Xauthority,*~"

      ofile = Open "/etc/systemback.excludes" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If Left(cline) = "."

          elist &= ",'/" & cline & "'"

        Else If delist = Null

          delist = "'/" & cline & "'"

        Else

          delist &= ",'/" & cline & "'"

        Endif

      Wend
      Close #ofile

      ofile = Open "/etc/passwd" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Like "*:/home/*"

          usr = Left(cline, InStr(cline, ":") - 1)

          If IsDir("/home/" & usr)

            If prun = Null Then Return

            If userdatainclude.Value

              wproc = Exec ["bash", "-c", "sbsync -rlptgox --link-dest=/home/" & usr & " /home/" & usr & "/ /home/" & btmp & "/home/" & usr & " --exclude={" & elist & "," & delist & "}"]

            Else If dcopy

              If Dfree("/home/" & usr) = Dfree(lwdir)

                ldest = "--link-dest=/home/" & usr

              Else If ldest <> Null

                ldest = Null

              Endif

              wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB " & ldest & " /home/" & usr & "/ " & lwdir & "/.sblivesystemcreate/usersettings/home/" & usr & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgox /home/" & usr & "/ " & lwdir & "/.sblivesystemcreate/usersettings/home/" & usr & " --exclude={/.*," & delist & "} --include=*/ --exclude=*"]

            Else

              wproc = Exec ["bash", "-c", "sbsync -rlptgox --max-size=8MB --link-dest=/home/" & usr & " /home/" & usr & "/ /home/" & btmp & "/home/" & usr & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgox --link-dest=/home/" & usr & " /home/" & usr & "/ /home/" & btmp & "/home/" & usr & " --exclude={/.*," & delist & "} --include=*/ --exclude=*"]

            Endif

            wprocwait

          Endif

        Endif

      Wend
      Close #ofile

      If prun = Null Then Return

      If userdatainclude.Value

        wproc = Exec ["bash", "-c", "sbsync -rlptgox --link-dest=/root /root/ /root/" & btmp & "/root --exclude={" & elist & "," & delist & "}"]

      Else If dcopy

        If Dfree("/root") = Dfree(lwdir)

          ldest = "--link-dest=/root"

        Else If ldest <> Null

          ldest = Null

        Endif

        wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB " & ldest & " /root/ " & lwdir & "/.sblivesystemcreate/usersettings/root --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgox /root/ " & lwdir & "/.sblivesystemcreate/usersettings/root --exclude={/.*," & delist & "} --include=*/ --exclude=*"]

      Else

        wproc = Exec ["bash", "-c", "sbsync -rlptgox --max-size=8MB --link-dest=/root /root/ /root/" & btmp & "/root --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgox --link-dest=/root /root/ /root/" & btmp & "/root --exclude={/.*," & delist & "} --include=*/ --exclude=*"]

      Endif

      wprocwait
      If prun = Null Then Return
      wproc = Exec ["bash", "-c", "mksquashfs " & ide & " " & lwdir & "/.sblivesystemcreate/" & lvtype & "/filesystem.squashfs -b 1M -no-duplicates -no-recovery -always-use-fragments"]

      While wproc.State = Process.Running

        If Dfree(lwdir) < 104857600

          wproc.Kill
          dialog = 29

        Endif

        Wait 0.5

      Wend

      If prun = Null Then Return

      If Exist("/home/" & btmp)

        rproc = Exec ["rm", "-rf", "/home/" & btmp, "/root/" & btmp]

        While rproc.State = Process.Running

          Wait 0.1

        Wend

        If prun = Null Then Return

      Endif

      If dialog <> 29

        If wproc.Value = 0

          If Stat(lwdir & "/.sblivesystemcreate/" & lvtype & "/filesystem.squashfs").Size > 4294967295 Then rpart = " root=LABEL=sbroot "

          If System.Architecture = "x86_64"

            wproc = Exec ["tar", "-xzf", "/usr/share/systemback/efi.tar.gz", "-C", lwdir & "/.sblivesystemcreate"]
            wprocwait
            If prun = Null Then Return

            Copy "/usr/share/systemback/splash.png" To lwdir & "/.sblivesystemcreate/boot/grub/splash.png"
            File.Save(lwdir & "/.sblivesystemcreate/boot/grub/grub.cfg", "if loadfont /boot/grub/font.pf2\nthen\n  set gfxmode=auto\n  insmod efi_gop\n  insmod efi_uga\n  insmod gfxterm\n  terminal_output gfxterm\nfi\n\nset theme=/boot/grub/theme.cfg\n\nmenuentry \"" & ("Boot Live system") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & " quiet splash\n  initrd /" & lvtype & "/initrd.gz\n}\n\nmenuentry \"" & ("Boot Live in safe graphics mode") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & " xforcevesa nomodeset quiet splash\n  initrd /" & lvtype & "/initrd.gz\n}\n\n" & grxorg & "menuentry \"" & ("Boot Live in debug mode") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & "\n  initrd /" & lvtype & "/initrd.gz\n}\n")
            File.Save(lwdir & "/.sblivesystemcreate/boot/grub/theme.cfg", "title-color: \"white\"\ntitle-text: \"Systemback Live (" & ifname & ")\"\ntitle-font: \"Sans Regular 16\"\ndesktop-color: \"black\"\ndesktop-image: \"/boot/grub/splash.png\"\nmessage-color: \"white\"\nmessage-bg-color: \"black\"\nterminal-font: \"Sans Regular 12\"\n\n+ boot_menu {\n  top = 150\n  left = 15%\n  width = 75%\n  height = 130\n  item_font = \"Sans Regular 12\"\n  item_color = \"grey\"\n  selected_item_color = \"white\"\n  item_height = 20\n  item_padding = 15\n  item_spacing = 5\n}\n\n+ vbox {\n  top = 100%\n  left = 2%\n  + label {text = \"" & ("Press 'E' key to edit") & "\" font = \"Sans 10\" color = \"white\" align = \"left\"}\n}\n")
            File.Save(lwdir & "/.sblivesystemcreate/boot/grub/loopback.cfg", "menuentry \"" & ("Boot Live system") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & " quiet splash\n  initrd /" & lvtype & "/initrd.gz\n}\n\nmenuentry \"" & ("Boot Live in safe graphics mode") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & " xforcevesa nomodeset quiet splash\n  initrd /" & lvtype & "/initrd.gz\n}\n\n" & grxorg & "menuentry \"" & ("Boot Live in debug mode") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & "\n  initrd /" & lvtype & "/initrd.gz\n}\n")

          Endif

          File.Save(lwdir & "/.sblivesystemcreate/syslinux/syslinux.cfg", "default vesamenu.c32\nprompt 0\ntimeout 100\n\nmenu title Systemback Live (" & ifname & ")\nmenu tabmsg " & ("Press TAB key to edit") & "\nmenu background splash.png\n\nlabel live\n  menu label " & ("Boot Live system") & "\n  kernel /" & lvtype & "/vmlinuz\n  append" & rpart & "boot=" & lvtype & " initrd=/" & lvtype & "/initrd.gz quiet splash\n\nlabel safe\n  menu label " & ("Boot Live in safe graphics mode") & "\n  kernel /" & lvtype & "/vmlinuz\n  append" & rpart & "boot=" & lvtype & " initrd=/" & lvtype & "/initrd.gz xforcevesa nomodeset quiet splash\n\n" & srxorg & "label debug\n  menu label " & ("Boot Live in debug mode") & "\n  kernel /" & lvtype & "/vmlinuz\n  append" & rpart & "boot=" & lvtype & " initrd=/" & lvtype & "/initrd.gz\n")

          If prun = Null Then Return
          wproc = Exec ["rm", "-rf", lwdir & "/.sblivesystemcreate/.systemback"]
          wprocwait
          If prun = Null Then Return

          Kill lwdir & "/.sblivesystemcreate/.excludes"
          Kill lwdir & "/.sblivesystemcreate/.pointsize"

          If Exist(lwdir & "/.sblivesystemcreate/usersettings")

            If prun = Null Then Return
            wproc = Exec ["rm", "-rf", lwdir & "/.sblivesystemcreate/usersettings"]
            wprocwait

          Endif

          If prun = Null Then Return
          wproc = Exec ["tar", "-cf", lwdir & "/" & ifname & ".sblive", "-C", lwdir & "/.sblivesystemcreate", "."]
          wprocwait
          If prun = Null Then Return

          If wproc.Value = 0

            Chmod lwdir & "/" & ifname & ".sblive" To "rw-rw-rw-"

            prun = ("Emptying cache")
            wproc = Exec ["sync"]
            wprocwait
            File.Save("/proc/sys/vm/drop_caches", "3")

            livecreatemenu_Click

            dialog = 28

          Else

            If Exist(lwdir & "/" & ifname & ".sblive") Then Kill lwdir & "/" & ifname & ".sblive"

            dialog = 27

          Endif

        Else

          dialog = 26

        Endif

      Endif

    Else

      dialog = 26

    Endif

  Endif

  Exec ["rm", "-rf", lwdir & "/.sblivesystemcreate"]

  dialogopen

End

Public Sub livedevicesupdate_Click()

  Dim item, dev, name As String

  Inc Application.Busy

  With livedevices

    If .Count <> 0 Then .Clear
    .Sorted = True

    For Each item In Dir("/dev/disk/by-id", "usb-*", gb.Link)

      With Stat("/dev/disk/by-id/" & item)

        dev = "/dev/" & Right(.Link, - RInStr(.Link, "/"))

      End With

      If Len(dev) = 8

        .Add(dev, dev)
        name = Mid(item, 5, RInStr(item, "_") - 5)
        .Item[1] = Replace(name, "_", " ")
        .Item[2] = "-"

      Endif

    Next

    .Sorted = False

  End With

  With livewritestart

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  Dec Application.Busy

End

Public Sub livelist_Select()

  Dim isize As Long

  With livelist

    If .Enabled And .Text <> Null

      If Exist(lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".sblive")

        With livedelete

          If Not .Enabled

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        End With

        isize = Stat(lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".sblive").Size

        With liveconvert

          If isize > 0 And isize < 4294967295 And isize * 2 + 104857600 < Dfree(lwdir) And Not Exist(lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".iso")

            If Not .Enabled

              .Enabled = True
              .Mouse = Mouse.Pointing

            Endif

          Else If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

        With livewritestart

          If isize > 0 And livedevices.Key <> Null

            If Not .Enabled

              .Enabled = True
              .Mouse = Mouse.Pointing

            Endif

          Else If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

      Else

        .Remove(.Find(.Text))

      Endif

    Endif

  End With

End

Public Sub livelist_KeyRelease()

  If livedelete.Enabled And Key.Code = Key.Delete Then livedelete_Click

End

Public Sub livedevices_Select()

  Dim sitem As String = livedevices.Key

  With livedevices

    If .Enabled And .Key <> Null

      livedevices[.Key][2] = "x"

      .MoveFirst

      While .Available

        If .Item[0] <> sitem And .Item[2] = "x" Then .Item[2] = "-"

        .MoveNext

      Wend

      With livewritestart

        If livelist.Text <> Null And Not .Enabled

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

    Endif

  End With

End

Public Sub livedevices_KeyRelease()

  If Key.Code = Key.F5 Or Key.Code = Key.Delete Then livedevicesupdate_Click

End

Public Sub pointexclude_Click()

  Dim ofile As File
  Dim cline, item, sitem, usr As String

  Inc Application.Busy

  With additem

    If .Enabled

      .Enabled = False
      .Mouse = Mouse.Default

    Else If removeitem.Enabled

      removeitem.Enabled = False
      removeitem.Mouse = Mouse.Default

    Endif

  End With

  If itemslist.Count <> 0 Then itemslist.Clear
  If excludedlist.Count <> 0 Then excludedlist.Clear

  If Exist("/etc/systemback.excludes")

    ofile = Open "/etc/systemback.excludes" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If Left(cline) = "."

        If pointexclude.Value Then excludedlist.Add(cline)

      Else If liveexclude.Value

        excludedlist.Add(cline)

      Endif

    Wend
    Close #ofile

  Else

    File.Save("/etc/systemback.excludes", Null)

  Endif

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If cline Like "*:/home/*"

      usr = Left(cline, InStr(cline, ":") - 1)

      If IsDir("/home/" & usr)

        For Each item In Dir("/home/" & usr)

          If Left(item) = "." And pointexclude.Value Or If Left(item) <> "." And liveexclude.Value

            If excludedlist.Find(item) = -1 And item Not Like ".{gvfs,Xauthority}"

              If Not itemslist.Exist(item)

                If Access("/home/" & usr & "/" & item, gb.Read)

                  If Stat("/home/" & usr & "/" & item).Type = gb.Directory

                    itemslist.Add(item, item, Picture["dir.png"])

                    For Each sitem In Dir("/home/" & usr & "/" & item)

                      If excludedlist.Find(item & "/" & sitem) = -1 And item & "/" & sitem <> ".cache/gvfs" Then itemslist.Add(item & "/" & sitem, sitem,, item)

                    Next

                  Else

                    itemslist.Add(item, item)

                  Endif

                Else

                  itemslist.Add(item, item)

                Endif

              Else If Access("/home/" & usr & "/" & item, gb.Read)

                If Stat("/home/" & usr & "/" & item).Type = gb.Directory

                  If itemslist[item].Picture = Null Then itemslist[item].Picture = Picture["dir.png"]

                  For Each sitem In Dir("/home/" & usr & "/" & item)

                    If excludedlist.Find(item & "/" & sitem) = -1 And item & "/" & sitem <> ".cache/gvfs" And Not itemslist.Exist(item & "/" & sitem) Then itemslist.Add(item & "/" & sitem, sitem,, item)

                  Next

                Endif

              Endif

            Endif

          Endif

        Next

      Endif

    Endif

  Wend
  Close #ofile

  For Each item In Dir("/root")

    If Left(item) = "." And pointexclude.Value Or If Left(item) <> "." And liveexclude.Value

      If excludedlist.Find(item) = -1 And item Not Like ".{gvfs,Xauthority}"

        If Not itemslist.Exist(item)

          If Stat("/root/" & item).Type = gb.Directory

            itemslist.Add(item, item, Picture["dir.png"])

            For Each sitem In Dir("/root/" & item)

              If excludedlist.Find(item & "/" & sitem) = -1 And item & "/" & sitem <> ".cache/gvfs" Then itemslist.Add(item & "/" & sitem, sitem,, item)

            Next

          Else

            itemslist.Add(item, item)

          Endif

        Else If Stat("/root/" & item).Type = gb.Directory

          If itemslist[item].Picture = Null Then itemslist[item].Picture = Picture["dir.png"]

          For Each sitem In Dir("/root/" & item)

            If excludedlist.Find(item & "/" & sitem) = -1 And item & "/" & sitem <> ".cache/gvfs" And Not itemslist.Exist(item & "/" & sitem) Then itemslist.Add(item & "/" & sitem, sitem,, item)

          Next

        Endif

      Endif

    Endif

  Next

  Dec Application.Busy

End

Public Sub liveexclude_Click()

  pointexclude_Click

End

Public Sub userdatainclude_Click()

  Dim ofile As File
  Dim cline, usr As String

  If userdatainclude.Value

    If Dfree("/home") > 104857600 And Dfree("/root") > 104857600

      ofile = Open "/etc/passwd" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If cline Like "*:/home/*"

          usr = Left(cline, InStr(cline, ":") - 1)

          If IsDir("/home/" & usr)

            If Dfree("/home/" & usr) <> Dfree("/home")

              userdatainclude.Value = False
              Return

            Endif

          Endif

        Endif

      Wend
      Close #ofile

    Else

      userdatainclude.Value = False

    Endif

  Endif

End

Public Sub livewritestart_Click()

  dialog = 30
  dialogopen

End

Private Sub livewrite()

  Dim ofile As File
  Dim cline, dsize, lrdir, cperc As String
  Dim csize As Long = Stat(lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".sblive").Size
  Dim fsize As Long
  Dim stract As Byte

  statusstart

  prun = ("Writing Live image to USB device")

  progressbartimer.Start

  With livedevices

    If File.Load("/proc/self/mounts") Like "*" & .Key & " *"

      wproc = Exec ["bash", "-c", "umount -l " & .Key & "*"] For Read
      wprocwait
      If prun = Null Then Return
      wproc = Exec ["sync"]
      wprocwait
      If prun = Null Then Return

    Endif

    Exec ["blockdev", "--getsize64", .Key] To dsize

    If dsize <> Null

      If csize < 4294967295

        lrdir = "sblive"

        While prun <> Null And stract <= 1

          wproc = Exec ["bash", "-c", "parted -s " & .Key & " mklabel msdos && parted -s " & .Key & " mkpart primary 1 " & Round(Trim(dsize) / 1000000 - stract) & " && mkfs.vfat -F 32 -n \"sblive\" " & .Key & "1"]
          wprocwait
          If wproc.Value = 1 Then stract = stract + 1 Else stract = 2

        Wend

      Else

        lrdir = "sbroot"

        While prun <> Null And stract <= 1

          wproc = Exec ["bash", "-c", "parted -s " & .Key & " mklabel msdos && parted -s " & .Key & " mkpart primary 1 100 && parted -s " & .Key & " mkpart primary 100 " & Round(Trim(dsize) / 1000000 - stract) & " && mkfs.vfat -F 32 -n \"sblive\" " & .Key & "1 && mkfs.ext2 -L \"sbroot\" " & .Key & "2"]
          wprocwait
          If wproc.Value = 1 Then stract = stract + 1 Else stract = 2

        Wend

      Endif

      If prun = Null Then Return

      If wproc.Value = 0

        wproc = Exec ["dd", "if=/usr/lib/syslinux/mbr.bin", "of=" & .Key, "conv=notrunc", "bs=440", "count=1"]
        wprocwait
        wproc = Exec ["parted", "-s", .Key, "set", "1", "boot", "On"]
        wprocwait
        wproc = Exec ["parted", "-s", .Key, "set", "1", "lba", "On"]
        wprocwait

        Try Mkdir "/.sblivesystemwrite"

        If Error

          ofile = Open "/proc/self/mounts" For Input
          While Not Eof(ofile)
            Line Input #ofile, cline

            If prun = Null Then Return

            If cline Like "* /.sblivesystemwrite/sblive*"

              wproc = Exec ["umount", "-l", "/.sblivesystemwrite/sblive"]
              wprocwait

            Else If cline Like "* /.sblivesystemwrite/sbroot*"

              wproc = Exec ["umount", "-l", "/.sblivesystemwrite/sbroot"]
              wprocwait

            Endif

          Wend
          Close #ofile

        Endif

        If prun = Null Then Return

        Try Mkdir "/.sblivesystemwrite/sblive"

        If lrdir = "sbroot"

          Try Mkdir "/.sblivesystemwrite/sbroot"

          wproc = Exec ["mount", .Key & "1", "/.sblivesystemwrite/sblive"]
          wprocwait
          If prun = Null Then Return

          If wproc.Value = 0

            wproc = Exec ["mount", .Key & "2", "/.sblivesystemwrite/sbroot"]
            wprocwait

          Endif

        Else

          wproc = Exec ["mount", .Key & "1", "/.sblivesystemwrite/sblive"]
          wprocwait

        Endif

        If prun = Null Then Return

        If wproc.Value = 0

          If Dfree("/.sblivesystemwrite/" & lrdir) > csize + 52428800

            progressbartimer.Stop

            If prun = Null Then Return

            If lrdir = "sblive"

              wproc = Exec ["tar", "-xf", lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".sblive", "-C", "/.sblivesystemwrite/sblive", "--no-same-owner", "--no-same-permissions"]

            Else

              wproc = Exec ["bash", "-c", "tar -xf " & lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".sblive -C /.sblivesystemwrite/sblive --exclude={casper,live}/filesystem.squashfs && tar -xf " & lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".sblive -C /.sblivesystemwrite/sbroot --exclude={.disk,boot,EFI,syslinux,casper/initrd.gz,casper/vmlinuz,live/initrd.gz,live/vmlinuz}"]

            Endif

            While wproc.State = Process.Running

              With progressbar

                If .Value <> 1 Or cperc = Null

                  If Exist("/.sblivesystemwrite/" & lrdir & "/casper/filesystem.squashfs")

                    fsize = Stat("/.sblivesystemwrite/" & lrdir & "/casper/filesystem.squashfs").Size

                  Else If Exist("/.sblivesystemwrite/" & lrdir & "/live/filesystem.squashfs")

                    fsize = Stat("/.sblivesystemwrite/" & lrdir & "/live/filesystem.squashfs").Size

                  Endif

                  cperc = Round(fsize / csize, -2)

                  If cperc < "0.01"

                    If .Value <> 0.01 Then .Value = 0.01

                  Else

                    If cperc <= "0.98" Then .Value = cperc Else .Value = 1

                  Endif

                  Wait 0.5

                Else

                  Wait 0.1

                Endif

              End With

            Wend

            If prun = Null Then Return

            prun = ("Emptying cache")

            If wproc.Value = 0

              wproc = Exec ["syslinux", "-if", .Key & "1"]
              wprocwait

              dialog = 44

            Else

              dialog = 43

            Endif

            wproc = Exec ["sync"]
            wprocwait

            File.Save("/proc/sys/vm/drop_caches", "3")

          Else

            dialog = 42

          Endif

          If prun = Null Then Return
          wproc = Exec ["umount", "-l", "/.sblivesystemwrite/sblive", "/.sblivesystemwrite/sbroot", "/.sblivesystemwrite"] For Read
          wprocwait
          If prun = Null Then Return

        Else

          File.Save(tmp & "mounterror", .Key & "1")
          dialog = 31

        Endif

        Try Rmdir "/.sblivesystemwrite/sblive"
        Try Rmdir "/.sblivesystemwrite/sbroot"
        Try Rmdir "/.sblivesystemwrite"

      Else

        File.Save(tmp & "formaterror", .Key & "1")
        dialog = 36

      Endif

    Else

      File.Save(tmp & "formaterror", .Key & "1")
      dialog = 36

    Endif

  End With

  dialogopen

End

Public Sub liveconvert_Click()

  statusstart

  prun = ("Converting Live system image")

  If Exist(lwdir & "/.sblivesystemconvert")

    If prun = Null Then Return
    wproc = Exec ["rm", "-rf", lwdir & "/.sblivesystemconvert"]
    wprocwait
    If prun = Null Then Return

  Endif

  Mkdir lwdir & "/.sblivesystemconvert"

  With livelist

    If prun = Null Then Return
    wproc = Exec ["tar", "-xf", lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".sblive", "-C", lwdir & "/.sblivesystemconvert", "--no-same-owner", "--no-same-permissions"]
    wprocwait
    If prun = Null Then Return

    If wproc.Value = 0

      Try Move lwdir & "/.sblivesystemconvert/syslinux/syslinux.cfg" To lwdir & "/.sblivesystemconvert/syslinux/isolinux.cfg"

      If Error

        dialog = 45

      Else

        Try Move lwdir & "/.sblivesystemconvert/syslinux" To lwdir & "/.sblivesystemconvert/isolinux"

        If Error

          dialog = 45

        Else

          If prun = Null Then Return
          wproc = Exec ["genisoimage", "-r", "-V", "sblive", "-cache-inodes", "-J", "-l", "-b", "isolinux/isolinux.bin", "-no-emul-boot", "-boot-load-size", "4", "-boot-info-table", "-o", lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".iso", lwdir & "/.sblivesystemconvert"]
          wprocwait

          If prun = Null

            Try Kill lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".iso"
            Return

          Endif

          If wproc.Value = 0

            If Exist("/usr/bin/isohybrid.pl")

              wproc = Exec ["isohybrid.pl", lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".iso"]
              wprocwait
              If prun = Null Then Return

            Endif

            Chmod lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".iso" To "rw-rw-rw-"

          Else

            dialog = 46

          Endif

        Endif

      Endif

    Else

      dialog = 47

    Endif

  End With

  wproc = Exec ["rm", "-rf", lwdir & "/.sblivesystemconvert"]
  wprocwait
  If prun = Null Then Return

  If dialog <> 45 And dialog <> 46 And dialog <> 47

    prun = ("Emptying cache")
    wproc = Exec ["sync"]
    wprocwait
    File.Save("/proc/sys/vm/drop_caches", "3")

    If Not systembackgui.Closed

      With livelist

        .Current.Text = Left(.Text, RInStr(.Text, " ")) & "sblive+iso)"

      End With

      liveconvert.Enabled = False
      liveconvert.Mouse = Mouse.Default
      statuspanel.Hide
      mainpanel.Show
      livecreateback.SetFocus
      nwidth = 698
      nheight = 465
      windowmove

    Endif

  Else

    dialogopen

  Endif

End

Private Sub wprocwait()

  While wproc.State = Process.Running

    Wait 0.1

  Wend

End

Public Sub functionmenunext_Click()

  functionmenu1.Hide
  functionmenu2.Show
  functionmenunext.Enabled = False
  functionmenunext.Mouse = Mouse.Default

  With functionmenuback

    .Enabled = True
    .Mouse = Mouse.Pointing
    .SetFocus

  End With

End

Public Sub functionmenuback_Click()

  functionmenu2.Hide
  functionmenu1.Show
  functionmenuback.Enabled = False
  functionmenuback.Mouse = Mouse.Default

  With functionmenunext

    .Enabled = True
    .Mouse = Mouse.Pointing
    .SetFocus

  End With

End

Public Sub schedulerstate_Click()

  Inc Application.Busy

  If schedulerstate.Text = ("Enabled")

    stimer = "off"
    configfileupdate

    schedulerstate.Text = ("Disabled")

    With dayup

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With daydown

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With hourup

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With hourdown

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With minuteup

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With minutedown

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With secondup

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With seconddown

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    silentmode.Enabled = False
    silentmode.Mouse = Mouse.Default

    With windowposition

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

  Else

    If stimer <> "on"

      stimer = "on"
      configfileupdate
      If IsDir(fsdir) And Access(fsdir, gb.Write) Then File.Save(fsdir & "/.sbschedule", Null)

    Endif

    schedulerstate.Text = ("Enabled")

    If sdys <> 0

      daydown.Enabled = True
      daydown.Mouse = Mouse.Pointing

    Endif

    If sdys <> 7

      dayup.Enabled = True
      dayup.Mouse = Mouse.Pointing

    Endif

    If shrs <> 0

      hourdown.Enabled = True
      hourdown.Mouse = Mouse.Pointing

    Endif

    If shrs <> 23

      hourup.Enabled = True
      hourup.Mouse = Mouse.Pointing

    Endif

    If smts <> 0

      With minutedown

        If sdys <> 0 Or shrs <> 0

          .Enabled = True
          .Mouse = Mouse.Pointing

        Else If Val(smts) > 30

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

    Endif

    If smts <> 59

      minuteup.Enabled = True
      minuteup.Mouse = Mouse.Pointing

    Endif

    silentmode.Enabled = True
    silentmode.Mouse = Mouse.Pointing

    If smode = "off"

      If ssds <> 10

        seconddown.Enabled = True
        seconddown.Mouse = Mouse.Pointing

      Endif

      If ssds <> 99

        secondup.Enabled = True
        secondup.Mouse = Mouse.Pointing

      Endif

      windowposition.Enabled = True
      windowposition.Mouse = Mouse.Pointing

    Endif

  Endif

  Dec Application.Busy

End

Public Sub schedulertimer_Timer()

  With schedulernumber

    If .Text = Null

      If ssds <> Null Then .Text = ssds & "s"

    Else If .Text = "1s"

      schedulerstart_Click

    Else

      ssds = ssds - 1
      .Text = ssds & "s"

    Endif

  End With

End

Public Sub schedulerlater_Click()

  If IsDir(fsdir) And Access(fsdir, gb.Write) Then File.Save(fsdir & "/.sbschedule", Null)
  systembackgui.Close

End

Public Sub schedulerstart_Click()

  schedulertimer.Stop
  function2.Text &= " " & ("scheduler")
  newrestorepoint_Click

End

Public Sub silentmode_Click()

  If Not silentmode.Value

    smode = "off"
    configfileupdate

    If ssds <> 10

      seconddown.Enabled = True
      seconddown.Mouse = Mouse.Pointing

    Endif

    If ssds <> 99

      secondup.Enabled = True
      secondup.Mouse = Mouse.Pointing

    Endif

    windowposition.Enabled = True
    windowposition.Mouse = Mouse.Pointing

  Else If smode = "off"

    smode = "on"
    configfileupdate

    With secondup

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With seconddown

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    windowposition.Enabled = False
    windowposition.Mouse = Mouse.Default

  Endif

End

Private Sub dayupset()

  sdys = sdys + 1
  schedulerday.Text = sdys & " " & ("day(s)")

  With daydown

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If sdys = 7

    dayup.Enabled = False
    dayup.Mouse = Mouse.Default

  Endif

  With minutedown

    If Val(smts) > 0 And Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

End

Public Sub dayup_MouseDown()

  If Mouse.Left

    With dayuptimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub dayup_MouseUp()

  If Mouse.Left

    dayuptimer.Stop
    If dayup.Enabled And Mouse.Inside(dayup) Then dayupset
    configfileupdate

  Endif

End

Public Sub dayuptimer_Timer()

  If dayuptimer.Delay <> 50 Then dayuptimer.Delay = 50
  If dayup.Enabled And Mouse.Inside(dayup) Then dayupset

End

Private Sub daydownset()

  sdys = sdys - 1
  schedulerday.Text = sdys & " " & ("day(s)")

  With dayup

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If sdys = 0

    If shrs = 0

      If Val(smts) < 30

        smts = 30
        schedulerminute.Text = smts & " " & ("minute(s)")

      Endif

      With minutedown

        If Val(smts) <= 30 And .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

    daydown.Enabled = False
    daydown.Mouse = Mouse.Default

  Endif

End

Public Sub daydown_MouseDown()

  If Mouse.Left

    With daydowntimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub daydown_MouseUp()

  If Mouse.Left

    daydowntimer.Stop
    If daydown.Enabled And Mouse.Inside(daydown) Then daydownset
    configfileupdate

  Endif

End

Public Sub daydowntimer_Timer()

  If daydowntimer.Delay <> 50 Then daydowntimer.Delay = 50
  If daydown.Enabled And Mouse.Inside(daydown) Then daydownset

End

Private Sub hourupset()

  shrs = shrs + 1
  schedulerhour.Text = shrs & " " & ("hour(s)")

  With hourdown

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If shrs = 23

    hourup.Enabled = False
    hourup.Mouse = Mouse.Default

  Endif

  With minutedown

    If Val(smts) > 0 And Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

End

Public Sub hourup_MouseDown()

  If Mouse.Left

    With houruptimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub hourup_MouseUp()

  If Mouse.Left

    houruptimer.Stop
    If hourup.Enabled And Mouse.Inside(hourup) Then hourupset
    configfileupdate

  Endif

End

Public Sub houruptimer_Timer()

  If houruptimer.Delay <> 50 Then houruptimer.Delay = 50
  If hourup.Enabled And Mouse.Inside(hourup) Then hourupset

End

Private Sub hourdownset()

  shrs = shrs - 1
  schedulerhour.Text = shrs & " " & ("hour(s)")

  With hourup

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If shrs = 0

    If sdys = 0

      If Val(smts) < 30

        smts = 30
        schedulerminute.Text = smts & " " & ("minute(s)")

      Endif

      With minutedown

        If Val(smts) <= 30 And .Enabled

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

    hourdown.Enabled = False
    hourdown.Mouse = Mouse.Default

  Endif

End

Public Sub hourdown_MouseDown()

  If Mouse.Left

    With hourdowntimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub hourdown_MouseUp()

  If Mouse.Left

    hourdowntimer.Stop
    If hourdown.Enabled And Mouse.Inside(hourdown) Then hourdownset
    configfileupdate

  Endif

End

Public Sub hourdowntimer_Timer()

  If hourdowntimer.Delay <> 50 Then hourdowntimer.Delay = 50
  If hourdown.Enabled And Mouse.Inside(hourdown) Then hourdownset

End

Private Sub minuteupset()

  If smts = 55 Then smts = smts + 4 Else smts = smts + 5
  schedulerminute.Text = smts & " " & ("minute(s)")

  With minutedown

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If smts = 59

    minuteup.Enabled = False
    minuteup.Mouse = Mouse.Default

  Endif

End

Public Sub minuteup_MouseDown()

  If Mouse.Left

    With minuteuptimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub minuteup_MouseUp()

  If Mouse.Left

    minuteuptimer.Stop
    If minuteup.Enabled And Mouse.Inside(minuteup) Then minuteupset
    configfileupdate

  Endif

End

Public Sub minuteuptimer_Timer()

  If minuteuptimer.Delay <> 50 Then minuteuptimer.Delay = 50
  If minuteup.Enabled And Mouse.Inside(minuteup) Then minuteupset

End

Private Sub minutedownset()

  If smts = 59 Then smts = smts - 4 Else smts = smts - 5
  schedulerminute.Text = smts & " " & ("minute(s)")

  With minuteup

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  With minutedown

    If sdys = 0 And shrs = 0 And smts = 30

      .Enabled = False
      .Mouse = Mouse.Default

    Else If smts = 0

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub minutedown_MouseDown()

  If Mouse.Left

    With minutedowntimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub minutedown_MouseUp()

  If Mouse.Left

    minutedowntimer.Stop
    If minutedown.Enabled And Mouse.Inside(minutedown) Then minutedownset
    configfileupdate

  Endif

End

Public Sub minutedowntimer_Timer()

  If minutedowntimer.Delay <> 50 Then minutedowntimer.Delay = 50
  If minutedown.Enabled And Mouse.Inside(minutedown) Then minutedownset

End

Private Sub secondupset()

  If ssds = 95 Then ssds = ssds + 4 Else ssds = ssds + 5
  schedulersecond.Text = ssds & " " & ("seconds")

  With seconddown

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If ssds = 99

    secondup.Enabled = False
    secondup.Mouse = Mouse.Default

  Endif

End

Public Sub secondup_MouseDown()

  If Mouse.Left

    With seconduptimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub secondup_MouseUp()

  If Mouse.Left

    seconduptimer.Stop
    If secondup.Enabled And Mouse.Inside(secondup) Then secondupset
    configfileupdate

  Endif

End

Public Sub seconduptimer_Timer()

  If seconduptimer.Delay <> 50 Then seconduptimer.Delay = 50
  If secondup.Enabled And Mouse.Inside(secondup) Then secondupset

End

Private Sub seconddownset()

  If ssds = 99 Then ssds = ssds - 4 Else ssds = ssds - 5
  schedulersecond.Text = ssds & " " & ("seconds")

  With secondup

    If Not .Enabled

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If ssds = 10

    seconddown.Enabled = False
    seconddown.Mouse = Mouse.Default

  Endif

End

Public Sub seconddown_MouseDown()

  If Mouse.Left

    With seconddowntimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub seconddown_MouseUp()

  If Mouse.Left

    seconddowntimer.Stop
    If seconddown.Enabled And Mouse.Inside(seconddown) Then seconddownset
    configfileupdate

  Endif

End

Public Sub seconddowntimer_Timer()

  If seconddowntimer.Delay <> 50 Then seconddowntimer.Delay = 50
  If seconddown.Enabled And Mouse.Inside(seconddown) Then seconddownset

End

Public Sub windowposition_Click()

  With windowposition

    Select Case True

      Case .Text = ("Top left") And wpos <> "topleft"

        wpos = "topleft"
        configfileupdate

      Case .Text = ("Top right") And wpos <> "topright"

        wpos = "topright"
        configfileupdate

      Case .Text = ("Center") And wpos <> "center"

        wpos = "center"
        configfileupdate

      Case .Text = ("Bottom left") And wpos <> "bottomleft"

        wpos = "bottomleft"
        configfileupdate

      Case .Text = ("Bottom right") And wpos <> "bottomright"

        wpos = "bottomright"
        configfileupdate

    End Select

  End With

End

Private Sub configfileupdate()

  File.Save("/etc/systemback.conf", "storagedir=" & sdir & "\nliveworkdir=" & lwdir & "\npointsnumber=" & pnumber & "\ntimer=" & stimer & "\nschedule=" & sdys & ":" & shrs & ":" & smts & ":" & ssds & "\nsilentmode=" & smode & "\nwindowposition=" & wpos & "\n")

End

Public Sub dirchoose_Select()

  If dirpath.Text <> dirchoose.Key Then dirpath.Text = dirchoose.Key

  If dirchoose[dirchoose.Key].Picture = Picture["dirx.png"]

    If dirpath.Foreground = Color.Default Then dirpath.Foreground = Color.Red

    With dirchooseok

      If .Enabled

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

  Else

    If dirpath.Foreground = Color.Red Then dirpath.Foreground = Color.Default

    With dirchooseok

      If Not .Enabled

        .Enabled = True
        .Mouse = Mouse.Pointing

      Endif

    End With

  Endif

End

Public Sub dirchoose_Expand()

  Dim item, sitem As String

  With dirchoose

    If dirchoose[.Key].Picture <> Picture["dirx.png"]

      Inc Application.Busy

      If IsDir(.Key)

        For Each item In Dir(.Key, "*", gb.Directory)

          If .Exist(.Key & "/" & item) And dirchoose[.Key & "/" & item].Picture <> Picture["dirx.png"] And dirchoose[.Key & "/" & item].Count = 0

            Try File.Save(.Key & "/" & item & "/dacc5b5f4502_sbdirtestfile", Null)

            If Error

              dirchoose[.Key & "/" & item].Picture = Picture["dirx.png"]

            Else

              Chmod .Key & "/" & item & "/dacc5b5f4502_sbdirtestfile" To "rwxrwxrw-"

              If Stat(.Key & "/" & item & "/dacc5b5f4502_sbdirtestfile").Auth = "rwxrwxrw-"

                For Each sitem In Dir(.Key & "/" & item, "*", gb.Directory)

                  If .Exist(.Key & "/" & item & "/" & sitem)

                    Break

                  Else If sitem = "Systemback"

                    .Add(.Key & "/" & item & "/" & sitem, sitem, Picture["dirx.png"], .Key & "/" & item)
                    If Exist(.Key & "/" & item & "/Systemback/.sbschedule") And function1.Text = ("Storage directory") Then dirchoose[.Key & "/" & item].Picture = Picture["isdir.png"]

                  Else

                    .Add(.Key & "/" & item & "/" & sitem, sitem,, .Key & "/" & item)

                  Endif

                Next

              Else

                dirchoose[.Key & "/" & item].Picture = Picture["dirx.png"]

              Endif

              Kill .Key & "/" & item & "/dacc5b5f4502_sbdirtestfile"

            Endif

          Endif

        Next

      Else

        dirchoose[.Key].Picture = Picture["dirx.png"]
        dirchoose[.Key].Expanded = False
        dirchooseok.Enabled = False
        dirchooseok.Mouse = Mouse.Default
        dirpath.Foreground = Color.Red

      Endif

      Dec Application.Busy

    Else

      dirchoose[.Key].Expanded = False

    Endif

  End With

End

Public Sub dirrefresh_Click()

  Dim item, sitem As String
  Dim usrs As String = File.Load("/etc/passwd")

  Inc Application.Busy

  With dirchoose

    If .Count <> 0 Then .Clear

    For Each item In Dir("/", "*", gb.Directory)

      If item Like "{bin,boot,cdrom,dev,etc,lib,opt,proc,root,run,sbin,selinux,srv,sys,tmp,usr,var}" Or item Like "lib{32,64}"

        .Add("/" & item, item, Picture["dirx.png"])

      Else

        Try File.Save("/" & item & "/dacc5b5f4502_sbdirtestfile", Null)

        If Error

          .Add("/" & item, item, Picture["dirx.png"])

        Else

          Chmod "/" & item & "/dacc5b5f4502_sbdirtestfile" To "rwxrwxrw-"

          If Stat("/" & item & "/dacc5b5f4502_sbdirtestfile").Auth = "rwxrwxrw-"

            If Exist("/" & item & "/Systemback/.sbschedule") And If systembackpanel.Visible Or function1.Text = ("Storage directory") Then .Add("/" & item, item, Picture["isdir.png"]) Else .Add("/" & item, item)

            For Each sitem In Dir("/" & item, "*", gb.Directory)

              If item = "home" And usrs Like "*:/home/" & sitem & ":*" Or If sitem = "Systemback" Then .Add("/" & item & "/" & sitem, sitem, Picture["dirx.png"], "/" & item) Else .Add("/" & item & "/" & sitem, sitem,, "/" & item)

            Next

          Else

            .Add("/" & item, item, Picture["dirx.png"])

          Endif

          Kill "/" & item & "/dacc5b5f4502_sbdirtestfile"

        Endif

      Endif

    Next

    With dirpath

      If dirchoose.Exist("/home")

        dirchoose["/home"].Selected = True

      Else If .Text <> "/"

        .Text = "/"
        If .Foreground <> Color.Red Then .Foreground = Color.Red

        With dirchooseok

          If .Enabled

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

      Endif

    End With

  End With

  Dec Application.Busy

End

Public Sub dirchoose_KeyRelease()

  If Key.Code = Key.F5

    dirrefresh_Click

  Else If Key.Code = Key.Enter Or Key.Code = Key.Return Or Key.Code = Key.Space

    If Not dirchoose.Current.Expanded Then dirchoose.Current.Expanded = True Else dirchoose.Current.Expanded = False

  Endif

End

Public Sub itemslist_Expand()

  Dim ofile As File
  Dim cline, item, sitem, usr As String
  Dim check As Boolean

  Inc Application.Busy

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If cline Like "*:/home/*"

      usr = Left(cline, InStr(cline, ":") - 1)

      If IsDir("/home/" & usr) And IsDir("/home/" & usr & "/" & itemslist.Key)

        If Stat("/home/" & usr & "/" & itemslist.Key).Type = gb.Directory

          If check <> True Then check = True

          For Each item In Dir("/home/" & usr & "/" & itemslist.Key)

            If Stat("/home/" & usr & "/" & itemslist.Key & "/" & item).Type = gb.Directory And itemslist.Exist(itemslist.Key & "/" & item)

              If itemslist[itemslist.Key & "/" & item].Picture <> Picture["dir.png"] Then itemslist[itemslist.Key & "/" & item].Picture = Picture["dir.png"]

              For Each sitem In Dir("/home/" & usr & "/" & itemslist.Key & "/" & item)

                If excludedlist.Find(itemslist.Key & "/" & item & "/" & sitem) = -1 And itemslist.Key & "/" & item & "/" & sitem <> ".local/share/Trash" And Not itemslist.Exist(itemslist.Key & "/" & item & "/" & sitem) Then itemslist.Add(itemslist.Key & "/" & item & "/" & sitem, sitem,, itemslist.Key & "/" & item)

              Next

            Endif

          Next

        Endif

      Endif

    Endif

  Wend
  Close #ofile

  For Each item In Dir("/root")

    If IsDir("/root/" & itemslist.Key)

      If Stat("/root/" & itemslist.Key).Type = gb.Directory

        If check <> True Then check = True

        For Each item In Dir("/root/" & itemslist.Key)

          If Stat("/root/" & itemslist.Key & "/" & item).Type = gb.Directory And itemslist.Exist(itemslist.Key & "/" & item)

            If itemslist[itemslist.Key & "/" & item].Picture <> Picture["dir.png"] Then itemslist[itemslist.Key & "/" & item].Picture = Picture["dir.png"]

            For Each sitem In Dir("/root/" & itemslist.Key & "/" & item)

              If excludedlist.Find(itemslist.Key & "/" & item & "/" & sitem) = -1 And itemslist.Key & "/" & item & "/" & sitem <> ".local/share/Trash" And Not itemslist.Exist(itemslist.Key & "/" & item & "/" & sitem) Then itemslist.Add(itemslist.Key & "/" & item & "/" & sitem, sitem,, itemslist.Key & "/" & item)

            Next

          Endif

        Next

      Endif

    Endif

  Next

  If Not check Then itemslist[itemslist.Key].Expanded = False
  Dec Application.Busy

End

Public Sub itemslist_KeyRelease()

  If Key.Code = Key.F5

    If pointexclude.Value Then pointexclude_Click Else liveexclude_Click

  Else If Key.Code = Key.Delete

    additem_Click

  Else If itemslist.Key <> Null And If Key.Code = Key.Enter Or Key.Code = Key.Return Or Key.Code = Key.Space

    If itemslist.Current.Picture = Picture["dir.png"]

      If Not itemslist.Current.Expanded Then itemslist.Current.Expanded = True Else itemslist.Current.Expanded = False

    Else

      additem_Click

    Endif

  Endif

End

Public Sub excludedlist_KeyRelease()

  If excludedlist.Index <> -1 And If Key.Code = Key.Enter Or Key.Code = Key.Return Or Key.Code = Key.Delete Or Key.Code = Key.Space Then removeitem_Click

End

Public Sub textoutputwindow_MouseDown()

  If Mouse.Left Then textoutputwindow.Foreground = Color.SelectedBackground

End

Public Sub textoutputwindow_MouseUp()

  If textoutputwindow.Foreground = Color.SelectedBackground

    Unlock slock
    Unlock dlock
    If Component.IsLoaded("gb.gtk")

      Exec ["xterm", "+sb", "-bg", "grey85", "-fg", "grey25", "-fa", "a", "-fs", "9", "-geometry", "80x24+80+70", "-n", ("Systemback text output"), "-T", ("Systemback text output"), "-cr", "grey40", "-selbg", "grey86", "-bw", "0", "-bc", "-bcf", "500", "-bcn", "500", "-e", "GB_GUI=gb.gtk /usr/share/systemback/systembackgui notextoutput welcometext"]

    Else If Component.IsLoaded("gb.gtk3")

      Exec ["xterm", "+sb", "-bg", "grey85", "-fg", "grey25", "-fa", "a", "-fs", "9", "-geometry", "80x24+80+70", "-n", ("Systemback text output"), "-T", ("Systemback text output"), "-cr", "grey40", "-selbg", "grey86", "-bw", "0", "-bc", "-bcf", "500", "-bcn", "500", "-e", "GB_GUI=gb.gtk3 /usr/share/systemback/systembackgui notextoutput welcometext"]

    Else

      Exec ["xterm", "+sb", "-bg", "grey85", "-fg", "grey25", "-fa", "a", "-fs", "9", "-geometry", "80x24+80+70", "-n", ("Systemback text output"), "-T", ("Systemback text output"), "-cr", "grey40", "-selbg", "grey86", "-bw", "0", "-bc", "-bcf", "500", "-bcn", "500", "-e", "GB_GUI=gb.qt4 /usr/share/systemback/systembackgui notextoutput welcometext"]

    Endif

    systembackgui.Close

  Endif

End

Public Sub textoutputwindow_MouseMove()

  If Mouse.Left

    With textoutputwindow

      If Mouse.Inside(textoutputwindow)

        If .Foreground = Color.Background Then .Foreground = Color.SelectedBackground

      Else If .Foreground = Color.SelectedBackground

        .Foreground = Color.Background

      Endif

    End With

  Endif

End

Public Sub function1_DblClick()

  If copypanel.Visible Or excludepanel.Visible Or choosepanel.Visible And If Mouse.Left

    With systembackgui

      If systembackgui.W = Screen.AvailableWidth And systembackgui.H = Screen.AvailableHeight

        .Resize(1, 1)

        Wait 0.15

        .Move(winx, winy, winw, winh)

      Else

        winx = .X
        winy = .Y
        winw = .W
        winh = .H

        .Move(0, 0, Screen.AvailableWidth, Screen.AvailableHeight)

      Endif

    End With

  Endif

End

Public Sub buttonstimer_Timer()

  If Mouse.Inside(buttonspanel)

    With windowmaximize

      If .Visible

        If Mouse.Inside(windowmaximize)

          If .Background = Color.TextForeground Then windowmaximize_Enter

        Else If .Background = Color.TextBackground

          windowmaximize_Leave

        Endif

      Endif

    End With

    If Mouse.Inside(windowminimize)

      If windowminimize.Background = Color.TextForeground Then windowminimize_Enter

    Else If windowminimize.Background = Color.TextBackground

      windowminimize_Leave

    Endif

    With windowclose

      If .Visible

        If Mouse.Inside(windowclose)

          If .Background = Color.TextForeground Then windowclose_Enter

        Else If .Background = Color.TextBackground

          windowclose_Leave

        Endif

      Endif

    End With

  Else

    buttonspanel.Hide
    buttonstimer.Stop

  Endif

End

Public Sub startcancel_Click()

  systembackgui.Close

End

Public Sub admins_Click()

  Dim ofile As File
  Dim cline, char, pfix As String

  With admins

    If .Font.TextWidth(.Text) + 32 < 113

      If .W <> 112 Then .W = 112

    Else If .Font.TextWidth(.Text) + 32 <> .W

      If .Font.TextWidth(.Text) + 32 < 352 - adminstext.W

        .W = .Font.TextWidth(.Text) + 32

      Else If .W < 352 - adminstext.W

        .W = 352 - adminstext.W

      Endif

    Endif

    If hash <> Null Then hash = Null

    ofile = Open "/etc/shadow" For Input
    While Not Eof(ofile)
      Line Input #ofile, cline

      If cline Begins .Text & ":"

        hash = Mid(cline, Len(.Text) + 2, InStr(cline, ":", Len(.Text) + 2) - Len(.Text) - 2)
        Break

      Endif

    Wend
    Close #ofile

  End With

  With adminpassword

    If .Length > 0 Then .Clear

    While Len(pfix) < 16

      char = Mid(chars, Int(Rnd(1, 62)), 1)
      If Right(pfix) <> char Then pfix &= char

    Wend

    If Crypt(Chr(0), hash) = hash

      adminpasswordpipe.Show
      .Enabled = False
      .Mouse = Mouse.Arrow
      admins.Enabled = False
      admins.Mouse = Mouse.Arrow

      With passwordinputok

        .Enabled = True
        .Mouse = Mouse.Pointing
        .SetFocus

      End With

    Else

      .SetFocus

    Endif

  End With

End

Public Sub adminpassword_Change()

  Dim ipasswd As String = adminpassword.Text

  Select Case True

    Case ipasswd = Null

      If adminpassworderror.Visible Then adminpassworderror.Hide

    Case hash = Null

      If Not adminpassworderror.Visible Then adminpassworderror.Show

    Case Crypt(ipasswd, hash) = hash

      Wait 0.3

      If ipasswd = adminpassword.Text

        If adminpassworderror.Visible Then adminpassworderror.Hide
        adminpasswordpipe.Show
        adminpassword.Enabled = False
        adminpassword.Mouse = Mouse.Arrow
        admins.Enabled = False
        admins.Mouse = Mouse.Arrow

        With passwordinputok

          .Enabled = True
          .Mouse = Mouse.Pointing
          .SetFocus

        End With

      Endif

    Case Not adminpassworderror.Visible

      adminpassworderror.Show

  End Select

End

Public Sub passwordinputok_Click()

  If passwordinputok.HasFocus

    Inc Application.Busy
    unitimer.Start
    passwordpanel.Hide
    mainpanel.Show
    systembackpanel.X = 1
    systembackgui.Stacking = 0
    functionmenunext.SetFocus
    nwidth = 698
    nheight = 465
    windowmove

  Endif

End

Public Sub passwordinputok_KeyRelease()

  If Key.Code = Key.Enter Or Key.Code = Key.Return

    passwordinputok_Click

  Endif

End

Public Sub windowsizeworkaround_Timer()

  With systembackgui

    If .W = 700 Or .W = 702 Or .W = 704 Or .W = 706 Or .W = 708 Or .W = 710 Or .W = 508 Or .W = 510 Or .W = 512 Or .W = 514 Or .W = 516 Or .W = 518 Or .W = 404 Or .W = 406 Or .W = 408 Or .W = 410 Or .W = 412 Or .W = 414 Or .W = 378 Or .W = 380 Or .W = 382 Or .W = 384 Or .W = 386 Or .W = 388

      Select Case True

        Case Component.IsLoaded("gb.gtk") Or Component.IsLoaded("gb.gtk3")

          .X = .X - 1

        Case mainpanel.Visible

          .Resize(698, 465)

        Case dialogpanel.Visible

          .Resize(506, 201)

        Case schedulepanel.Visible

          .Resize(402, 161)

        Case Else

          .Resize(376, 224)

      End Select

      windowsizeworkaround.Stop

    Else If wround = 30

      windowsizeworkaround.Stop

    Else

      wround = wround + 1

    Endif

  End With

End
