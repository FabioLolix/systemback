' Gambas class file

Public slock As Stream
Public dlock As Stream
Public wproc As Process
Public cproc As Process
Public sdir As String
Public fsdir As String
Public lwdir As String
Public tmp As String
Public btmp As String = ".dacc5b5f4502_sbbackup"
Public rtmp As String = ".dacc5b5f4502_sbrestore"
Public psize As String
Public ssize As String = 0
Public cssize As String
Public pname As String
Public pname1 As String
Public pname2 As String
Public pname3 As String
Public pname4 As String
Public pname5 As String
Public pname6 As String
Public pname7 As String
Public pname8 As String
Public pname9 As String
Public pname10 As String
Public pname11 As String
Public pname12 As String
Public pname13 As String
Public pname14 As String
Public pname15 As String
Public prun As String
Public cpoint As String
Public dtime As String
Public stimer As String
Public sdys As String
Public shrs As String
Public smts As String
Public ssds As String
Public smode As String
Public wpos As String
Public grub As String = "pc"
Public nwidth As Short
Public nheight As Short
Public winx As Short
Public winy As Short
Public winw As Short
Public winh As Short
Public dnum As Short
Public pnumber As Byte
Public dialog As Byte
Public ppipe As Byte
Public wround As Byte
Public sbstart As Boolean = True
Public wmove As Boolean
Public sstart As Boolean

Public Sub Form_Open()

  Dim ctrl As Control
  Dim item As String
  Dim fheight As Short

  If IsDir("/run/shm")

    tmp = "/run/shm/dacc5b5f4502_sb"

  Else If IsDir("/dev/shm")

    tmp = "/dev/shm/dacc5b5f4502_sb"

  Else

    tmp = "/tmp/dacc5b5f4502_sb"

  Endif

  If Application.Font.Name <> "Ubuntu" And Application.Font.Name <> "FreeSans"

    For Each ctrl In systembackgui.Controls

      ctrl.Font.Name = "FreeSans"

    Next

  Endif

  If Desktop.Resolution <> 96

    fheight = 187 / Label1.Font.Height

    For Each ctrl In systembackgui.Controls

      ctrl.Font.Size = fheight

    Next

  Endif

  If Application.Args.Count = 3 And Application.Args[1] = "schedule"

    sstart = True

    For Each item In Dir(Left(tmp, RInStr(tmp, "/") - 1), "dacc5b5f4502_sb*", gb.File)

      Kill Left(tmp, RInStr(tmp, "/")) & item

    Next

  Else

    If Exist(tmp & "dialog")

      dialog = File.Load(tmp & "dialog")
      Kill tmp & "dialog"

    Else If User.Name = "root"

      Try slock = Lock Left(tmp, RInStr(tmp, "/")) & "systembacklock"

      If Not Error

        Try dlock = Lock "/var/lib/dpkg/lock"

        If Not Error

          For Each item In Dir(Left(tmp, RInStr(tmp, "/") - 1), "dacc5b5f4502_sb*", gb.File)

            Kill Left(tmp, RInStr(tmp, "/")) & item

          Next

        Else

          dialog = 2

        Endif

      Else

        dialog = 1

      Endif

    Else

      dialog = 17

    Endif

  Endif

  dialogpanel.Y = 0
  buttonspanel.Y = 0

  If dialog <> 0

    dialogopen

  Else

    Inc Application.Busy
    unitimer.Start

    If sstart = True

      schedulerpanel.Move(0, 0)
      mainpanel.Hide
      schedulerpanel.Show
      function4.Text &= " " & ("scheduler")

      With Application

        If .Args[2] = "topleft"

          systembackgui.Move(30, 30, 402, 161)

        Else If .Args[2] = "center"

          systembackgui.Move(Screen.W / 2 - 201, Screen.H / 2 - 80, 402, 161)

        Else If .Args[2] = "bottomleft"

          systembackgui.Move(30, Screen.H - 191, 402, 161)

        Else If .Args[2] = "bottomright"

          systembackgui.Move(Screen.W - 432, Screen.H - 191, 402, 161)

        Else

          systembackgui.Move(Screen.W - 432, 30, 402, 161)

        Endif

      End With

      schedulertimer.Start
      systembackgui.Stacking = 1

    Else

      systembackpanel.X = 1
      systembackgui.Move(Screen.W / 2 - 349, Screen.H / 2 - 232, 698, 465)
      If Application.Args[1] = "notextoutput" Then textoutputwindow.Visible = False

    Endif

  Endif

End

Public Sub Form_Close()

  Dim item As String

  If cproc

    If cproc.State = Process.Running Then cproc.Kill

  Endif

  If statuspanel.Visible = False And unitimer.Enabled = True

    For Each item In Dir(Left(tmp, RInStr(tmp, "/") - 1), "dacc5b5f4502_sb*", gb.File)

      Kill Left(tmp, RInStr(tmp, "/")) & item

    Next

  Endif

End

Public Sub Form_Activate()

  If mainpanel.Background <> Color.Foreground

    mainpanel.Background = Color.Foreground
    dialogpanel.Background = Color.Foreground
    statuspanel.Background = Color.Foreground
    schedulerpanel.Background = Color.Foreground
    function1.Foreground = Color.Background
    function2.Foreground = Color.Background
    function3.Foreground = Color.Background
    function4.Foreground = Color.Background
    windowbutton1.Foreground = Color.Background
    windowbutton2.Foreground = Color.Background
    windowbutton3.Foreground = Color.Background
    windowbutton4.Foreground = Color.Background
    textoutputwindow.Foreground = Color.Background

  Endif

End

Public Sub Form_Deactivate()

  If systembackgui.W <> 1

    mainpanel.Background = Color.Darker(Color.Foreground)
    dialogpanel.Background = Color.Darker(Color.Foreground)
    statuspanel.Background = Color.Darker(Color.Foreground)
    schedulerpanel.Background = Color.Darker(Color.Foreground)
    function1.Foreground = Color.Darker(Color.Background)
    function2.Foreground = Color.Darker(Color.Background)
    function3.Foreground = Color.Darker(Color.Background)
    function4.Foreground = Color.Darker(Color.Background)
    windowbutton1.Foreground = Color.Darker(Color.Background)
    windowbutton2.Foreground = Color.Darker(Color.Background)
    windowbutton3.Foreground = Color.Darker(Color.Background)
    windowbutton4.Foreground = Color.Darker(Color.Background)
    textoutputwindow.Foreground = Color.Darker(Color.Background)

  Endif

End

Public Sub point1_Change()

  With pointpipe1

    If point1.Enabled = True

      If point1.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point1.Text = pname1

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point2_Change()

  With pointpipe2

    If point2.Enabled = True

      If point2.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point2.Text = pname2

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point3_Change()

  With pointpipe3

    If point3.Enabled = True

      If point3.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point3.Text = pname3

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point4_Change()

  With pointpipe4

    If point4.Enabled = True

      If point4.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point4.Text = pname4

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point5_Change()

  With pointpipe5

    If point5.Enabled = True

      If point5.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point5.Text = pname5

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point6_Change()

  With pointpipe6

    If point6.Enabled = True

      If point6.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point6.Text = pname6

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point7_Change()

  With pointpipe7

    If point7.Enabled = True

      If point7.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point7.Text = pname7

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point8_Change()

  With pointpipe8

    If point8.Enabled = True

      If point8.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point8.Text = pname8

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point9_Change()

  With pointpipe9

    If point9.Enabled = True

      If point9.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point9.Text = pname9

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point10_Change()

  With pointpipe10

    If point10.Enabled = True

      If point10.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point10.Text = pname10

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point11_Change()

  With pointpipe11

    If point11.Enabled = True

      If point11.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point11.Text = pname11

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point12_Change()

  With pointpipe12

    If point12.Enabled = True

      If point12.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point12.Text = pname12

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point13_Change()

  With pointpipe13

    If point13.Enabled = True

      If point13.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point13.Text = pname13

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point14_Change()

  With pointpipe14

    If point14.Enabled = True

      If point14.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point14.Text = pname14

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub point15_Change()

  With pointpipe15

    If point15.Enabled = True

      If point15.Length = 0

        If .Value = True Then .Value = False
        .Enabled = False
        .Mouse = Mouse.Default

      Else

        If point15.Text = pname15

          If .Value = True Then .Value = False

        Else If .Value = False

          .Value = True

        Endif

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Endif

    Else If .Enabled = True

      If .Value = True Then .Value = False
      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub pointpipe1_Click()

  If ppipe <> 0 Then ppipe = 0

  If pointpipe1.Value = True

    ppipe = ppipe + 1
    cpoint = "S01"
    pname = pname1

  Endif

  If pointpipe2.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "S02"
      pname = pname2

    Endif

  Endif

  If pointpipe3.Value = True

    ppipe = ppipe + 1

    If ppipe = 1
      cpoint = "S03"
      pname = pname3

    Endif

  Endif

  If pointpipe4.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "S04"
      pname = pname4

    Endif

  Endif

  If pointpipe5.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "S05"
      pname = pname5

    Endif

  Endif

  If pointpipe6.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "S06"
      pname = pname6

    Endif

  Endif

  If pointpipe7.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "S07"
      pname = pname7

    Endif

  Endif

  If pointpipe8.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "S08"
      pname = pname8

    Endif

  Endif

  If pointpipe9.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "S09"
      pname = pname9

    Endif

  Endif

  If pointpipe10.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "S10"
      pname = pname10

    Endif

  Endif

  If pointpipe11.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "H01"
      pname = pname11

    Endif

  Endif

  If pointpipe12.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "H02"
      pname = pname12

    Endif

  Endif

  If pointpipe13.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "H03"
      pname = pname13

    Endif

  Endif

  If pointpipe14.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "H04"
      pname = pname14

    Endif

  Endif

  If pointpipe15.Value = True

    ppipe = ppipe + 1

    If ppipe = 1

      cpoint = "H05"
      pname = pname15

    Endif

  Endif

  If ppipe = 0

    With restoremenu

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With storagedirbutton

      If .Enabled = False

        .Enabled = True
        .Mouse = Mouse.Pointing
        storagedir.W = 210
        pointrename.Enabled = False
        pointrename.Mouse = Mouse.Default
        pointdelete.Enabled = False
        pointdelete.Mouse = Mouse.Default

      Endif

    End With

    With pointhighlight

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With repairmenu

      If .Enabled = False

        .Enabled = True
        .Mouse = Mouse.Pointing

      Endif

    End With

    If Exist("/cdrom/casper/filesystem.squashfs") Or Exist("/live/image/live/filesystem.squashfs") Or Exist("/lib/live/mount/medium/live/filesystem.squashfs")

      If Exist("/.excludes")

        With copymenu

          If .Enabled = False

            .Enabled = True
            .Mouse = Mouse.Pointing
            installmenu.Enabled = True
            installmenu.Mouse = Mouse.Pointing

          Endif

        End With

        pname = ("Live image")

      Else

        pname = Null

      Endif

    Else

      With newrestorepoint

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

      With livecreatemenu

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

      pname = ("Currently running system")

    Endif

  Else If ppipe = 1

    With newrestorepoint

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With storagedirbutton

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default
        storagedir.W = 236
        pointrename.Enabled = True
        pointrename.Mouse = Mouse.Pointing
        pointdelete.Enabled = True
        pointdelete.Mouse = Mouse.Pointing

      Endif

    End With

    If pointpipe11.Value = True Or pointpipe12.Value = True Or pointpipe13.Value = True Or pointpipe14.Value = True Or pointpipe15.Value = True

      With pointhighlight

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Else

      With pointhighlight

        If point15.Enabled = False And .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

    Endif

    With restoremenu

      If .Enabled = False And Not Exist("/cdrom/casper/filesystem.squashfs") And Not Exist("/live/image/live/filesystem.squashfs") And Not Exist("/lib/live/mount/medium/live/filesystem.squashfs")

        .Enabled = True
        .Mouse = Mouse.Pointing

      Endif

    End With

    With copymenu

      If .Enabled = False

        .Enabled = True
        .Mouse = Mouse.Pointing
        installmenu.Enabled = True
        installmenu.Mouse = Mouse.Pointing

      Endif

    End With

    With livecreatemenu

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With repairmenu

      If .Enabled = False

        .Enabled = True
        .Mouse = Mouse.Pointing

      Endif

    End With

  Else

    With restoremenu

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    copymenu.Enabled = False
    copymenu.Mouse = Mouse.Default
    installmenu.Enabled = False
    installmenu.Mouse = Mouse.Default
    repairmenu.Enabled = False
    repairmenu.Mouse = Mouse.Default

    With pointhighlight

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

  Endif

End

Public Sub pointpipe2_Click()

  pointpipe1_Click

End

Public Sub pointpipe3_Click()

  pointpipe1_Click

End

Public Sub pointpipe4_Click()

  pointpipe1_Click

End

Public Sub pointpipe5_Click()

  pointpipe1_Click

End

Public Sub pointpipe6_Click()

  pointpipe1_Click

End

Public Sub pointpipe7_Click()

  pointpipe1_Click

End

Public Sub pointpipe8_Click()

  pointpipe1_Click

End

Public Sub pointpipe9_Click()

  pointpipe1_Click

End

Public Sub pointpipe10_Click()

  pointpipe1_Click

End

Public Sub pointpipe11_Click()

  pointpipe1_Click

End

Public Sub pointpipe12_Click()

  pointpipe1_Click

End

Public Sub pointpipe13_Click()

  pointpipe1_Click

End

Public Sub pointpipe14_Click()

  pointpipe1_Click

End

Public Sub pointpipe15_Click()

  pointpipe1_Click

End

Public Sub restoremenu_Click()

  Dim ofile As File
  Dim cline, usr As String

  With grubreinstallrestore

    If Exist(fsdir & "/" & cpoint & "_" & pname & "/usr/sbin/update-grub2") And Exist(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dpkg/info/grub-" & grub & ".list")

      If .Visible = False

        .Show
        grubreinstallrestoredisable.Hide

      Endif

    Else If .Visible = True

      .Hide
      grubreinstallrestoredisable.Show

    Endif

  End With

  With includeusers

    If .Count <> 0 Then .Clear
    .Add(("Everyone"))
    .Add("root")

    ofile = Open "/etc/passwd" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If InStr(cline, ":/home/") <> 0

        usr = Left(cline, InStr(cline, ":") - 1)
        If IsDir("/home/" & usr) Then .Add(usr)

      Endif

    Wend
    Close #ofile

  End With

  If restorenext.Enabled = False Then restorenext.Enabled = True
  systembackpanel.Hide
  restorepanel.Show
  function1.Text = ("System restore")
  restoreback.SetFocus

End

Public Sub copymenu_Click()

  Dim mnts As String

  With grubinstallcopy

    If ppipe = 1

      If Exist(fsdir & "/" & cpoint & "_" & pname & "/usr/sbin/update-grub2") And Exist(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dpkg/info/grub-" & grub & ".list")

        If .Visible = False

          .Show
          grubinstallcopydisable.Hide

        Endif

      Else If .Visible = True

        .Hide
        grubinstallcopydisable.Show

      Endif

    Else If Exist("/usr/sbin/update-grub2") And Exist("/var/lib/dpkg/info/grub-" & grub & ".list")

      If .Visible = False

        .Show
        grubinstallcopydisable.Hide

      Endif

    Else If .Visible = True

      .Hide
      grubinstallcopydisable.Show

    Endif

  End With

  With userdatafilescopy

    If .Visible = False

      .Show
      .Hide

    Endif

  End With

  If partitionsettings.Key <> Null

    mnts = File.Load("/proc/self/mounts")

    If InStr(mnts, " /.sbsystemcopy") <> 0 Or InStr(mnts, " /.sblivesystemwrite") <> 0

      partitionupdate_Click

    Else If partitionsettings[partitionsettings.Key][1] = "/home" And mountpoint.Enabled = False

      mountpoint.Enabled = True

    Endif

  Endif

  systembackpanel.Hide
  copypanel.Show
  function1.Text = ("System copy")
  copyback.SetFocus
  Form_Resize

End

Public Sub installmenu_Click()

  systembackpanel.Hide
  installpanel.Show
  function1.Text = ("System install")
  fullname.SetFocus

End

Public Sub livecreatemenu_Click()

  Dim item As String

  If livelist.Count <> 0 Then livelist.Clear

  With livedelete

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  With liveconvert

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  With livewritestart

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If IsDir(lwdir)

    For Each item In Dir(lwdir, "*.sblive", gb.File)

      With Stat(lwdir & "/" & item)

        If Len(item) > 7 And .Size > 0 And .Type <> gb.Link

          If Exist(lwdir & "/" & Left(item, -7) & ".iso")

            With Stat(lwdir & "/" & Left(item, -7) & ".iso")

              If Len(item) > 7 And .Size > 0 And .Type <> gb.Link

                livelist.Add(Left(item, -7) & " (sblive+iso)")

              Else

                livelist.Add(Left(item, -7) & " (sblive)")

              Endif

            End With

          Else

            livelist.Add(Left(item, -7) & " (sblive)")

          Endif

        Endif

      End With

    Next

  Endif

  If systembackpanel.Visible = True

    systembackpanel.Hide
    livecreatepanel.Show
    function1.Text = ("Live system create")
    livecreateback.SetFocus

  Endif

End

Public Sub repairmenu_Click()

  With systemrepair

    If pname = ("Currently running system") Or pname = Null

      If .Enabled = True

        If grubrepair.Value = False Then grubrepair.Value = True
        .Enabled = False
        .Mouse = Mouse.Default
        fullrepair.Enabled = False
        fullrepair.Mouse = Mouse.Default

      Endif

    Else If .Enabled = False

      If .Value = False Then .Value = True
      .Enabled = True
      .Mouse = Mouse.Pointing
      fullrepair.Enabled = True
      fullrepair.Mouse = Mouse.Pointing

    Endif

  End With

  repairmountpoint_Change

  systembackpanel.Hide
  repairpanel.Show
  function1.Text = ("System repair")
  repairback.SetFocus

End

Public Sub systemupgrade_Click()

  statusstart

  prun = ("Upgrading the system")

  Unlock dlock

  wproc = Exec ["xterm", "+sb", "-bg", "grey85", "-fg", "grey25", "-fa", "a", "-fs", "9", "-geometry", "80x24+80+70", "-n", "System upgrade", "-T", "System upgrade", "-cr", "grey40", "-selbg", "grey86", "-bw", "0", "-bc", "-bcf", "500", "-bcn", "500", "-e", "systemback 2Y4d1b5T6b8A"]
  wprocwait

  If systembackgui.Closed = False

    If Trim(File.Load("/usr/share/systemback/version")) = Left(systembackversion.Text, RInStr(systembackversion.Text, "_") - 1)

      dlock = Lock "/var/lib/dpkg/lock"

      statuspanel.Hide
      mainpanel.Show
      functionmenunext.SetFocus
      nwidth = 698
      nheight = 465
      windowmove

    Else

      Unlock slock

      If textoutputwindow.Visible = True

        If Component.IsLoaded("gb.gtk") Then Exec ["/usr/share/systemback/systembackgui"] With ["GB_GUI=gb.gtk"] Else Exec ["/usr/share/systemback/systembackgui"] With ["GB_GUI=gb.qt4"]

      Else If Component.IsLoaded("gb.gtk")

        Exec ["/usr/share/systemback/systembackgui notextoutput"] With ["GB_GUI=gb.gtk"]

      Else

        Exec ["/usr/share/systemback/systembackgui notextoutput"] With ["GB_GUI=gb.qt4"]

      Endif

      systembackgui.Close

    Endif

  Endif

End

Public Sub excludemenu_Click()

  systembackpanel.Hide
  excludepanel.Show
  function1.Text = ("Exclude")
  excludeback.SetFocus
  Form_Resize

End

Public Sub schedulemenu_Click()

  systembackpanel.Hide
  schedulepanel.Show
  function1.Text = ("Schedule")
  timerback.SetFocus

End

Public Sub aboutmenu_Click()

  systembackpanel.Hide
  aboutpanel.Show
  function1.Text = ("About")
  aboutback.SetFocus

End

Public Sub licensemenu_Click()

  With license

    If .Text = Null

      Inc Application.Busy
      .Text = File.Load("/usr/share/common-licenses/GPL-3")
      .Line = 0
      Dec Application.Busy

    Endif

  End With

  aboutpanel.Hide
  licensepanel.Show
  function1.Text = ("License")
  licenseback.SetFocus

End

Public Sub restoreback_Click()

  If restorepanel.Visible = True Then restorepanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenunext.SetFocus

End

Public Sub copyback_Click()

  copypanel.Hide

  If function1.Text = ("System copy")

    systembackpanel.Show
    function1.Text = "Systemback"
    functionmenunext.SetFocus

  Else

    installpanel.Show
    fullname.SetFocus

  Endif

  nwidth = 698
  nheight = 465
  windowmove

End

Public Sub installback_Click()

  installpanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenunext.SetFocus

End

Public Sub livecreateback_Click()

  livecreatepanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenunext.SetFocus

End

Public Sub repairback_Click()

  repairpanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenunext.SetFocus

End

Public Sub excludeback_Click()

  excludepanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenunext.SetFocus

  nwidth = 698
  nheight = 465
  windowmove

End

Public Sub timerback_Click()

  schedulepanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenuback.SetFocus

End

Public Sub aboutback_Click()

  aboutpanel.Hide
  systembackpanel.Show
  function1.Text = "Systemback"
  functionmenuback.SetFocus

End

Public Sub licenseback_Click()

  licensepanel.Hide
  aboutpanel.Show
  function1.Text = ("About")
  aboutback.SetFocus

End

Sub dialogopen()

  If systembackgui.Closed = True

    File.Save(tmp & "dialog", dialog)
    If Component.IsLoaded("gb.gtk") Then Exec ["/usr/share/systemback/systembackgui"] With ["GB_GUI=gb.gtk"] Else Exec ["/usr/share/systemback/systembackgui"] With ["GB_GUI=gb.qt4"]

  Else

    If dialogcancel.Visible = True Then dialogcancel.Hide
    If dialogquestion.Visible = True Then dialogquestion.Hide
    If dialoginfo.Visible = True Then dialoginfo.Hide
    If dialogerror.Visible = True Then dialogerror.Hide
    If dialognumber.Visible = True Then dialognumber.Hide

    If dialog = 1

      dialogerror.Show
      dialogtext.Text = ("Another Systemback process is currently running, please wait until it finishes.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 2

      dialogerror.Show
      dialogtext.Text = ("Unable to get exclusive lock!<p>First, close all package manager.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 3

      dialogerror.Show
      dialogtext.Text = ("The specified name contains unsupported character(s)!<p>Please enter a new name!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 4

      dialogquestion.Show
      dialogtext.Text = ("Restore the system files to the following restore point:") & "<p><b>" & pname & "</b>"
      If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
      dialogcancel.Show

    Else If dialog = 5

      dialogquestion.Show
      dialogtext.Text = ("Repair the system files with the following restore point:") & "<p><b>" & pname & "</b>"
      If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
      dialogcancel.Show

    Else If dialog = 6

      dialogquestion.Show
      dialogtext.Text = ("Repair the complete system with the following restore point:") & "<p><b>" & pname & "</b>"
      If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
      dialogcancel.Show

    Else If dialog = 7

      dialogquestion.Show
      dialogtext.Text = ("Restore the complete user(s) configuration files to the following restore point:") & "<p><b>" & pname & "</b>"
      If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
      dialogcancel.Show

    Else If dialog = 8

      dialogquestion.Show
      dialogtext.Text = ("Restore the user(s) configuration files to the following restore point:") & "<p><b>" & pname & "</b>"
      If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
      dialogcancel.Show

    Else If dialog = 9

      dialoginfo.Show
      dialogtext.Text = ("User(s) configuration files full restoration are completed.<p>The X server will restart automatically within 30 seconds.")
      If dialogok.Text <> ("X restart") Then dialogok.Text = ("X restart")
      dialogcancel.Show
      dialognumber.Show
      dialogtimer.Start

    Else If dialog = 10

      dialoginfo.Show
      dialogtext.Text = ("User(s) configuration files restoration are completed.<p>The X server will restart automatically within 30 seconds.")
      If dialogok.Text <> ("X restart") Then dialogok.Text = ("X restart")
      dialogcancel.Show
      dialognumber.Show
      dialogtimer.Start

    Else If dialog = 11

      dialogerror.Show
      dialogtext.Text = ("System files repair are completed, but an error occurred while reinstalling GRUB! System may not bootable! (In general, the different architecture is causing the problem.)")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 12

      dialoginfo.Show
      dialogtext.Text = ("Full system repair is completed.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 13

      dialoginfo.Show
      dialogtext.Text = ("System repair is completed.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 14

      dialogquestion.Show
      dialogtext.Text = ("Copy the system, using the following restore point:") & "<p><b>" & pname & "</b>"
      If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
      dialogcancel.Show

    Else If dialog = 15

      dialogquestion.Show
      dialogtext.Text = ("Install the system, using the following restore point:") & "<p><b>" & pname & "</b>"
      If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
      dialogcancel.Show

    Else If dialog = 16

      dialogerror.Show
      dialogtext.Text = ("Restore point creation is aborted! Not enough free disk space to complete the process.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 17

      dialogerror.Show
      dialogtext.Text = ("Root privileges are required for running Systemback!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 18

      dialogquestion.Show
      dialogtext.Text = ("Restore complete system to the following restore point:") & "<p><b>" & pname & "</b>"
      If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
      dialogcancel.Show

    Else If dialog = 19

      dialoginfo.Show
      dialogtext.Text = ("System files restoration are completed.<p>The computer will restart automatically within 30 seconds.")
      If dialogok.Text <> ("Reboot") Then dialogok.Text = ("Reboot")
      dialogcancel.Show
      dialognumber.Show
      dialogtimer.Start

    Else If dialog = 20

      dialoginfo.Show
      dialogtext.Text = ("Full system restoration is completed.<p>The computer will restart automatically within 30 seconds.")
      If dialogok.Text <> ("Reboot") Then dialogok.Text = ("Reboot")
      dialogcancel.Show
      dialognumber.Show
      dialogtimer.Start

    Else If dialog = 21

      dialogerror.Show
      dialogtext.Text = ("The specified partition(s) does not have enough free space to copy the system! The copied system will not function properly!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 22

      dialogerror.Show
      dialogtext.Text = ("System copy is completed, but an error occurred while installing GRUB! Need to manually install a bootloader.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 23

      dialogerror.Show
      dialogtext.Text = ("An error occurred while reinstalling GRUB!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 24

      dialogerror.Show
      dialogtext.Text = ("Full system repair is completed, but an error occurred while reinstalling GRUB! System may not bootable! (In general, the different architecture is causing the problem.)")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 25

      dialoginfo.Show
      dialogtext.Text = ("System copy is completed.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 26

      dialogerror.Show
      dialogtext.Text = ("An error occurred while creating filesystem image!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 27

      dialogerror.Show
      dialogtext.Text = ("An error occurred while creating container file!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 28

      dialoginfo.Show
      dialogtext.Text = ("Live system creation is completed.<p>The created .sblive file can be written to pendrive.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 29

      dialogerror.Show
      dialogtext.Text = ("The selected directory does not have enough free space to create Live system!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 30

      dialogquestion.Show
      dialogtext.Text = ("Format the") & " <b>" & livedevices.Key & "</b>" & (", and write the following Live system image:") & "<p><b>" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & "</b>"
      If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
      dialogcancel.Show

    Else If dialog = 31

      dialogerror.Show
      dialogtext.Text = ("The specified partition could not be mounted!")

      If Exist(tmp & "mounterror")

        dialogtext.Text &= "<p><b>" & File.Load(tmp & "mounterror") & "</b>"
        Kill tmp & "mounterror"

      Endif

      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 32

      dialoginfo.Show
      dialogtext.Text = ("GRUB 2 repair is completed.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 33

      dialoginfo.Show
      dialogtext.Text = ("System install is completed.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 34

      dialogerror.Show
      dialogtext.Text = ("System install is completed, but an error occurred while installing GRUB! Need to manually install a bootloader.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 35

      dialogerror.Show
      dialogtext.Text = ("The specified partition(s) does not have enough free space to install the system! The installed system will not function properly!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 36

      dialogerror.Show
      dialogtext.Text = ("The specified partition could not be formatted (in use or unavailable)!")

      If Exist(tmp & "formaterror")

        dialogtext.Text &= "<p><b>" & File.Load(tmp & "formaterror") & "</b>"
        Kill tmp & "formaterror"

      Endif

      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 37

      dialogerror.Show
      dialogtext.Text = ("An error occurred while reinstalling GRUB! System may not bootable! (In general, the different architecture is causing the problem.)")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 38

      dialogerror.Show
      dialogtext.Text = ("Restore point creation is aborted! There has been critical changes in the file system during this operation.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 39

      dialogerror.Show
      dialogtext.Text = ("System copying is aborted! There has been critical changes in the file system during this operation.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 40

      dialogerror.Show
      dialogtext.Text = ("System installation is aborted! There has been critical changes in the file system during this operation.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 41

      dialogquestion.Show
      dialogtext.Text = ("Repair the GRUB 2 bootloader.")
      If dialogok.Text <> ("Start") Then dialogok.Text = ("Start")
      dialogcancel.Show

    Else If dialog = 42

      dialogerror.Show
      dialogtext.Text = ("The selected partition does not have enough space to write the Live system!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 43

      dialogerror.Show
      dialogtext.Text = ("An error occurred while unpacking Live system files!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 44

      dialoginfo.Show
      dialogtext.Text = ("Live system image write is completed.")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 45

      dialogerror.Show
      dialogtext.Text = ("An error occurred while renaming essential Live files!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 46

      dialogerror.Show
      dialogtext.Text = ("An error occurred while creating .iso image!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Else If dialog = 47

      dialogerror.Show
      dialogtext.Text = ("An error occurred while reading .sblive image!")
      If dialogok.Text <> "OK" Then dialogok.Text = "OK"

    Endif

    If systembackgui.Stacking = 0 Then systembackgui.Stacking = 1
    If mainpanel.Visible = True Then mainpanel.Hide
    If statuspanel.Visible = True Then statuspanel.Hide
    If schedulerpanel.Visible = True Then schedulerpanel.Hide
    If dialogpanel.Visible = False Then dialogpanel.Show
    dialogok.SetFocus

    If systembackgui.W <> dialogpanel.W

      If unitimer.Enabled = True And sstart = False

        nwidth = dialogpanel.W
        nheight = dialogpanel.H
        windowmove

      Else

        systembackgui.Move(Screen.W / 2 - 253, Screen.H / 2 - 100, dialogpanel.W, dialogpanel.H)

      Endif

    Endif

  Endif

End

Public Sub dialogtimer_Timer()

  dialognumber.Text = Val(Left(dialognumber.Text, -1)) - 1
  dialognumber.Text &= "s"
  If dialognumber.Text = "0s" And If dialogok.Text = ("Reboot") Or dialogok.Text = ("X restart") Then dialogok_Click

End

Sub statusstart()

  If systembackgui.Stacking = 1 Then systembackgui.Stacking = 0
  If mainpanel.Visible = True Then mainpanel.Hide
  If dialogpanel.Visible = True Then dialogpanel.Hide
  If schedulerpanel.Visible = True Then schedulerpanel.Hide

  statuspanel.Show
  nwidth = statuspanel.W
  nheight = statuspanel.H
  If sstart = False Then windowmove

End

Sub pointupgrade()

  Dim item As String
  Dim rerun As Boolean

  While rerun = False

    rerun = True

    If pname1 <> Null Then pname1 = Null
    If pname2 <> Null Then pname2 = Null
    If pname3 <> Null Then pname3 = Null
    If pname4 <> Null Then pname4 = Null
    If pname5 <> Null Then pname5 = Null
    If pname6 <> Null Then pname6 = Null
    If pname7 <> Null Then pname7 = Null
    If pname8 <> Null Then pname8 = Null
    If pname9 <> Null Then pname9 = Null
    If pname10 <> Null Then pname10 = Null
    If pname11 <> Null Then pname11 = Null
    If pname12 <> Null Then pname12 = Null
    If pname13 <> Null Then pname13 = Null
    If pname14 <> Null Then pname14 = Null
    If pname15 <> Null Then pname15 = Null

    If IsDir(fsdir) And Access(fsdir, gb.Write) = True

      For Each item In Dir(fsdir, "[^.]*", gb.Directory)

        If Stat(fsdir & "/" & item).Type <> gb.Link

          If Left(item, 4) = "S01_"

            pname1 = Right(item, -4)

          Else If Left(item, 4) = "S02_"

            pname2 = Right(item, -4)

          Else If Left(item, 4) = "S03_"

            pname3 = Right(item, -4)

          Else If Left(item, 4) = "S04_"

            pname4 = Right(item, -4)

          Else If Left(item, 4) = "S05_"

            pname5 = Right(item, -4)

          Else If Left(item, 4) = "S06_"

            pname6 = Right(item, -4)

          Else If Left(item, 4) = "S07_"

            pname7 = Right(item, -4)

          Else If Left(item, 4) = "S08_"

            pname8 = Right(item, -4)

          Else If Left(item, 4) = "S09_"

            pname9 = Right(item, -4)

          Else If Left(item, 4) = "S10_"

            pname10 = Right(item, -4)

          Else If Left(item, 4) = "H01_"

            pname11 = Right(item, -4)

          Else If Left(item, 4) = "H02_"

            pname12 = Right(item, -4)

          Else If Left(item, 4) = "H03_"

            pname13 = Right(item, -4)

          Else If Left(item, 4) = "H04_"

            pname14 = Right(item, -4)

          Else If Left(item, 4) = "H05_"

            pname15 = Right(item, -4)

          Endif

        Endif

      Next

    Endif

    With point1

      If pname1 <> Null And InStr(pname1, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname1

        Else If .Text <> pname1

          .Text = pname1

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With
    With point2

      If pname2 <> Null And InStr(pname2, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname2

        Else If .Text <> pname2

          .Text = pname2

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With
    With point3

      If pname3 <> Null And InStr(pname3, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber = 3 And .Background = Color.Default Then .Background = 16738151
          .Text = pname3

        Else If .Text <> pname3

          .Text = pname3

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With
    With point4

      If pname4 <> Null And InStr(pname4, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 5 And .Background = Color.Default Then .Background = 16738151
          .Text = pname4

        Else If .Text <> pname4

          .Text = pname4

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber = 3

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With
    With point5

      If pname5 <> Null And InStr(pname5, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 6 And .Background = Color.Default Then .Background = 16738151
          .Text = pname5

        Else If .Text <> pname5

          .Text = pname5

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 5

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With
    With point6

      If pname6 <> Null And InStr(pname6, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 7 And .Background = Color.Default Then .Background = 16738151
          .Text = pname6

        Else If .Text <> pname6

          .Text = pname6

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 6

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With
    With point7

      If pname7 <> Null And InStr(pname7, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 8 And .Background = Color.Default Then .Background = 16738151
          .Text = pname7

        Else If .Text <> pname7

          .Text = pname7

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 7

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With
    With point8

      If pname8 <> Null And InStr(pname8, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 9 And .Background = Color.Default Then .Background = 16738151
          .Text = pname8

        Else If .Text <> pname8

          .Text = pname8

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 8

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With
    With point9

      If pname9 <> Null And InStr(pname9, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          If pnumber < 10 And .Background = Color.Default Then .Background = 16738151
          .Text = pname9

        Else If .Text <> pname9

          .Text = pname9

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 9

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With
    With point10

      If pname10 <> Null And InStr(pname10, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          If .Background = Color.Default Then .Background = 16738151
          .Text = pname10

        Else If .Text <> pname10

          .Text = pname10

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Background = 16738151 Then .Background = Color.Default

        If pnumber < 10

          If .Text <> ("not used") Then .Text = ("not used")

        Else

          If .Text <> ("empty") Then .Text = ("empty")

        Endif

      Endif

    End With
    With point11

      If pname11 <> Null And InStr(pname11, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname11

        Else If .Text <> pname11

          .Text = pname11

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With
    With point12

      If pname12 <> Null And InStr(pname12, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname12

        Else If .Text <> pname12

          .Text = pname12

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With
    With point13

      If pname13 <> Null And InStr(pname13, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname13

        Else If .Text <> pname13

          .Text = pname13

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With
    With point14

      If pname14 <> Null And InStr(pname14, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname14

        Else If .Text <> pname14

          .Text = pname14

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With
    With point15

      If pname15 <> Null And InStr(pname15, " ") = 0

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Text
          .Text = pname15

        Else If .Text <> pname15

          .Text = pname15

        Endif

      Else If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Arrow
        If .Text <> ("empty") Then .Text = ("empty")

      Endif

    End With

    If pname15 <> Null And pname14 = Null

      Move fsdir & "/H05_" & pname15 To fsdir & "/H04_" & pname15
      rerun = False

    Endif

    If pname14 <> Null And pname13 = Null

      Move fsdir & "/H04_" & pname14 To fsdir & "/H03_" & pname14
      If rerun = True Then rerun = False

    Endif

    If pname13 <> Null And pname12 = Null

      Move fsdir & "/H03_" & pname13 To fsdir & "/H02_" & pname13
      If rerun = True Then rerun = False

    Endif

    If pname12 <> Null And pname11 = Null

      Move fsdir & "/H02_" & pname12 To fsdir & "/H01_" & pname12
      If rerun = True Then rerun = False

    Endif

    If pname10 <> Null And pname9 = Null

      Move fsdir & "/S10_" & pname10 To fsdir & "/S09_" & pname10
      If rerun = True Then rerun = False

    Endif

    If pname9 <> Null And pname8 = Null

      Move fsdir & "/S09_" & pname9 To fsdir & "/S08_" & pname9
      If rerun = True Then rerun = False

    Endif

    If pname8 <> Null And pname7 = Null

      Move fsdir & "/S08_" & pname8 To fsdir & "/S07_" & pname8
      If rerun = True Then rerun = False

    Endif

    If pname7 <> Null And pname6 = Null

      Move fsdir & "/S07_" & pname7 To fsdir & "/S06_" & pname7
      If rerun = True Then rerun = False

    Endif

    If pname6 <> Null And pname5 = Null

      Move fsdir & "/S06_" & pname6 To fsdir & "/S05_" & pname6
      If rerun = True Then rerun = False

    Endif

    If pname5 <> Null And pname4 = Null

      Move fsdir & "/S05_" & pname5 To fsdir & "/S04_" & pname5
      If rerun = True Then rerun = False

    Endif

    If pname4 <> Null And pname3 = Null

      Move fsdir & "/S04_" & pname4 To fsdir & "/S03_" & pname4
      If rerun = True Then rerun = False

    Endif

    If pname3 <> Null And pname2 = Null

      Move fsdir & "/S03_" & pname3 To fsdir & "/S02_" & pname3
      If rerun = True Then rerun = False

    Endif

    If pname2 <> Null And pname1 = Null

      Move fsdir & "/S02_" & pname2 To fsdir & "/S01_" & pname2
      If rerun = True Then rerun = False

    Endif

  Wend

End

Public Sub Form_Resize()

  If systembackgui.W > 1 And systembackgui.H > 1

    mainpanel.Resize(systembackgui.W, systembackgui.H)
    function1.W = systembackgui.W
    windowbutton1.X = systembackgui.W - 24
    borderpicture1.W = systembackgui.W

    If choosepanel.Visible = True

      choosepanel.Resize(systembackgui.W - 2, systembackgui.H - 25)
      dirpath.W = choosepanel.W - 32
      dirrefresh.X = choosepanel.W - 32
      dirchoose.Resize(choosepanel.W, choosepanel.H - 80)
      dirchooseok.Move(choosepanel.W - 120, choosepanel.H - 40)
      choosecancel.Move(choosepanel.W - 240, choosepanel.H - 40)
      warning.Y = choosepanel.H - 41

      With chooseresize

        .Move(choosepanel.W - .W, choosepanel.H - .H)

      End With

    Else If copypanel.Visible

      copypanel.Resize(systembackgui.W - 2, systembackgui.H - 25)
      partitionsettingstext.W = copypanel.W
      partitionsettings.Resize(copypanel.W - 154, copypanel.H - 200)
      umount.X = copypanel.W - 128
      mountpointtext.X = copypanel.W - 144
      mountpoint.X = umount.X
      filesystemtext.X = mountpointtext.X
      filesystem.X = umount.X
      format.X = partitionsettings.X + partitionsettings.W + (144 - format.W) / 2
      partitionupdate.X = umount.X
      changepartition.X = copypanel.W - 64
      partitionoptionstext.Y = copypanel.H - 160
      partitionoptionstext.W = copypanel.W
      userdatafilescopy.Y = copypanel.H - 128
      usersettingscopy.Y = userdatafilescopy.Y
      grubinstalltext.Y = copypanel.H - 96
      grubinstallcopy.Y = grubinstalltext.Y
      grubinstallcopydisable.Y = grubinstalltext.Y
      copyback.Y = copypanel.H - 48
      copynext.Move(copypanel.W - 152, copyback.Y)

      With copyresize

        .Move(copypanel.W - .W, copypanel.H - .H)

      End With

    Else

      excludepanel.Resize(systembackgui.W - 2, systembackgui.H - 25)
      itemstext.W = excludepanel.W / 2 - 26
      excludedtext.X = excludepanel.W / 2 + 26
      excludedtext.W = itemstext.W
      itemslist.Resize(excludepanel.W / 2 - 46, excludepanel.H - 160)
      excludedlist.X = excludepanel.W / 2 + 36
      excludedlist.Resize(itemslist.W, itemslist.H)
      additem.Move(excludepanel.W / 2 - 24, 96 + itemslist.H / 2 - 60)
      removeitem.Move(additem.X, 96 + itemslist.H / 2 + 12)
      excludeback.Y = excludepanel.H - 48
      kendektext.Move(excludepanel.W - 472, excludepanel.H - 24)

      With excluderesize

        .Move(excludepanel.W - .W, excludepanel.H - .H)

      End With

    Endif

  Endif

End

Public Sub dialogok_Click()

  If dialogok.Text = "OK"

    If dialog = 23

      If fullrestore.Value = True Then dialog = 20 Else dialog = 19
      dialogopen

    Else If unitimer.Enabled = False Or sstart = True

      systembackgui.Close

    Else If dialog = 3 Or dialog = 21 Or dialog = 26 Or dialog = 27 Or dialog = 28 Or dialog = 29 Or dialog = 31 Or dialog = 35 Or dialog = 36 Or dialog = 39 Or dialog = 40 Or dialog = 42 Or dialog = 43 Or dialog = 44 Or dialog = 45 Or dialog = 46 Or dialog = 47

      If systembackgui.Stacking = 1 Then systembackgui.Stacking = 0
      dialogpanel.Hide
      mainpanel.Show
      nwidth = 698
      nheight = 465
      windowmove

      If systembackpanel.Visible = True

        If functionmenunext.Enabled = True Then functionmenunext.SetFocus Else functionmenuback.SetFocus

      Else If copypanel.Visible = True

        copyback.SetFocus

      Else If livecreatepanel.Visible = True

        livecreateback.SetFocus

      Endif

    Else If dialog = 33

      If Exist("/cdrom/casper/filesystem.squashfs") Or Exist("/live/image/live/filesystem.squashfs") Or Exist("/lib/live/mount/medium/live/filesystem.squashfs") Then systembackgui.Close Else dialogcancel_Click

    Else

      dialogcancel_Click

    Endif

  Else If dialogok.Text = ("Start")

    If dialog = 4 Or dialog = 7 Or dialog = 8 Or dialog = 18

      restore

    Else If dialog = 5 Or dialog = 6 Or dialog = 41

      repair

    Else If dialog = 14 Or dialog = 15

      systemcopy

    Else If dialog = 30

      livewrite

    Endif

  Else If dialogok.Text = ("Reboot")

    If Exist("/sbin/reboot") Then Exec ["reboot"] Else Exec ["systemctl", "reboot"]
    systembackgui.Close

  Else If dialogok.Text = ("X restart")

    Exec ["pkill", "-x", "Xorg"]
    systembackgui.Close

  Endif

End

Public Sub dialogcancel_Click()

  If unitimer.Enabled = True

    If dialog <> 30

      If dialogtimer.Enabled = True

        dialogtimer.Enabled = False
        If dialognumber.Text <> "30s" Then dialognumber.Text = "30s"

      Endif

      If systembackpanel.Visible = False

        systembackpanel.Show
        function1.Text = "Systemback"
        functionmenunext.SetFocus

        If restorepanel.Visible = True

          restorepanel.Hide

        Else If copypanel.Visible = True

          copypanel.Hide

        Else If livecreatepanel.Visible = True

          livecreatepanel.Hide

        Else If repairpanel.Visible = True

          repairpanel.Hide

        Endif

      Endif

      If pointpipe1.Value = True

        pointpipe1.Value = False

      Else If pointpipe2.Value = True

        pointpipe2.Value = False

      Else If pointpipe3.Value = True

        pointpipe3.Value = False

      Else If pointpipe4.Value = True

        pointpipe4.Value = False

      Else If pointpipe5.Value = True

        pointpipe5.Value = False

      Else If pointpipe6.Value = True

        pointpipe6.Value = False

      Else If pointpipe7.Value = True

        pointpipe7.Value = False

      Else If pointpipe8.Value = True

        pointpipe8.Value = False

      Else If pointpipe9.Value = True

        pointpipe9.Value = False

      Else If pointpipe10.Value = True

        pointpipe10.Value = False

      Else If pointpipe11.Value = True

        pointpipe11.Value = False

      Else If pointpipe12.Value = True

        pointpipe12.Value = False

      Else If pointpipe13.Value = True

        pointpipe13.Value = False

      Else If pointpipe14.Value = True

        pointpipe14.Value = False

      Else If pointpipe15.Value = True

        pointpipe15.Value = False

      Endif

    Endif

    If systembackgui.Stacking = 1 Then systembackgui.Stacking = 0
    dialogpanel.Hide
    mainpanel.Show
    nwidth = 698
    nheight = 465
    windowmove

  Else

    systembackgui.Close

  Endif

End

Public Sub newrestorepoint_Click()

  Dim ofile As File
  Dim cline, usr, ldest, cldest, elist, item As String

  statusstart

  For Each item In Dir(fsdir, ".*", gb.Directory)

    If Left(item, 9) = ".DELETED_" Or Left(item, 5) = ".S00_"

      If prun <> ("Deleting incomplete restore point") Then prun = ("Deleting incomplete restore point")
      wproc = Exec ["rm", "-rf", fsdir & "/" & item]
      wprocwait
      If prun = Null Then Return

    Endif

  Next

  If point10.Background = 16738151 Then ppipe = ppipe + 1
  If point9.Background = 16738151 Then ppipe = ppipe + 1
  If point8.Background = 16738151 Then ppipe = ppipe + 1
  If point7.Background = 16738151 Then ppipe = ppipe + 1
  If point6.Background = 16738151 Then ppipe = ppipe + 1
  If point5.Background = 16738151 Then ppipe = ppipe + 1
  If point4.Background = 16738151 Then ppipe = ppipe + 1
  If point3.Background = 16738151 Then ppipe = ppipe + 1

  If ppipe <> 0

    If dnum <> 0 Then dnum = 0

    If point10.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S10_" & pname10 To fsdir & "/.DELETED_" & pname10

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname10]
      wprocwait
      If prun = Null Then Return

    Endif

    If point9.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S09_" & pname9 To fsdir & "/.DELETED_" & pname9

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname9]
      wprocwait
      If prun = Null Then Return

    Endif

    If point8.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S08_" & pname8 To fsdir & "/.DELETED_" & pname8

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname8]
      wprocwait
      If prun = Null Then Return

    Endif

    If point7.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S07_" & pname7 To fsdir & "/.DELETED_" & pname7

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname7]
      wprocwait
      If prun = Null Then Return

    Endif

    If point6.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S06_" & pname6 To fsdir & "/.DELETED_" & pname6

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname6]
      wprocwait
      If prun = Null Then Return

    Endif

    If point5.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S05_" & pname5 To fsdir & "/.DELETED_" & pname5

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname5]
      wprocwait
      If prun = Null Then Return

    Endif

    If point4.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S04_" & pname4 To fsdir & "/.DELETED_" & pname4

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname4]
      wprocwait
      If prun = Null Then Return

    Endif

    If point3.Background = 16738151

      dnum = dnum + 1
      prun = ("Deleting old restore point") & " " & dnum & "/" & ppipe
      Move fsdir & "/S03_" & pname3 To fsdir & "/.DELETED_" & pname3

      If prun = Null Then Return
      wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname3]
      wprocwait
      If prun = Null Then Return

    Endif

  Endif

  prun = ("Checking files and directories")
  elist = "/" & btmp & ",/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,*~"

  ofile = Open "/etc/systemback.excludes" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If Left(cline, 1) = "." Then elist &= ",'/" & cline & "'"

  Wend
  Close #ofile

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If InStr(cline, ":/home/") <> 0

      usr = Left(cline, InStr(cline, ":") - 1)

      If IsDir("/home/" & usr)

        If prun = Null Then Return
        wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete --max-size=8MB --link-dest=../ /home/" & usr & "/ /home/" & usr & "/" & btmp & " --exclude={" & elist & "} --include=/.* --exclude=/*"]
        wprocwait

      Endif

    Endif

  Wend
  Close #ofile

  If prun = Null Then Return
  wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete --max-size=8MB --link-dest=../ /root/ /root/" & btmp & " --exclude={" & elist & "} --include=/.* --exclude=/*"]
  wprocwait
  If prun = Null Then Return

  Try Mkdir "/media/" & btmp

  If Exist("/etc/fstab")

    For Each item In Dir("/media", "[^.]*", gb.Directory)

      ofile = Open "/etc/fstab" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If InStr(cline, "/media/" & item) <> 0

          If prun = Null Then Return
          wproc = Exec ["bash", "-c", "sbsync -rlptgox --delete /media/ /media/" & btmp & " --include=/" & item & " --exclude=/* --include=*/ --exclude=*"]
          wprocwait

        Endif

      Wend
      Close #ofile

    Next

  Endif

  If prun = Null Then Return

  Try Mkdir "/var/log/" & btmp

  For Each item In RDir("/var/log", "[^.]*")

    With Stat("/var/log/" & item)

      If .Type = gb.Directory

        Try Mkdir "/var/log/" & btmp & "/" & item

      Else If .Type = gb.File And Right(item, 2) <> ".0" And Right(item, 2) <> ".1" And Right(item, 3) <> ".gz" And Right(item, 4) <> ".old"

        Try File.Save("/var/log/" & btmp & "/" & item, Null)

      Endif

      Try Chmod "/var/log/" & btmp & "/" & item To .Auth
      Try Chown "/var/log/" & btmp & "/" & item To .User
      Try Chgrp "/var/log/" & btmp & "/" & item To .Group

    End With

  Next

  If ssize = 0

    If Exist(tmp & "usersize") Then Kill tmp & "usersize"

    ofile = Open "/etc/passwd" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If InStr(cline, ":/home/") <> 0

        usr = Left(cline, InStr(cline, ":") - 1)

        If IsDir("/home/" & usr & "/" & btmp)

          If prun = Null Then Return
          wproc = Exec ["bash", "-c", "sbsync -rlptgo --list-only /home/" & usr & "/" & btmp & " | wc -l >>/" & tmp & "usersize"]
          wprocwait

        Endif

      Endif

    Wend
    Close #ofile

    If prun = Null Then Return
    wproc = Exec ["bash", "-c", "sbsync -rlptgo --list-only /root/" & btmp & " | wc -l >>/" & tmp & "usersize ; sbsync -rlptgo --list-only / --include=/{bin,boot,cdrom,dev,etc,lib,lib32,lib64,media,media/" & btmp & ",mnt,opt,proc,run,sbin,selinux,srv,sys,tmp,usr,var,var/log/" & btmp & ",var/lib/ureadahead/debugfs,initrd*,vmlinuz*} --exclude={/*,/proc/*,/run/*,/sys/*,/media/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/var/" & btmp & ",/var/lib/ureadahead/*,/var/log/*,/var/tmp/*,/var/cache/apt/*.bin,/var/cache/apt/*.bin.*,/var/cache/apt/archives/*.deb,/var/run/*,/etc/mtab,/var/lib/udisks/mtab,lost+found,*.dpkg-old,*~} | wc -l >/" & tmp & "systemsize"]
    wprocwait
    If prun = Null Then Return

    ofile = Open tmp & "usersize" For Read
    While Not Eof(ofile)
      Input #ofile, cline

      ssize = ssize + cline

    Wend
    Close #ofile

    Kill tmp & "usersize"
    psize = Trim(File.Load(tmp & "systemsize"))
    Kill tmp & "systemsize"
    ssize = ssize + psize

  Endif

  prun = ("Creating restore point")
  dtime = Year(Now) & "-" & Right("0" & Month(Now), 2) & "-" & Right("0" & Day(Now), 2) & "," & Right("0" & Hour(Now), 2) & "." & Right("0" & Minute(Now), 2) & "." & Right("0" & Second(Now), 2)
  Mkdir fsdir & "/.S00_" & dtime

  If Exist(tmp & "pointsize") Then Kill tmp & "pointsize"
  cproc = Exec ["systemback", "pointsize", dtime] For Read

  Mkdir fsdir & "/.S00_" & dtime & "/home"

  With Stat("/home")

    Chmod fsdir & "/.S00_" & dtime & "/home" To .Auth
    Chown fsdir & "/.S00_" & dtime & "/home" To .User
    Chgrp fsdir & "/.S00_" & dtime & "/home" To .Group

  End With

  If pname1 <> Null

    If pname2 = Null

      ldest = "S01_" & pname1

    Else

      ldest = "{'S01_" & pname1 & "','S02_" & pname2 & "'"
      If pname3 <> Null And pnumber3.Value = False Then ldest &= ",'S03_" & pname3 & "'"
      If pname4 <> Null And pnumber3.Value = False And pnumber4.Value = False Then ldest &= ",'S04_" & pname4 & "'"
      If pname5 <> Null And pnumber3.Value = False And pnumber4.Value = False And pnumber5.Value = False Then ldest &= ",'S05_" & pname5 & "'"
      If pname6 <> Null And pnumber3.Value = False And pnumber4.Value = False And pnumber5.Value = False And pnumber6.Value = False Then ldest &= ",'S06_" & pname6 & "'"
      If pname7 <> Null And pnumber3.Value = False And pnumber4.Value = False And pnumber5.Value = False And pnumber6.Value = False And pnumber7.Value = False Then ldest &= ",'S07_" & pname7 & "'"
      If pname8 <> Null And pnumber3.Value = False And pnumber4.Value = False And pnumber5.Value = False And pnumber6.Value = False And pnumber7.Value = False And pnumber8.Value = False Then ldest &= ",'S08_" & pname8 & "'"
      If pname9 <> Null And pnumber10.Value = True Then ldest &= ",'S09_" & pname9 & "'"
      If pname11 <> Null Then ldest &= ",'H01_" & pname11 & "'"
      If pname12 <> Null Then ldest &= ",'H02_" & pname12 & "'"
      If pname13 <> Null Then ldest &= ",'H03_" & pname13 & "'"
      If pname14 <> Null Then ldest &= ",'H04_" & pname14 & "'"
      If pname15 <> Null Then ldest &= ",'H05_" & pname15 & "'"
      ldest &= "}"

    Endif

  Else If pname11 <> Null

    If pname12 <> Null

      ldest = "H01_" & pname11

    Else

      ldest = "{'H01_" & pname11 & "','H02_" & pname12 & "'"
      If pname13 <> Null Then ldest &= ",'H03_" & pname13 & "'"
      If pname14 <> Null Then ldest &= ",'H04_" & pname14 & "'"
      If pname15 <> Null Then ldest &= ",'H05_" & pname15 & "'"
      ldest &= "}"

    Endif

  Endif

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If InStr(cline, ":/home/") <> 0

      usr = Left(cline, InStr(cline, ":") - 1)

      If IsDir("/home/" & usr & "/" & btmp)

        If ldest <> Null Then cldest = "--link-dest=../../../" & ldest & "/home/" & usr

        If prun = Null Then Return
        wproc = Exec ["bash", "-c", "sbsync -rlptgo " & cldest & " /home/" & usr & "/" & btmp & "/ '" & fsdir & "'/.S00_" & dtime & "/home/" & usr]
        wprocwait
        If prun = Null Then Return
        wproc = Exec ["rm", "-rf", "/home/" & usr & "/" & btmp]
        wprocwait

      Endif

    Endif

  Wend
  Close #ofile

  If ldest <> Null Then cldest = "--link-dest=../../" & ldest & "/root"

  If prun = Null Then Return
  wproc = Exec ["bash", "-c", "sbsync -rlptgo " & cldest & " /root/" & btmp & "/ '" & fsdir & "'/.S00_" & dtime & "/root"]
  wprocwait
  If prun = Null Then Return
  wproc = Exec ["rm", "-rf", "/root/" & btmp]
  wprocwait

  If ldest <> Null Then cldest = "--link-dest=../" & ldest

  If prun = Null Then Return
  wproc = Exec ["bash", "-c", "sbsync -rlptgo " & cldest & " / '" & fsdir & "'/.S00_" & dtime & " --include=/{bin,boot,cdrom,dev,etc,lib,lib32,lib64,media,media/" & btmp & ",mnt,opt,proc,run,sbin,selinux,srv,sys,tmp,usr,var,var/log/" & btmp & ",var/lib/ureadahead/debugfs,initrd*,vmlinuz*} --exclude={/*,/proc/*,/run/*,/sys/*,/media/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/var/" & btmp & ",/var/lib/ureadahead/*,/var/log/*,/var/tmp/*,/var/cache/apt/*.bin,/var/cache/apt/*.bin.*,/var/cache/apt/archives/*.deb,/var/run/*,/etc/mtab,/var/lib/udisks/mtab,lost+found,*.dpkg-old,*~}"]
  wprocwait
  If prun = Null Then Return

  Exec ["rm", "-rf", "/media/" & btmp, "/var/log/" & btmp]

  If wproc.Value = 0

    If Dfree(fsdir) > 104857600

      For Each item In Dir(fsdir & "/.S00_" & dtime & "/media/" & btmp)

        Move fsdir & "/.S00_" & dtime & "/media/" & btmp & "/" & item To fsdir & "/.S00_" & dtime & "/media/" & item

      Next

      Rmdir fsdir & "/.S00_" & dtime & "/media/" & btmp

      For Each item In Dir(fsdir & "/.S00_" & dtime & "/var/log/" & btmp)

        Move fsdir & "/.S00_" & dtime & "/var/log/" & btmp & "/" & item To fsdir & "/.S00_" & dtime & "/var/log/" & item

      Next

      Rmdir fsdir & "/.S00_" & dtime & "/var/log/" & btmp

      If IsDir(fsdir & "/S01_" & pname1)

        Move fsdir & "/S01_" & pname1 To fsdir & "/S02_" & pname1

        If IsDir(fsdir & "/S02_" & pname2)

          Move fsdir & "/S02_" & pname2 To fsdir & "/S03_" & pname2

          If IsDir(fsdir & "/S03_" & pname3)

            Move fsdir & "/S03_" & pname3 To fsdir & "/S04_" & pname3

            If IsDir(fsdir & "/S04_" & pname4)

              Move fsdir & "/S04_" & pname4 To fsdir & "/S05_" & pname4

              If IsDir(fsdir & "/S05_" & pname5)

                Move fsdir & "/S05_" & pname5 To fsdir & "/S06_" & pname5

                If IsDir(fsdir & "/S06_" & pname6)

                  Move fsdir & "/S06_" & pname6 To fsdir & "/S07_" & pname6

                  If IsDir(fsdir & "/S07_" & pname7)

                    Move fsdir & "/S07_" & pname7 To fsdir & "/S08_" & pname7

                    If IsDir(fsdir & "/S08_" & pname8)

                      Move fsdir & "/S08_" & pname8 To fsdir & "/S09_" & pname8

                      If IsDir(fsdir & "/S09_" & pname9)

                        Move fsdir & "/S09_" & pname9 To fsdir & "/S10_" & pname9

                      Endif

                    Endif

                  Endif

                Endif

              Endif

            Endif

          Endif

        Endif

      Endif

      Copy "/etc/systemback.excludes" To fsdir & "/.S00_" & dtime & "/.excludes"
      File.Save(fsdir & "/.S00_" & dtime & "/.pointsize", psize & "\n")
      Move fsdir & "/.S00_" & dtime To fsdir & "/S01_" & dtime
      File.Save(fsdir & "/.sbschedule", Null)

      prun = ("Emptying cache")
      wproc = Exec ["sync"]
      wprocwait
      File.Save("/proc/sys/vm/drop_caches", "3")

      If systembackgui.Closed = False

        If sstart = True

          systembackgui.Close

        Else

          statuspanel.Hide
          mainpanel.Show
          If functionmenunext.Enabled = True Then functionmenunext.SetFocus Else functionmenuback.SetFocus
          nwidth = 698
          nheight = 465
          windowmove

        Endif

      Endif

    Else

      dialog = 16
      dialogopen

    Endif

  Else

    If cproc.State = Process.Running Then cproc.Kill

    dialog = 38
    dialogopen

  Endif

  If sstart = False Then pointupgrade

End

Sub accesserror()

  pointupgrade

  If dialogpanel.Visible = True And dialogquestion.Visible = True

    dialogcancel_Click

  Else If mainpanel.Visible = True

    If restorepanel.Visible = True Then restoreback_Click
    If copypanel.Visible = True Then copyback_Click
    If installpanel.Visible = True Then installback_Click
    If repairpanel.Visible = True Then repairback_Click

  Endif

End

Public Sub unitimer_Timer()

  Dim ofile As File
  Dim cline, cval, cperc, item As String
  Dim cfupdt As Boolean

  If sbstart = True

    sbstart = False
    unitimer.Delay = 500

    If Exist("/etc/systemback.conf")

      ofile = Open "/etc/systemback.conf" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If InStr(cline, "storagedir=") = 1

          sdir = Right(cline, - InStr(cline, "="))

        Else If InStr(cline, "liveworkdir=") = 1

          lwdir = Right(cline, - InStr(cline, "="))

        Else If InStr(cline, "schedule=") = 1

          cval = Right(cline, - InStr(cline, "="))
          sdys = Left(cval, InStr(cval, ":") - 1)
          shrs = Left(cval, InStr(cval, ":", Len(sdys) + 2) - 1)
          shrs = Right(shrs, - InStr(shrs, ":"))
          smts = Right(Left(cval, InStr(cval, ":", Len(sdys & shrs) + 3) - 1), - Len(sdys & shrs) - 2)
          ssds = Right(cval, - RInStr(cval, ":"))

        Else If cline = "pointsnumber=3"

          pnumber = 3
          pnumber3_Click

        Else If cline = "pointsnumber=4"

          pnumber = 4
          pnumber4.Value = True

        Else If cline = "pointsnumber=5"

          pnumber = 5
          pnumber5.Value = True

        Else If cline = "pointsnumber=6"

          pnumber = 6
          pnumber6.Value = True

        Else If cline = "pointsnumber=7"

          pnumber = 7
          pnumber7.Value = True

        Else If cline = "pointsnumber=8"

          pnumber = 8
          pnumber8.Value = True

        Else If cline = "pointsnumber=9"

          pnumber = 9
          pnumber9.Value = True

        Else If cline = "pointsnumber=10"

          pnumber = 10
          pnumber10.Value = True

        Else If cline = "timer=on"

          stimer = "on"

        Else If cline = "timer=off"

          stimer = "off"

        Else If cline = "silentmode=on"

          smode = "on"

        Else If cline = "silentmode=off"

          smode = "off"

        Else If cline = "windowposition=topleft"

          wpos = "topleft"

        Else If cline = "windowposition=topright"

          wpos = "topright"
          windowposition.Index = windowposition.Find(("Top right"))

        Else If cline = "windowposition=center"

          wpos = "center"
          windowposition.Index = windowposition.Find(("Center"))

        Else If cline = "windowposition=bottomleft"

          wpos = "bottomleft"
          windowposition.Index = windowposition.Find(("Bottom left"))

        Else If cline = "windowposition=bottomright"

          wpos = "bottomright"
          windowposition.Index = windowposition.Find(("Bottom right"))

        Endif

      Wend
      Close #ofile

    Endif

    If pnumber = 0

      pnumber = 5
      cfupdt = True
      pnumber5.Value = True

    Endif

    If wpos = Null

      wpos = "topright"
      windowposition.Index = windowposition.Find(("Top right"))
      If cfupdt = False Then cfupdt = True

    Endif

    If sdir = Null

      sdir = "/home"
      If cfupdt = False Then cfupdt = True
      If Not Exist("/home/Systemback") Then Try Mkdir "/home/Systemback"
      If Not Exist("/home/Systemback/.sbschedule") Then Try File.Save("/home/Systemback/.sbschedule", Null)

    Endif

    If lwdir = Null

      lwdir = "/home"
      If cfupdt = False Then cfupdt = True

    Endif

    If Val(sdys) = Null Or Val(shrs) = Null Or Val(smts) = Null Or Val(ssds) = Null

      sdys = 1
      shrs = 0
      smts = 0
      ssds = 10
      If cfupdt = False Then cfupdt = True

    Else If Val(sdys) > 7 Or Val(shrs) > 23 Or Val(smts) > 59 Or Val(ssds) < 10 Or Val(ssds) > 99

      sdys = 1
      shrs = 0
      smts = 0
      ssds = 10
      If cfupdt = False Then cfupdt = True

    Else If sdys = 0 And shrs = 0 And Val(smts) < 30

      smts = 30
      If cfupdt = False Then cfupdt = True

    Endif

    If smode = Null

      smode = "off"
      If cfupdt = False Then cfupdt = True

    Else If smode = "on"

      silentmode.Value = True

    Endif

    If stimer = Null

      stimer = "off"
      If cfupdt = False Then cfupdt = True

    Else If stimer = "on"

      schedulerstate_Click

    Endif

    If cfupdt = True Then configfileupdate
    fsdir = sdir & "/Systemback"
    statuspanel.Move(0, 0)

    If sstart = False

      storagedir.Text = sdir
      liveworkdir.Text = lwdir
      restorepanel.Move(1, 24)
      copypanel.Move(1, 24)
      installpanel.Move(1, 24)
      livecreatepanel.Move(1, 24)
      repairpanel.Move(1, 24)
      excludepanel.Move(1, 24)
      schedulepanel.Move(1, 24)
      aboutpanel.Move(1, 24)
      licensepanel.Move(1, 24)
      choosepanel.Move(1, 24)
      schedulerday.Text = sdys & " " & ("day(s)")
      schedulerhour.Text = shrs & " " & ("hour(s)")
      schedulerminute.Text = smts & " " & ("minute(s)")
      schedulersecond.Text = ssds & " " & ("seconds")
      pshadow.Columns.Count = 3

      With partitionsettings

        .Columns.Count = 5
        .Columns[0].Text = ("Partition")
        .Columns[1].Text = ("Current mount point")
        .Columns[2].Text = ("New mount point")
        .Columns[3].Text = ("Filesystem")
        .Columns[4].Text = ("Format")
        .Columns[0].Alignment = Align.Center
        .Columns[1].Alignment = Align.Center
        .Columns[2].Alignment = Align.Center
        .Columns[3].Alignment = Align.Center
        .Columns[4].Alignment = Align.Center

      End With

      With livedevices

        .Columns.Count = 3
        .Columns[0].Text = ("Partition")
        .Columns[1].Text = ("Device")
        .Columns[2].Text = ("Format")
        .Columns[0].Alignment = Align.Center
        .Columns[1].Alignment = Align.Center
        .Columns[2].Alignment = Align.Center
        .Columns[1].W = .W - .Columns[0].W - .Font.TextWidth(.Columns[2].Text) - 36

      End With

      With includeuserstext

        .W = .Font.TextWidth(.Text) + 1
        includeusers.X = .W + 31
        grubreinstallrestoretext.W = .Font.TextWidth(grubreinstallrestoretext.Text) + 1
        grubreinstallrestore.X = grubreinstallrestoretext.W + 15
        grubreinstallrestoredisable.X = grubreinstallrestore.X
        grubinstalltext.W = .Font.TextWidth(grubinstalltext.Text) + 1
        grubinstallcopy.X = grubinstalltext.W + 15
        grubinstallcopydisable.X = grubinstallcopy.X
        grubreinstallrepairtext.W = .Font.TextWidth(grubreinstallrepairtext.Text) + 1
        grubreinstallrepair.X = grubreinstallrepairtext.W + 15
        grubreinstallrepairdisable.X = grubreinstallrepair.X
        schedulerstatetext.W = .Font.TextWidth(schedulerstatetext.Text) + 1
        schedulerstate.X = schedulerstatetext.W + 15
        schedulersecondtext.W = .Font.TextWidth(schedulersecondtext.Text) + 1
        schedulersecondarea.X = schedulersecondtext.W + 15
        secondup.X = schedulersecondarea.X
        seconddown.X = schedulersecondarea.X
        windowpositiontext.W = .Font.TextWidth(windowpositiontext.Text) + 1
        windowposition.X = windowpositiontext.W + 15
        homepage1.W = .Font.TextWidth(homepage1.Text) + 1
        homepage2.W = .Font.TextWidth(homepage2.Text) + 1
        email.W = .Font.TextWidth(email.Text) + 1
        donate.W = .Font.TextWidth(donate.Text) + 1
        warning.W = warning.Font.TextWidth(warning.Text) + 1

        For Each item In windowposition.List

          If .Font.TextWidth(item) + 32 > windowposition.W Then windowposition.W = .Font.TextWidth(item) + 32

        Next

        format.W = 28 + .Font.TextWidth(format.Text)
        fullrestore.W = 28 + .Font.TextWidth(fullrestore.Text)
        systemrestore.W = 28 + .Font.TextWidth(systemrestore.Text)
        configurationfilesrestore.W = 28 + .Font.TextWidth(configurationfilesrestore.Text)
        keepfiles.W = 28 + .Font.TextWidth(keepfiles.Text)
        autorestoreoptions.W = 28 + .Font.TextWidth(autorestoreoptions.Text)
        skipfstabrestore.W = 28 + .Font.TextWidth(skipfstabrestore.Text)
        autorepairoptions.W = 28 + .Font.TextWidth(autorepairoptions.Text)
        skipfstabrepair.W = 28 + .Font.TextWidth(skipfstabrepair.Text)
        userdatafilescopy.W = 28 + .Font.TextWidth(userdatafilescopy.Text)
        usersettingscopy.W = 28 + .Font.TextWidth(usersettingscopy.Text)
        userdatainclude.W = 28 + .Font.TextWidth(userdatainclude.Text)
        systemrepair.W = 28 + .Font.TextWidth(systemrepair.Text)
        fullrepair.W = 28 + .Font.TextWidth(fullrepair.Text)
        grubrepair.W = 28 + .Font.TextWidth(grubrepair.Text)
        pointexclude.W = 28 + .Font.TextWidth(pointexclude.Text)
        liveexclude.W = 28 + .Font.TextWidth(liveexclude.Text)
        silentmode.W = 28 + .Font.TextWidth(silentmode.Text)

      End With

      With filesystem

        .Add("ext4")
        .Add("ext3")
        .Add("ext2")
        If Exist("/sbin/mkfs.btrfs") Then .Add("btrfs")
        If Exist("/sbin/mkfs.reiserfs") Then .Add("reiserfs")
        If Exist("/sbin/mkfs.jfs") Then .Add("jfs")
        If Exist("/sbin/mkfs.xfs") Then .Add("xfs")

      End With

      systembackversion.Text = Trim(File.Load("/usr/share/systemback/version")) & "_"

      If Component.IsLoaded("gb.gtk") = True

        systembackversion.Text &= "GTK+"

      Else If Component.IsLoaded("gb.qt4")

        systembackversion.Text &= "Qt4"

      Else

        systembackversion.Text &= "?"

      Endif

      With repairmountpoint

        .Text = "/mnt"
        .Add("/mnt")
        .Add("/mnt/home")
        .Add("/mnt/boot")

        If System.Architecture = "x86_64"

          If IsDir("/sys/firmware/efi")

            grub = "efi-amd64"
            .Add("/mnt/boot/efi")

          Else

            Exec ["modprobe", "efivars"] Wait
            If IsDir("/sys/firmware/efi") Then grub = "efi-amd64"

          Endif

        Endif

        .Add("/mnt/usr")
        .Add("/mnt/var")
        .Add("/mnt/opt")
        .Add("/mnt/usr/local")

      End With

      partitionupdate_Click
      livedevicesupdate_Click
      pointexclude_Click

      storagedirbutton.Enabled = True
      storagedirbutton.Mouse = Mouse.Pointing
      repairmenu.Enabled = True
      repairmenu.Mouse = Mouse.Pointing
      aboutmenu.Enabled = True
      aboutmenu.Mouse = Mouse.Pointing

      If Exist("/cdrom/casper/filesystem.squashfs") Or Exist("/live/image/live/filesystem.squashfs") Or Exist("/lib/live/mount/medium/live/filesystem.squashfs")

        If Exist("/.excludes")

          copymenu.Enabled = True
          copymenu.Mouse = Mouse.Pointing
          installmenu.Enabled = True
          installmenu.Mouse = Mouse.Pointing
          pname = ("Live image")
          installmenu_Click

        Endif

      Else

        copymenu.Enabled = True
        copymenu.Mouse = Mouse.Pointing
        installmenu.Enabled = True
        installmenu.Mouse = Mouse.Pointing
        livecreatemenu.Enabled = True
        livecreatemenu.Mouse = Mouse.Pointing
        systemupgrade.Enabled = True
        systemupgrade.Mouse = Mouse.Pointing
        excludemenu.Enabled = True
        excludemenu.Mouse = Mouse.Pointing
        schedulemenu.Enabled = True
        schedulemenu.Mouse = Mouse.Pointing
        pname = ("Currently running system")

      Endif

    Endif

    pointupgrade

    If sstart = True

      schedulerstart.Enabled = True
      schedulerstart.Mouse = Mouse.Pointing

    Endif

    Dec Application.Busy

  Else If statuspanel.Visible = True

    If prun <> Null

      With points

        If .Text = "    "

          .Text = " .  "

        Else If .Text = " .  "

          .Text = " .. "

        Else If .Text = " .. "

          .Text = " ..."

        Else If .Text = " ..."

          .Text = "    "

        Else

          .Text = " .  "

        Endif

        processrun.Text = prun & .Text

      End With

    Endif

    If prun = ("Creating restore point")

      If interrupt.Visible = False

        interruptdisable.Hide
        interrupt.Show

      Endif

      With progressbar

        If progressbartimer.Enabled = True

          progressbartimer.Stop
          If .Value = 1 Then .Value = 0

        Endif

        If Exist(tmp & "pointsize")

          cperc = File.Load(tmp & "pointsize")

          If cperc <> Null

            cperc = Round(cperc / ssize, -2)

            If cperc < "0.01"

              If .Value <> 0.01 Then .Value = 0.01

            Else If cperc <= "0.95"

              If cperc > CStr(.Value) Or .Value = 1 Then .Value = cperc

            Else

              .Value = 1
              If cproc.State = Process.Running Then cproc.Kill

            Endif

          Endif

          Kill tmp & "pointsize"

        Endif

      End With

    Else If prun = ("Copying the system") Or prun = ("Installing the system")

      If interrupt.Visible = False

        interruptdisable.Hide
        interrupt.Show

      Endif

      With progressbar

        If progressbartimer.Enabled = True

          progressbartimer.Stop
          If .Value = 1 Then .Value = 0

        Endif

        If Exist(tmp & "copysize")

          cperc = File.Load(tmp & "copysize")

          If cperc <> Null

            cperc = Round(cperc / cssize, -2)

            If cperc < "0.03"

              If .Value = 0.03 Then .Value = 0 Else .Value = 0.03

            Else If cperc <= "0.99"

              If cperc > CStr(.Value) Or .Value = 1 Then .Value = cperc

            Else

              .Value = 1
              If cproc.State = Process.Running Then cproc.Kill

            Endif

          Endif

          Kill tmp & "copysize"

        Endif

      End With

    Else If prun = ("Writing Live image to USB device")

      If interrupt.Visible = False

        interruptdisable.Hide
        interrupt.Show

      Endif

    Else

      If InStr(prun, ("Deleting old restore point")) = 1 Or prun = ("Creating restore point") Or InStr(prun, ("Deleting restore point")) = 1 Or prun = ("Restoring the full system") Or prun = ("Restoring users configuration files") Or prun = ("Restoring the system files") Or prun = ("Repairing the system files") Or prun = ("Repairing the full system") Or prun = ("Creating Live system") Or prun = ("Deleting incomplete restore point") Or prun = ("Converting Live system image") Or prun = ("Checking files and directories")

        If interrupt.Visible = False

          interruptdisable.Hide
          interrupt.Show

        Endif

      Else If interruptdisable.Visible = False

        interrupt.Hide
        interruptdisable.Show

      Endif

      If progressbartimer.Enabled = False Then progressbartimer.Start

    Endif

  Else

    If fsdir <> Null

      If IsDir(fsdir) And Access(fsdir, gb.Write) = True

        If storagedirarea.Background = 16738151

          storagedirarea.Background = Color.TextBackground
          storagedir.Background = Color.Default
          pointupgrade

        Endif

        With newrestorepoint

          If ppipe = 0 And pname = ("Currently running system") And .Enabled = False

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        End With

        If point1.Enabled = True And Not IsDir(fsdir & "/S01_" & pname1) Then accesserror
        If point2.Enabled = True And Not IsDir(fsdir & "/S02_" & pname2) Then accesserror
        If point3.Enabled = True And Not IsDir(fsdir & "/S03_" & pname3) Then accesserror
        If point4.Enabled = True And Not IsDir(fsdir & "/S04_" & pname4) Then accesserror
        If point5.Enabled = True And Not IsDir(fsdir & "/S05_" & pname5) Then accesserror
        If point6.Enabled = True And Not IsDir(fsdir & "/S06_" & pname6) Then accesserror
        If point7.Enabled = True And Not IsDir(fsdir & "/S07_" & pname7) Then accesserror
        If point8.Enabled = True And Not IsDir(fsdir & "/S08_" & pname8) Then accesserror
        If point9.Enabled = True And Not IsDir(fsdir & "/S09_" & pname9) Then accesserror
        If point10.Enabled = True And Not IsDir(fsdir & "/S10_" & pname10) Then accesserror
        If point11.Enabled = True And Not IsDir(fsdir & "/H01_" & pname11) Then accesserror
        If point12.Enabled = True And Not IsDir(fsdir & "/H02_" & pname12) Then accesserror
        If point13.Enabled = True And Not IsDir(fsdir & "/H03_" & pname13) Then accesserror
        If point14.Enabled = True And Not IsDir(fsdir & "/H04_" & pname14) Then accesserror
        If point15.Enabled = True And Not IsDir(fsdir & "/H05_" & pname15) Then accesserror

      Else

        If point1.Enabled = True Or point11.Enabled = True Then accesserror

        With newrestorepoint

          If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

        If storagedirarea.Background = Color.TextBackground

          storagedirarea.Background = 16738151
          storagedir.Background = 16738151

        Endif

      Endif

    Endif

    If installpanel.Visible = True

      If fullnamepipe.Visible = True And usernamepipe.Visible = True And hostnamepipe.Visible = True And passwordpipe.Visible = True And If rootpassword1.Length = 0 Or rootpasswordpipe.Visible = True

        With installnext

          If .Enabled = False

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        End With

      Endif

    Else If livecreatepanel.Visible = True

      If livenameerror.Visible = True Or liveworkdir.Text = Null

        With livecreatenew

          If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

      Else If livenamepipe.Visible = True Or livename.Text = "auto"

        If IsDir(lwdir) And Access(lwdir, gb.Write) = True

          If liveworkdirarea.Background = 16738151

            liveworkdirarea.Background = Color.TextBackground
            liveworkdir.Background = Color.Default

          Endif

          With livecreatenew

            If .Enabled = False

              .Enabled = True
              .Mouse = Mouse.Pointing

            Endif

          End With

          If livelist.Enabled = False

            livelist.Enabled = True
            livedevices.Enabled = True

          Endif

        Else

          If liveworkdirarea.Background = Color.TextBackground

            liveworkdirarea.Background = 16738151
            liveworkdir.Background = 16738151

          Endif

          With livecreatenew

            If .Enabled = True

              .Enabled = False
              .Mouse = Mouse.Default

            Endif

          End With

          With livedelete

            If .Enabled = True

              .Enabled = False
              .Mouse = Mouse.Default

            Endif

          End With

          With liveconvert

            If .Enabled = True

              .Enabled = False
              .Mouse = Mouse.Default

            Endif

          End With

          With livewritestart

            If .Enabled = True

              .Enabled = False
              .Mouse = Mouse.Default

            Endif

          End With

          If livedevices.Key

            If livedevices[livedevices.Key][2] = "x" Then livedevices[livedevices.Key][2] = "-"

          Endif

          If livedevices.Enabled = True Then livedevices.Enabled = False
          If livelist.Text <> Null Then livelist.UnselectAll
          If livedevices.Key <> Null Then livedevices.UnselectAll
          If livelist.Enabled = True Then livelist.Enabled = False

        Endif

      Else If livecreatenew.Enabled = True

        livecreatenew.Enabled = False
        livecreatenew.Mouse = Mouse.Default

      Endif

    Else If repairpanel.Visible = True

      With repairnext

        If InStr(File.Load("/proc/self/mounts"), " /mnt ") <> 0

          If grubrepair.Value = True

            If Exist("/mnt/usr/sbin/update-grub2") And Exist("/mnt/var/lib/dpkg/info/grub-" & grub & ".list")

              If grubreinstallrepair.Visible = False

                grubreinstallrepair.Show
                grubreinstallrepairdisable.Hide

              Endif

              If .Enabled = False

                .Enabled = True
                .Mouse = Mouse.Pointing

              Endif

            Else

              If grubreinstallrepair.Visible = True

                grubreinstallrepair.Hide
                grubreinstallrepairdisable.Show

              Endif

              If .Enabled = True

                .Enabled = False
                .Mouse = Mouse.Default

              Endif

            Endif

          Else If .Enabled = False

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        Else

          If grubrepair.Value = True And grubreinstallrepair.Visible = True

            grubreinstallrepair.Hide
            grubreinstallrepairdisable.Show

          Endif

          If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        Endif

      End With

    Endif

    If prun <> Null Then prun = Null
    If processrun.Text <> Null Then processrun.Text = Null
    If points.Text <> Null Then points.Text = Null
    If progressbartimer.Enabled = True Then progressbartimer.Stop
    If progressbar.Value <> 0 Then progressbar.Value = 0

    If interruptdisable.Visible = False

      interrupt.Hide
      interruptdisable.Show

    Endif

  Endif

End

Public Sub progressbartimer_Timer()

  With progressbar

    If InStr(prun, "/" & ppipe) <> 0 And Len(prun) = InStr(prun, "/" & ppipe) + Len("/" & ppipe) - 1

      If .Value = 0 Then .Value = Round(dnum / ppipe, -2) Else .Value = 0

    Else

      If .Value = 0 Then .Value = 1 Else .Value = 0

    Endif

  End With

End

Public Sub pointhighlight_Click()

  Inc Application.Busy
  If IsDir(fsdir & "/" & cpoint & "_" & pname) Then Move fsdir & "/" & cpoint & "_" & pname To fsdir & "/H05_" & pname
  pointupgrade
  Dec Application.Busy

End

Public Sub pointrename_Click()

  Inc Application.Busy
  If dialog = 3 Then dialog = 0

  If pointpipe1.Value = True And pname1 <> point1.Text

    If InStr(point1.Text, " ") = 0

      Try Move fsdir & "/S01_" & pname1 To fsdir & "/S01_" & point1.Text
      If Not Error Then pointpipe1.Value = False Else dialog = 3

    Else

      dialog = 3

    Endif

  Endif

  If pointpipe2.Value = True And pname2 <> point2.Text

    If InStr(point2.Text, " ") = 0

      Try Move fsdir & "/S02_" & pname2 To fsdir & "/S02_" & point2.Text

      If Not Error

        pointpipe2.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe3.Value = True And pname3 <> point3.Text

    If InStr(point3.Text, " ") = 0

      Try Move fsdir & "/S03_" & pname3 To fsdir & "/S03_" & point3.Text

      If Not Error

        pointpipe3.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe4.Value = True And pname4 <> point4.Text

    If InStr(point4.Text, " ") = 0

      Try Move fsdir & "/S04_" & pname4 To fsdir & "/S04_" & point4.Text

      If Not Error

        pointpipe4.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe5.Value = True And pname5 <> point5.Text

    If InStr(point5.Text, " ") = 0

      Try Move fsdir & "/S05_" & pname5 To fsdir & "/S05_" & point5.Text

      If Not Error

        pointpipe5.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe6.Value = True And pname6 <> point6.Text

    If InStr(point6.Text, " ") = 0

      Try Move fsdir & "/S06_" & pname6 To fsdir & "/S06_" & point6.Text

      If Not Error

        pointpipe6.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe7.Value = True And pname7 <> point7.Text

    If InStr(point7.Text, " ") = 0

      Try Move fsdir & "/S07_" & pname7 To fsdir & "/S07_" & point7.Text

      If Not Error

        pointpipe7.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe8.Value = True And pname8 <> point8.Text

    If InStr(point8.Text, " ") = 0

      Try Move fsdir & "/S08_" & pname8 To fsdir & "/S08_" & point8.Text

      If Not Error

        pointpipe8.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe9.Value = True And pname9 <> point9.Text

    If InStr(point9.Text, " ") = 0

      Try Move fsdir & "/S09_" & pname9 To fsdir & "/S09_" & point9.Text

      If Not Error

        pointpipe9.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe10.Value = True And pname10 <> point10.Text

    If InStr(point10.Text, " ") = 0

      Try Move fsdir & "/S10_" & pname10 To fsdir & "/S10_" & point10.Text

      If Not Error

        pointpipe10.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe11.Value = True And pname11 <> point11.Text

    If InStr(point11.Text, " ") = 0

      Try Move fsdir & "/H01_" & pname11 To fsdir & "/H01_" & point11.Text

      If Not Error

        pointpipe11.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe12.Value = True And pname12 <> point12.Text

    If InStr(point12.Text, " ") = 0

      Try Move fsdir & "/H02_" & pname12 To fsdir & "/H02_" & point12.Text

      If Not Error

        pointpipe12.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe13.Value = True And pname13 <> point13.Text

    If InStr(point13.Text, " ") = 0

      Try Move fsdir & "/H03_" & pname13 To fsdir & "/H03_" & point13.Text

      If Not Error

        pointpipe13.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe14.Value = True And pname14 <> point14.Text

    If InStr(point14.Text, " ") = 0

      Try Move fsdir & "/H04_" & pname14 To fsdir & "/H04_" & point14.Text

      If Not Error

        pointpipe14.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  If pointpipe15.Value = True And pname15 <> point15.Text

    If InStr(point15.Text, " ") = 0

      Try Move fsdir & "/H05_" & pname15 To fsdir & "/H05_" & point15.Text

      If Not Error

        pointpipe15.Value = False

      Else

        If dialog <> 3 Then dialog = 3

      Endif

    Else If dialog <> 3

      dialog = 3

    Endif

  Endif

  pointupgrade
  If dialog = 3 Then dialogopen
  Dec Application.Busy

End

Public Sub function1_MouseMove()

  With systembackgui

    If Mouse.Left = True And .W <> Screen.AvailableWidth And .H <> Screen.AvailableHeight And wmove = False

      wmove = True
      .Move(Mouse.ScreenX - Mouse.StartX, Mouse.ScreenY - Mouse.StartY)
      Wait 0.02
      wmove = False

    Endif

  End With

End

Public Sub function2_MouseMove()

  If Mouse.Left = True And wmove = False

    wmove = True
    systembackgui.Move(Mouse.ScreenX - Mouse.StartX, Mouse.ScreenY - Mouse.StartY)
    Wait 0.02
    wmove = False

  Endif

End

Public Sub function3_MouseMove()

  function1_MouseMove

End

Public Sub function4_MouseMove()

  function2_MouseMove

End

Public Sub chooseresize_MouseMove()

  Dim mainw As Short = Mouse.ScreenX - systembackgui.X + 5
  Dim mainh As Short = Mouse.ScreenY - systembackgui.Y + 5

  If Mouse.Left = True

    With systembackgui

      If mainw < 642

        If .W <> 642 Then .W = 642

      Else If mainw > 1920

        If .W <> 1920 Then .W = 1920

      Else If Abs(mainw - .W) > 9

        .W = mainw

      Endif

      If mainh < 481

        If .H <> 481 Then .H = 481

      Else If mainh > 1080

        If .H <> 1080 Then .H = 1080

      Else If Abs(mainh - .H) > 9

        .H = mainh

      Endif

    End With

  Endif

End

Public Sub copyresize_MouseMove()

  Dim mainw As Short = Mouse.ScreenX - systembackgui.X + 5
  Dim mainh As Short = Mouse.ScreenY - systembackgui.Y + 5

  If Mouse.Left = True

    With systembackgui

      If mainw < 698

        If .W <> 698 Then .W = 698

      Else If mainw > 1920

        If .W <> 1920 Then .W = 1920

      Else If Abs(mainw - .W) > 9

        .W = mainw

      Endif

      If mainh < 465

        If .H <> 465 Then .H = 465

      Else If mainh > 1080

        If .H <> 1080 Then .H = 1080

      Else If Abs(mainh - .H) > 9

        .H = mainh

      Endif

    End With

  Endif

End

Public Sub excluderesize_MouseMove()

  copyresize_MouseMove

End

Public Sub function1_MouseDown()

  If Mouse.Left = True Then systembackgui.Mouse = Mouse.SizeAll

End

Public Sub function1_MouseUp()

  If systembackgui.Mouse = Mouse.SizeAll Then systembackgui.Mouse = Mouse.Default

End

Public Sub function2_MouseDown()

  function1_MouseDown

End

Public Sub function2_MouseUp()

  function1_MouseUp

End

Public Sub function3_MouseDown()

  function1_MouseDown

End

Public Sub function3_MouseUp()

  function1_MouseUp

End

Public Sub function4_MouseDown()

  function1_MouseDown

End

Public Sub function4_MouseUp()

  function1_MouseUp

End

Public Sub chooseresize_Enter()

  With chooseresize

    If .Picture = Picture["resize.png"]

      .Picture = Picture["bigresize.png"]
      .Move(.X - 20, .Y - 20, 30, 30)

    Endif

  End With

End

Public Sub chooseresize_Leave()

  With chooseresize

    If .Picture = Picture["bigresize.png"] And systembackgui.Mouse <> Mouse.SizeNWSE And Mouse.Inside(chooseresize) = False

      .Picture = Picture["resize.png"]
      .Move(.X + 20, .Y + 20, 10, 10)

    Endif

  End With

End

Public Sub chooseresize_MouseDown()

  If Mouse.Left = True

    chooseresize.Mouse = Mouse.Default
    copyresize.Mouse = Mouse.Default
    excluderesize.Mouse = Mouse.Default
    systembackgui.Mouse = Mouse.SizeNWSE

  Endif

End

Public Sub chooseresize_MouseUp()

  If systembackgui.Mouse = Mouse.SizeNWSE

    chooseresize.Mouse = Mouse.Pointing
    copyresize.Mouse = Mouse.Pointing
    excluderesize.Mouse = Mouse.Pointing
    systembackgui.Mouse = Mouse.Default

  Endif

  If chooseresize.W = 30 Then chooseresize_Leave

End

Public Sub copyresize_Enter()

  With copyresize

    If .Picture = Picture["resize.png"]

      .Picture = Picture["bigresize.png"]
      .Move(.X - 20, .Y - 20, 30, 30)

    Endif

  End With

End

Public Sub copyresize_Leave()

  With copyresize

    If .Picture = Picture["bigresize.png"] And systembackgui.Mouse <> Mouse.SizeNWSE And Mouse.Inside(copyresize) = False

      .Picture = Picture["resize.png"]
      .Move(.X + 20, .Y + 20, 10, 10)

    Endif

  End With

End

Public Sub copyresize_MouseDown()

  chooseresize_MouseDown

End

Public Sub copyresize_MouseUp()

  chooseresize_MouseUp
  If copyresize.W = 30 Then copyresize_Leave

End

Public Sub excluderesize_Enter()

  With excluderesize

    If .Picture = Picture["resize.png"]

      .Picture = Picture["bigresize.png"]
      .Move(.X - 20, .Y - 20, 30, 30)

    Endif

  End With

End

Public Sub excluderesize_Leave()

  With excluderesize

    If .Picture = Picture["bigresize.png"] And systembackgui.Mouse <> Mouse.SizeNWSE And Mouse.Inside(excluderesize) = False

      .Picture = Picture["resize.png"]
      .Move(.X + 20, .Y + 20, 10, 10)

    Endif

  End With

End

Public Sub excluderesize_MouseDown()

  chooseresize_MouseDown

End

Public Sub excluderesize_MouseUp()

  chooseresize_MouseUp
  If excluderesize.W = 30 Then excluderesize_Leave

End

Public Sub windowbutton1_Enter()

  If mainpanel.Background = Color.Foreground Then windowbutton1_MouseDown

End

Public Sub windowbutton1_MouseDown()

  With windowminimize

    If .Background = Color.TextBackground Then .Background = Color.TextForeground
    If .Foreground = Color.SelectedBackground Then .Foreground = Color.TextBackground

  End With

  With windowclose

    .Background = Color.TextBackground
    .Foreground = Color.TextForeground
    If .Visible = False Then .Show

  End With

  With buttonspanel

    If copypanel.Visible = True Or excludepanel.Visible = True Or choosepanel.Visible = True

      With windowmaximize

        If systembackgui.W = Screen.AvailableWidth And systembackgui.H = Screen.AvailableHeight

          If .Text = "□" Then .Text = "▭"

        Else If .Text = "▭"

          .Text = "□"

        Endif

        If .Foreground = Color.SelectedBackground Then .Foreground = Color.TextBackground
        If .Visible = False Then .Show

      End With

      If windowminimize.X <> 47 Then windowminimize.X = 47
      If windowclose.X <> 92 Then windowclose.X = 92
      If .W <> 138 Then .W = 138

    Else

      If windowmaximize.Visible = True Then windowmaximize.Hide
      If windowminimize.X <> 2 Then windowminimize.X = 2
      If windowclose.X <> 47 Then windowclose.X = 47
      If .W <> 93 Then .W = 93

    Endif

    .X = systembackgui.W - .W
    .Visible = True

  End With

End

Public Sub windowbutton2_Enter()

  If mainpanel.Background = Color.Foreground Then windowbutton2_MouseDown

End

Public Sub windowbutton2_MouseDown()

  If windowminimize.Background = Color.TextBackground Then windowminimize.Background = Color.TextForeground
  If windowmaximize.Visible = True Then windowmaximize.Hide

  With windowminimize

    If .Foreground = Color.SelectedBackground Then .Foreground = Color.TextBackground
    If .X <> 2 Then .X = 2

  End With

  With windowclose

    .Background = Color.TextBackground
    .Foreground = Color.TextForeground
    If .Visible = False Then .Show
    If .X <> 47 Then .X = 47

  End With

  With buttonspanel

    If .W <> 93 Then .W = 93
    .X = systembackgui.W - .W
    .Visible = True

  End With

End

Public Sub windowbutton3_Enter()

  If mainpanel.Background = Color.Foreground Then windowbutton3_MouseDown

End

Public Sub windowbutton3_MouseDown()

  If windowmaximize.Visible = True Then windowmaximize.Hide
  If windowclose.Visible = True Then windowclose.Hide

  With windowminimize

    .Background = Color.TextBackground
    .Foreground = Color.TextForeground
    If .X <> 2 Then .X = 2

  End With

  With buttonspanel

    If .W <> 48 Then .W = 48
    .X = systembackgui.W - .W
    .Visible = True

  End With

End

Public Sub windowbutton4_Enter()

  If mainpanel.Background = Color.Foreground Then windowbutton3_MouseDown

End

Public Sub windowbutton4_MouseDown()

  windowbutton3_MouseDown

End

Public Sub windowmaximize_MouseDown()

  If Mouse.Left = True Then windowmaximize.Foreground = Color.SelectedBackground

End

Public Sub windowmaximize_MouseUp()

  If windowmaximize.Foreground = Color.SelectedBackground And buttonspanel.Visible = True

    With systembackgui

      If windowmaximize.Text = "□"

        buttonspanel.Hide

        winx = .X
        winy = .Y
        winw = .W
        winh = .H

        .Move(0, 0, Screen.AvailableWidth, Screen.AvailableHeight)

      Else

        .Resize(1, 1)

        Wait 0.15

        .Move(winx, winy, winw, winh)

      Endif

    End With

  Endif

End

Public Sub windowmaximize_Enter()

  With windowmaximize

    If .Background = Color.TextForeground

      .Background = Color.TextBackground
      If .Foreground <> Color.SelectedBackground Then .Foreground = Color.TextForeground

    Endif

  End With

End

Public Sub windowmaximize_Leave()

  With windowmaximize

    If .Background = Color.TextBackground

      .Background = Color.TextForeground
      If .Foreground <> Color.SelectedBackground Then .Foreground = Color.TextBackground

    Endif

  End With

End

Public Sub windowminimize_MouseDown()

  If Mouse.Left = True Then windowminimize.Foreground = Color.SelectedBackground

End

Public Sub windowminimize_MouseUp()

  If windowminimize.Foreground = Color.SelectedBackground And buttonspanel.Visible = True

    systembackgui.Minimized = True

    Wait 0.3

    If buttonspanel.Visible = True Then buttonspanel.Hide

  Endif

End

Public Sub windowminimize_Enter()

  With windowminimize

    If .Background = Color.TextForeground

      .Background = Color.TextBackground
      If .Foreground <> Color.SelectedBackground Then .Foreground = Color.TextForeground

    Endif

  End With

End

Public Sub windowminimize_Leave()

  With windowminimize

    If .Background = Color.TextBackground

      .Background = Color.TextForeground
      If .Foreground <> Color.SelectedBackground Then .Foreground = Color.TextBackground

    Endif

  End With

End

Public Sub windowclose_MouseDown()

  If Mouse.Left = True Then windowclose.Foreground = Color.SelectedBackground

End

Public Sub windowclose_MouseUp()

  If windowclose.Foreground = Color.SelectedBackground And buttonspanel.Visible = True Then systembackgui.Close

End

Public Sub windowclose_Enter()

  With windowclose

    If .Background = Color.TextForeground

      .Background = Color.TextBackground
      If .Foreground <> Color.SelectedBackground Then .Foreground = Color.TextForeground

    Endif

  End With

End

Public Sub windowclose_Leave()

  With windowclose

    If .Background = Color.TextBackground

      .Background = Color.TextForeground
      If .Foreground <> Color.SelectedBackground Then .Foreground = Color.TextBackground

    Endif

  End With

End

Public Sub buttonspanel_Leave()

  buttonspanel.Hide

End

Public Sub buttonspanel_LostFocus()

  buttonspanel.Hide

End

Public Sub pointdelete_Click()

  statusstart

  If dnum <> 0 Then dnum = 0

  If pointpipe10.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S10_" & pname10 To fsdir & "/.DELETED_" & pname10

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname10]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe9.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S09_" & pname9 To fsdir & "/.DELETED_" & pname9

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname9]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe8.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S08_" & pname8 To fsdir & "/.DELETED_" & pname8

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname8]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe7.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S07_" & pname7 To fsdir & "/.DELETED_" & pname7

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname7]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe6.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S06_" & pname6 To fsdir & "/.DELETED_" & pname6

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname6]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe5.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S05_" & pname5 To fsdir & "/.DELETED_" & pname5

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname5]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe4.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S04_" & pname4 To fsdir & "/.DELETED_" & pname4

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname4]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe3.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S03_" & pname3 To fsdir & "/.DELETED_" & pname3

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname3]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe2.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S02_" & pname2 To fsdir & "/.DELETED_" & pname2

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname2]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe1.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/S01_" & pname1 To fsdir & "/.DELETED_" & pname1

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname1]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe11.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/H01_" & pname11 To fsdir & "/.DELETED_" & pname11

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname11]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe12.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/H02_" & pname12 To fsdir & "/.DELETED_" & pname12

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname12]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe13.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/H03_" & pname13 To fsdir & "/.DELETED_" & pname13

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname13]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe14.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/H04_" & pname14 To fsdir & "/.DELETED_" & pname14

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname14]
    wprocwait
    If prun = Null Then Return

  Endif

  If pointpipe15.Value = True

    dnum = dnum + 1
    prun = ("Deleting restore point") & " " & dnum & "/" & ppipe
    Move fsdir & "/H05_" & pname15 To fsdir & "/.DELETED_" & pname15

    wproc = Exec ["rm", "-rf", fsdir & "/.DELETED_" & pname15]
    wprocwait
    If prun = Null Then Return

  Endif

  pointupgrade

  prun = ("Emptying cache")
  wproc = Exec ["sync"]
  wprocwait
  File.Save("/proc/sys/vm/drop_caches", "3")

  If systembackgui.Closed = False

    statuspanel.Hide
    mainpanel.Show
    If functionmenunext.Enabled = True Then functionmenunext.SetFocus Else functionmenuback.SetFocus
    nwidth = 698
    nheight = 465
    windowmove

  Endif

End

Public Sub autorestoreoptions_Click()

  If autorestoreoptions.Value = False

    skipfstabrestore.Enabled = True
    skipfstabrestore.Mouse = Mouse.Pointing
    grubreinstallrestore.Enabled = True
    grubreinstallrestore.Mouse = Mouse.Pointing
    grubreinstallrestoredisable.Enabled = True
    grubreinstallrestoredisable.Mouse = Mouse.Pointing

  Else

    skipfstabrestore.Enabled = False
    skipfstabrestore.Mouse = Mouse.Default
    grubreinstallrestore.Enabled = False
    grubreinstallrestore.Mouse = Mouse.Default
    grubreinstallrestoredisable.Enabled = False
    grubreinstallrestoredisable.Mouse = Mouse.Default

  Endif

End

Public Sub storagedirbutton_Click()

  dirrefresh_Click
  If textoutputwindow.Visible = True Then textoutputwindow.Hide
  systembackpanel.Hide
  choosepanel.Show
  function1.Text = ("Storage directory")
  dirchooseok.SetFocus
  nwidth = 642
  nheight = 481
  windowmove

End

Public Sub dirchooseok_Click()

  Dim item As String

  If IsDir(dirchoose.Key)

    If function1.Text = ("Storage directory")

      If sdir <> dirchoose.Key

        If IsDir(fsdir)

          If Dir(fsdir).Count = 0

            Try Rmdir fsdir

          Else If Dir(fsdir).Count = 1 And Exist(fsdir & "/.sbschedule")

            Try Kill fsdir & "/.sbschedule"
            If Not Error Then Try Rmdir fsdir

          Endif

        Endif

        sdir = dirchoose.Key
        configfileupdate
        fsdir = sdir & "/Systemback"
        storagedir.Text = sdir
        pointupgrade

      Endif

      If Not IsDir(fsdir)

        Try Mkdir fsdir

        If Error

          Move fsdir To fsdir & "_" & Int(Rnd(1000000000, 9999999999))
          Mkdir fsdir

        Endif

      Endif

      If Not Exist(fsdir & "/.sbschedule") Then File.Save(fsdir & "/.sbschedule", Null)
      If Application.Args[1] <> "notextoutput" Then textoutputwindow.Show
      choosepanel.Hide
      systembackpanel.Show
      function1.Text = "Systemback"
      If functionmenunext.Enabled = True Then functionmenunext.SetFocus Else functionmenuback.SetFocus

    Else

      If lwdir <> dirchoose.Key

        lwdir = dirchoose.Key
        configfileupdate
        liveworkdir.Text = lwdir

        If livelist.Count <> 0 Then livelist.Clear

        With livedelete

          If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

        With liveconvert

          If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

        With livewritestart

          If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

        If IsDir(lwdir)

          For Each item In Dir(lwdir, "*.sblive", gb.File)

            With Stat(lwdir & "/" & item)

              If Len(item) > 7 And .Size > 0 And .Type <> gb.Link Then livelist.Add(Left(item, -7))

            End With

          Next

        Endif

      Endif

      If Application.Args[1] <> "notextoutput" Then textoutputwindow.Show
      choosepanel.Hide
      livecreatepanel.Show
      function1.Text = ("Live system create")
      livecreateback.SetFocus

    Endif

    nwidth = 698
    nheight = 465
    windowmove

  Else

    With dirchoose

      dirchoose[.Key].Picture = Picture["dirx.png"]
      If dirchoose[.Key].Expanded = True Then dirchoose[.Key].Expanded = False
      dirchooseok.Enabled = False
      dirchooseok.Mouse = Mouse.Default
      dirpath.Foreground = Color.Red

    End With

  Endif

End

Public Sub choosecancel_Click()

  If dirchooseok.Picture = Null

    If Application.Args[1] <> "notextoutput" Then textoutputwindow.Show
    choosepanel.Hide

    If function1.Text = ("Storage directory")

      systembackpanel.Show
      function1.Text = "Systemback"
      If functionmenunext.Enabled = True Then functionmenunext.SetFocus Else functionmenuback.SetFocus

    Else

      livecreatepanel.Show
      function1.Text = ("Live system create")
      livecreateback.SetFocus

    Endif

    nwidth = 698
    nheight = 465
    windowmove

  Endif

End

Public Sub fullrestore_Click()

  With keepfiles

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default
      includeusers.Enabled = False
      includeusers.Mouse = Mouse.Default
      autorestoreoptions.Enabled = True
      autorestoreoptions.Mouse = Mouse.Pointing

      If autorestoreoptions.Value = False

        skipfstabrestore.Enabled = True
        skipfstabrestore.Mouse = Mouse.Pointing
        grubreinstallrestore.Enabled = True
        grubreinstallrestore.Mouse = Mouse.Pointing
        grubreinstallrestoredisable.Enabled = True
        grubreinstallrestoredisable.Mouse = Mouse.Pointing

      Endif

    Endif

  End With

  If restorenext.Enabled = False Then restorenext.Enabled = True

End

Public Sub systemrestore_Click()

  fullrestore_Click

End

Public Sub configurationfilesrestore_Click()

  With keepfiles

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing
      includeusers.Enabled = True
      includeusers.Mouse = Mouse.Pointing
      autorestoreoptions.Enabled = False
      autorestoreoptions.Mouse = Mouse.Default

      If autorestoreoptions.Value = False

        skipfstabrestore.Enabled = False
        skipfstabrestore.Mouse = Mouse.Default
        grubreinstallrestore.Enabled = False
        grubreinstallrestore.Mouse = Mouse.Default
        grubreinstallrestoredisable.Enabled = False
        grubreinstallrestoredisable.Mouse = Mouse.Default

      Endif

    Endif

  End With

  includeusers_Click

End

Public Sub includeusers_Click()

  If includeusers.Index < 2 Or If includeusers.Index > 1 And IsDir(fsdir & "/" & cpoint & "_" & pname & "/home/" & includeusers.Text)

    If restorenext.Enabled = False Then restorenext.Enabled = True

  Else If restorenext.Enabled = True

    restorenext.Enabled = False

  Endif

End

Public Sub restorenext_Click()

  If fullrestore.Value = True

    dialog = 18

  Else If systemrestore.Value = True

    dialog = 4

  Else If keepfiles.Value = True

    dialog = 8

  Else

    dialog = 7

  Endif

  dialogopen

End

Sub restore()

  Dim ofile As File
  Dim cline, fstab1, fstab2, elist, usr, mntdev As String

  statusstart

  If dialog = 23 Then dialog = 0

  If fullrestore.Value = True Or systemrestore.Value = True

    If fullrestore.Value = True Then prun = ("Restoring the full system") Else prun = ("Restoring the system files")

    If autorestoreoptions.Value = True

      If Exist("/etc/fstab")

        Exec ["sha1sum", "/etc/fstab"] To fstab1
        fstab1 = Left(fstab1, InStr(fstab1, " ") - 1)
        Exec ["sha1sum", fsdir & "/" & cpoint & "_" & pname & "/etc/fstab"] To fstab2
        fstab2 = Left(fstab2, InStr(fstab2, " ") - 1)
        If fstab1 <> fstab2 Then Try Copy "/etc/fstab" To "/tmp/sbrestorefstab"

      Endif

    Else If skipfstabrestore.Value = True

      Try Copy "/etc/fstab" To "/tmp/sbrestorefstab"

    Endif

    If prun = Null Then Return
    wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete '" & fsdir & "'/" & cpoint & "_" & pname & "/ / --include=/{bin,boot,cdrom,dev,etc,home,lib,lib32,lib64,mnt,opt,proc,run,root,sbin,selinux,srv,sys,tmp,usr,var,initrd*,vmlinuz*} --exclude={/*,/home/*,/proc/*,/run/*,/sys/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/root/*,/var/tmp/*,/var/run/*,/etc/mtab,/etc/xdg/autostart/sbschedule.desktop,/var/lib/udisks/mtab,/var/lib/dpkg/info/systemback*,/usr/bin/systemback*,/usr/bin/sbsync,/usr/share/systemback,/etc/systemback*,lost+found}"]
    wprocwait
    If prun = Null Then Return

    If Exist("/tmp/sbrestorefstab") And If autorestoreoptions.Value = True Or skipfstabrestore.Value = True

      Try Kill "/etc/fstab"
      Copy "/tmp/sbrestorefstab" To "/etc/fstab"
      Kill "/tmp/sbrestorefstab"

    Endif

    If prun = Null Then Return
    wproc = Exec ["sbsync", "-ax", "--delete", fsdir & "/" & cpoint & "_" & pname & "/media", "/"]
    wprocwait
    If prun = Null Then Return

  Endif

  If fullrestore.Value = True Or configurationfilesrestore.Value = True

    If keepfiles.Enabled = False Or keepfiles.Value = False

      If configurationfilesrestore.Value = True Then prun = ("Restoring users configuration files")

      elist = "/" & rtmp & ",/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*"

      ofile = Open fsdir & "/" & cpoint & "_" & pname & "/.excludes" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If Left(cline, 1) = "." Then elist &= ",'/" & cline & "'"

      Wend
      Close #ofile

      For Each usr In Dir(fsdir & "/" & cpoint & "_" & pname & "/home", "*", gb.Directory)

        If includeusers.Enabled = False Or includeusers.Index = 0 Or includeusers.Text = usr

          If Not IsDir("/home/" & usr)

            Try Mkdir "/home/" & usr

            If Error

              Move "/home/" & usr To "/home/" & usr & "_" & Int(Rnd(1000000000, 9999999999))
              Mkdir "/home/" & usr

            Endif

          Endif

          If prun = Null Then Return
          wproc = Exec ["bash", "-c", "sbsync -rptgoD --delete --min-size=8MB --link-dest=../ /home/" & usr & "/ /home/" & usr & "/" & rtmp & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgo --delete '" & fsdir & "'/" & cpoint & "_" & pname & "/home/" & usr & "/ /home/" & usr & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgom --link-dest=" & rtmp & "/ /home/" & usr & "/" & rtmp & "/ /home/" & usr]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["rm", "-rf", "/home/" & usr & "/" & rtmp]
          wprocwait

        Endif

      Next

      If includeusers.Enabled = False Or includeusers.Index < 2

        If prun = Null Then Return
        wproc = Exec ["bash", "-c", "sbsync -rptgoD --delete --min-size=8MB --link-dest=../ /root/ /root/" & rtmp & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgo --delete '" & fsdir & "'/" & cpoint & "_" & pname & "/root/ /root --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgom --link-dest=" & rtmp & "/ /root/" & rtmp & "/ /root"]
        wprocwait
        If prun = Null Then Return
        wproc = Exec ["rm", "-rf", "/root/" & rtmp]
        wprocwait
        If prun = Null Then Return

      Endif

    Else

      prun = ("Restoring users configuration files")

      If includeusers.Index < 2

        If includeusers.Index = 0

          wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/home/", "/home"]
          wprocwait
          If prun = Null Then Return

        Endif

        wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/root/", "/root"]

      Else

        wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/home/" & includeusers.Text & "/", "/home/" & includeusers.Text]

      Endif

      wprocwait
      If prun = Null Then Return

    Endif

  Endif

  If fullrestore.Value = True Or systemrestore.Value = True

    If grubreinstallrestore.Visible = True

      If prun = Null Then Return

      If autorestoreoptions.Value = True Or grubreinstallrestore.Text = "Auto"

        If fstab1 = fstab2

          wproc = Exec ["update-grub"]

        Else

          wproc = Exec ["update-grub"]
          wprocwait
          If prun = Null Then Return

          ofile = Open "/proc/self/mounts" For Input
          While Not Eof(ofile)
            Line Input #ofile, cline

            If InStr(cline, " /boot ") <> 0

              mntdev = Left(cline, InStr(cline, " ") - 1)
              Break

            Else If InStr(cline, " / ") <> 0

              mntdev = Left(cline, InStr(cline, " ") - 1)

            Endif

          Wend
          Close #ofile

          If prun = Null Then Return
          wproc = Exec ["grub-install", "--force", Left(mntdev, 8)]

        Endif

      Else

        wproc = Exec ["update-grub"]
        wprocwait
        If prun = Null Then Return
        wproc = Exec ["grub-install", "--force", grubreinstallrestore.Text]

      Endif

      wprocwait
      If prun = Null Then Return

      If wproc.Value <> 0 Then dialog = 23

    Endif

    File.Save(fsdir & "/.sbschedule", Null)

  Endif

  If dialog <> 23

    If fullrestore.Value = True

      dialog = 20

    Else If systemrestore.Value = True

      dialog = 19

    Else If configurationfilesrestore.Value = True

      If keepfiles.Value = True Then dialog = 10 Else dialog = 9

    Endif

  Endif

  dialogopen

End

Public Sub pnumber3_Click()

  If pnumber <> 3

    pnumber = 3
    configfileupdate

  Endif

  With point3
    If .Enabled = True And .Background = Color.Default Then .Background = 16738151
  End With

  With point4

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point5

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point6

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point7

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point8

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point9

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point10

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber4_Click()

  If pnumber <> 4

    pnumber = 4
    configfileupdate

  Endif

  With point3
    If .Enabled = True And .Background = 16738151 Then .Background = Color.Default
  End With

  With point4

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point5

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point6

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point7

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point8

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point9

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point10

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber5_Click()

  If pnumber <> 5

    pnumber = 5
    configfileupdate

  Endif

  With point3
    If .Enabled = True And .Background = 16738151 Then .Background = Color.Default
  End With

  With point4

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point5

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point6

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point7

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point8

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point9

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point10

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber6_Click()

  If pnumber <> 6

    pnumber = 6
    configfileupdate

  Endif

  With point3
    If .Enabled = True And .Background = 16738151 Then .Background = Color.Default
  End With

  With point4

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point5

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point6

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point7

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point8

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point9

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point10

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber7_Click()

  If pnumber <> 7

    pnumber = 7
    configfileupdate

  Endif

  With point3
    If .Enabled = True And .Background = 16738151 Then .Background = Color.Default
  End With

  With point4

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point5

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point6

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point7

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point8

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point9

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point10

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber8_Click()

  If pnumber <> 8

    pnumber = 8
    configfileupdate

  Endif

  With point3
    If .Enabled = True And .Background = 16738151 Then .Background = Color.Default
  End With

  With point4

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point5

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point6

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point7

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point8

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point9

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With
  With point10

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber9_Click()

  If pnumber <> 9

    pnumber = 9
    configfileupdate

  Endif

  With point3
    If .Enabled = True And .Background = 16738151 Then .Background = Color.Default
  End With

  With point4

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point5

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point6

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point7

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point8

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point9

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point10

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("empty")

      .Text = ("not used")

    Endif

  End With

End

Public Sub pnumber10_Click()

  If pnumber <> 10

    pnumber = 10
    configfileupdate

  Endif

  With point3
    If .Enabled = True And .Background = 16738151 Then .Background = Color.Default
  End With

  With point4

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point5

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point6

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point7

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point8

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point9

    If .Enabled = True

      If .Background = 16738151 Then .Background = Color.Default

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With
  With point10

    If .Enabled = True

      If .Background = Color.Default Then .Background = 16738151

    Else If .Text = ("not used")

      .Text = ("empty")

    Endif

  End With

End

Public Sub autorepairoptions_Click()

  If autorepairoptions.Value = False

    With skipfstabrepair

      If .Enabled = False

        .Enabled = True
        .Mouse = Mouse.Pointing

      Endif

    End With

    With grubreinstallrepair

      If .Enabled = False

        .Enabled = True
        .Mouse = Mouse.Pointing
        grubreinstallrepairdisable.Enabled = True
        grubreinstallrepairdisable.Mouse = Mouse.Pointing

      Endif

    End With

  Else

    With skipfstabrepair

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With grubreinstallrepair

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default
        grubreinstallrepairdisable.Enabled = False
        grubreinstallrepairdisable.Mouse = Mouse.Default

      Endif

    End With

  Endif

End

Public Sub systemrepair_Click()

  If grubrepair.Value = True

    With autorepairoptions

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With skipfstabrepair

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With grubreinstallrepair

      If .Enabled = False

        .Enabled = True
        .Mouse = Mouse.Pointing
        grubreinstallrepairdisable.Enabled = True
        grubreinstallrepairdisable.Mouse = Mouse.Pointing

      Endif

    End With

  Else

    With autorepairoptions

      If .Enabled = False

        .Enabled = True
        .Mouse = Mouse.Pointing
        autorepairoptions_Click

      Endif

    End With

    With grubreinstallrepair

      If ppipe = 1

        If Exist(fsdir & "/" & cpoint & "_" & pname & "/usr/sbin/update-grub2") And Exist(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dpkg/info/grub-" & grub & ".list")

          If .Visible = False

            .Show
            grubreinstallrepairdisable.Hide

          Endif

        Else If .Visible = True

          .Hide
          grubreinstallrepairdisable.Show

        Endif

      Else If pname = ("Live image")

        If Exist("/usr/sbin/update-grub2") And Exist("/var/lib/dpkg/info/grub-" & grub & ".list")

          If .Visible = False

            .Show
            grubreinstallrepairdisable.Hide

          Endif

        Else If .Visible = True

          .Hide
          grubreinstallrepairdisable.Show

        Endif

      Endif

    End With

  Endif

End

Public Sub fullrepair_Click()

  systemrepair_Click

End

Public Sub grubrepair_Click()

  systemrepair_Click

End

Public Sub repairnext_Click()

  If systemrepair.Value = True

    dialog = 5

  Else If fullrepair.Value = True

    dialog = 6

  Else

    dialog = 41

  Endif

  dialogopen

End

Sub repair()

  Dim ofile As File
  Dim cline, srcdir, fstab1, fstab2, elist, usr, mntdev As String

  statusstart

  If systemrepair.Value = True Then

    prun = ("Repairing the system files")

  Else

    If fullrepair.Value = True Then prun = ("Repairing the full system") Else prun = ("Repairing the GRUB 2")

  Endif

  If grubrepair.Value = True

    wproc = Exec ["mount", "-B", "/dev", "/mnt/dev"]
    wprocwait
    wproc = Exec ["mount", "-B", "/dev/pts", "/mnt/dev/pts"]
    wprocwait
    wproc = Exec ["mount", "-B", "/proc", "/mnt/proc"]
    wprocwait
    wproc = Exec ["mount", "-B", "/sys", "/mnt/sys"]
    wprocwait
    If prun = Null Then Return

    If grubreinstallrepair.Text = "Auto"

      ofile = Open "/proc/self/mounts" For Input
      While Not Eof(ofile)
        Line Input #ofile, cline

        If InStr(cline, " /mnt/boot ") <> 0

          mntdev = Left(cline, InStr(cline, " ") - 1)
          Break

        Else If InStr(cline, " /mnt ") <> 0

          mntdev = Left(cline, InStr(cline, " ") - 1)

        Endif

      Wend
      Close #ofile

      File.Save("/mnt/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & Left(mntdev, 8) & "\n")

    Else

      File.Save("/mnt/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & grubreinstallrepair.Text & "\n")

    Endif

    Chmod "/mnt/grubinst" To "rwxrwxr-x"

    If prun = Null Then Return
    wproc = Exec ["chroot", "/mnt", "/grubinst"]
    wprocwait

    If wproc.Value = 0 Then dialog = 32 Else dialog = 37

    Kill "/mnt/grubinst"

    wproc = Exec ["umount", "-l", "/mnt/dev/pts", "/mnt/dev", "/mnt/proc", "/mnt/sys"]
    wprocwait
    If prun = Null Then Return

  Else

    If pname = ("Live image")

      If Not IsDir("/.systembacklivepoint")

        Try Mkdir "/.systembacklivepoint"

        If Error

          Move "/.systembacklivepoint" To "/.systembacklivepoint_" & Int(Rnd(1000000000, 9999999999))
          Mkdir "/.systembacklivepoint"

        Endif

      Endif

      If prun = Null Then Return

      If Exist("/cdrom/casper/filesystem.squashfs")

        wproc = Exec ["mount", "-o", "loop", "/cdrom/casper/filesystem.squashfs", "/.systembacklivepoint"]

      Else If Exist("/lib/live/mount/medium/live/filesystem.squashfs")

        wproc = Exec ["mount", "-o", "loop", "/lib/live/mount/medium/live/filesystem.squashfs", "/.systembacklivepoint"]

      Else

        wproc = Exec ["mount", "-o", "loop", "/live/image/live/filesystem.squashfs", "/.systembacklivepoint"]

      Endif

      wprocwait
      If prun = Null Then Return

      srcdir = "/.systembacklivepoint"

    Else

      srcdir = fsdir & "/" & cpoint & "_" & pname

    Endif

    If autorepairoptions.Value = True

      If Exist("/mnt/etc/fstab")

        Exec ["sha1sum", "/mnt/etc/fstab"] To fstab1
        fstab1 = Left(fstab1, InStr(fstab1, " ") - 1)
        Exec ["sha1sum", srcdir & "/etc/fstab"] To fstab2
        fstab2 = Left(fstab2, InStr(fstab2, " ") - 1)

        If fstab1 <> fstab2

          If Exist("/tmp/sbrepairfstab") Then Kill "/tmp/sbrepairfstab"
          Copy "/mnt/etc/fstab" To "/tmp/sbrepairfstab"

        Endif

      Endif

    Else If skipfstabrepair.Value = True

      If Exist("/tmp/sbrepairfstab") Then Kill "/tmp/sbrepairfstab"
      Copy "/mnt/etc/fstab" To "/tmp/sbrepairfstab"

    Endif

    If prun = Null Then Return

    If Exist("/mnt/var/lib/dpkg/info/systemback.conffiles") And Exist("/mnt/var/lib/dpkg/info/systemback.list") And Exist("/mnt/var/lib/dpkg/info/systemback.md5sums") And Exist("/mnt/var/lib/dpkg/info/systemback.postinst") And Exist("/mnt/var/lib/dpkg/info/systemback.postrm") And Exist("/mnt/var/lib/dpkg/info/systemback.preinst") And Exist("/mnt/var/lib/dpkg/info/systemback.prerm") And Exist("/mnt/usr/bin/sbsync") And Exist("/mnt/usr/bin/systemback") And Exist("/mnt/usr/share/systemback/sbstart") And Exist("/mnt/usr/share/systemback/version") And Exist("/mnt/etc/sudoers.d/99_sbscheduler") And Exist("/mnt/etc/xdg/autostart/sbschedule.desktop")

      wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete '" & srcdir & "'/ /mnt --include=/{bin,boot,cdrom,dev,etc,home,lib,lib32,lib64,mnt,opt,proc,run,root,sbin,selinux,srv,sys,tmp,usr,var,initrd*,vmlinuz*} --exclude={/*,/home/*,/proc/*,/run/*,/sys/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/root/*,/var/log/*,/var/tmp/*,/var/run/*,/etc/mtab,/etc/xdg/autostart/sbschedule.desktop,/var/lib/udisks/mtab,/var/lib/dpkg/info/systemback*,/usr/bin/systemback*,/usr/bin/sbsync,/usr/bin/sbstart,/etc/sudoers.d/99_sbscheduler,/usr/share/systemback,/etc/systemback*,lost+found}"]

    Else

      wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete '" & srcdir & "'/ /mnt --include=/{bin,boot,cdrom,dev,etc,home,lib,lib32,lib64,mnt,opt,proc,run,root,sbin,selinux,srv,sys,tmp,usr,var,initrd*,vmlinuz*} --exclude={/*,/home/*,/proc/*,/run/*,/sys/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/root/*,/var/log/*,/var/tmp/*,/var/run/*,/etc/mtab,/var/lib/udisks/mtab,/etc/systemback*,lost+found}"]

    Endif

    wprocwait
    If prun = Null Then Return

    If pname = ("Live image")

      wproc = Exec ["sbsync", "-rlptgo", "/.systembacklivepoint/.systemback/", "/mnt"]
      wprocwait

    Endif

    If Exist("/tmp/sbrepairfstab") And If autorepairoptions.Value = True Or skipfstabrepair.Value = True

      Try Kill "/mnt/etc/fstab"
      Copy "/tmp/sbrepairfstab" To "/mnt/etc/fstab"
      Kill "/tmp/sbrepairfstab"

    Endif

    If prun = Null Then Return
    wproc = Exec ["sbsync", "-ax", "--delete", srcdir & "/media", "/mnt"]
    wprocwait
    If prun = Null Then Return
    wproc = Exec ["bash", "-c", "sbsync -rlptgo '" & srcdir & "'/var/log /mnt/var --include=*/ --exclude=*"]
    wprocwait
    If prun = Null Then Return

    If fullrepair.Value = True

      elist = "/" & rtmp & ",/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*"

      ofile = Open srcdir & "/.excludes" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If Left(cline, 1) = "." Then elist &= ",'/" & cline & "'"

      Wend
      Close #ofile

      For Each usr In Dir(srcdir & "/home", "*", gb.Directory)

        If IsDir("/mnt/home/" & usr)

          If prun = Null Then Return
          wproc = Exec ["bash", "-c", "sbsync -rptgoD --delete --min-size=8MB --link-dest=../ /mnt/home/" & usr & "/ /mnt/home/" & usr & "/" & rtmp & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgo --delete '" & srcdir & "'/home/" & usr & "/ /mnt/home/" & usr & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgom --link-dest=" & rtmp & "/ /mnt/home/" & usr & "/" & rtmp & "/ /mnt/home/" & usr]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["rm", "-rf", "/mnt/home/" & usr & "/" & rtmp]
          wprocwait

        Else

          If Exist("/mnt/home/" & usr) Then Move "/mnt/home/" & usr To "/mnt/home/" & usr & "_" & Int(Rnd(1000000000, 9999999999))

          If prun = Null Then Return
          wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete '" & srcdir & "'/home/" & usr & "/ /mnt/home/" & usr]
          wprocwait
          If prun = Null Then Return

          If Exist("/mnt/home/" & usr & "/.config/user-dirs.dirs")

            ofile = Open "/mnt/home/" & usr & "/.config/user-dirs.dirs" For Read
            While Not Eof(ofile)
              Line Input #ofile, cline

              If Left(cline) <> "#" And InStr(cline, "$HOME")

                Try Mkdir "/mnt/home/" & usr & "/" & Left(Right(cline, - InStr(cline, "/")), -1)

              Endif

            Wend
            Close #ofile

          Endif

        Endif

      Next

      If IsDir("/mnt/root")

        If prun = Null Then Return
        wproc = Exec ["bash", "-c", "sbsync -rptgoD --delete --min-size=8MB --link-dest=../ /mnt/root/ /mnt/root/" & rtmp & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgo --delete '" & srcdir & "'/root/ /mnt/root --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgom --link-dest=" & rtmp & "/ /mnt/root/" & rtmp & "/ /mnt/root"]
        wprocwait
        If prun = Null Then Return
        wproc = Exec ["rm", "-rf", "/mnt/root/" & rtmp]

      Else

        If prun = Null Then Return
        wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete '" & srcdir & "'/root/ /mnt/root --exclude={" & elist & "} --include=/.* --exclude=/*"]

      Endif

      wprocwait
      If prun = Null Then Return

    Endif

    If grubreinstallrepair.Visible = True

      If autorepairoptions.Value = True Or grubreinstallrepair.Text = "Auto"

        If prun = Null Then Return
        wproc = Exec ["mount", "-B", "/dev", "/mnt/dev"]
        wprocwait
        wproc = Exec ["mount", "-B", "/dev/pts", "/mnt/dev/pts"]
        wprocwait
        wproc = Exec ["mount", "-B", "/proc", "/mnt/proc"]
        wprocwait
        wproc = Exec ["mount", "-B", "/sys", "/mnt/sys"]
        wprocwait
        If prun = Null Then Return

        If fstab1 = fstab2

          File.Save("/mnt/grubinst", "#!/bin/bash\nupdate-grub\n")

        Else

          ofile = Open "/proc/self/mounts" For Input
          While Not Eof(ofile)
            Line Input #ofile, cline

            If InStr(cline, " /mnt/boot ") <> 0

              mntdev = Left(cline, InStr(cline, " ") - 1)
              Break

            Else If InStr(cline, " /mnt ") <> 0

              mntdev = Left(cline, InStr(cline, " ") - 1)

            Endif

          Wend
          Close #ofile

          File.Save("/mnt/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & Left(mntdev, 8) & "\n")

        Endif

      Else

        File.Save("/mnt/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & grubreinstallrepair.Text & "\n")

      Endif

      Chmod "/mnt/grubinst" To "rwxrwxr-x"

      If prun = Null Then Return
      wproc = Exec ["chroot", "/mnt", "/grubinst"]
      wprocwait
      If prun = Null Then Return

      If wproc.Value <> 0

        If fullrepair.Value = True Then dialog = 24 Else dialog = 11

      Endif

      Kill "/mnt/grubinst"

      If prun = Null Then Return
      wproc = Exec ["umount", "-l", "/mnt/dev/pts", "/mnt/dev", "/mnt/proc", "/mnt/sys"]
      wprocwait
      If prun = Null Then Return

    Endif

    prun = ("Emptying cache")
    wproc = Exec ["sync"]
    wprocwait
    File.Save("/proc/sys/vm/drop_caches", "3")

    If dialog = 5 Or dialog = 6 Or dialog = 41

      If ppipe = 1 And Exist(fsdir) And Access(fsdir, gb.Write) = True Then File.Save(fsdir & "/.sbschedule", Null)
      If fullrepair.Value = True Then dialog = 12 Else dialog = 13

    Endif

    If pname = ("Live image")

      wproc = Exec ["umount", "-l", "/.systembacklivepoint"]
      wprocwait

      Try Rmdir "/.systembacklivepoint"

    Endif

  Endif

  dialogopen

End

Public Sub skipfstabrepair_Click()

  If skipfstabrepair.Value = True And Not Exist("/mnt/etc/fstab") Then skipfstabrepair.Value = False

End

Public Sub skipfstabrestore_Click()

  If skipfstabrestore.Value = True And Not Exist("/etc/fstab") Then skipfstabrestore.Value = False

End

Public Sub partitionupdate_Click()

  Dim com As Process
  Dim ofile As File
  Dim out, cline, fsystem, uuid, dev, dsize As String
  Dim spc As Integer

  Inc Application.Busy

  If partitionsettings.Count <> 0

    partitionsettings.Clear
    pshadow.Clear

  Endif

  If repairpartition.Text <> Null Then repairpartition.Clear

  If grubinstallcopy.Text <> Null

    grubinstallcopy.Clear
    grubreinstallrestore.Clear
    grubreinstallrepair.Clear

  Endif

  grubinstallcopy.Add("Auto")
  grubreinstallrestore.Add("Auto")
  grubreinstallrepair.Add("Auto")
  grubinstallcopy.Add(("Disabled"))
  grubreinstallrestore.Add(("Disabled"))
  grubreinstallrepair.Add(("Disabled"))

  For Each dev In Dir("/dev", "[hs]d[a-z]", gb.Device).Sort()

    grubinstallcopy.Add("/dev/" & dev)
    grubreinstallrestore.Add("/dev/" & dev)
    grubreinstallrepair.Add("/dev/" & dev)

  Next

  For Each dev In Dir("/dev", "[hs]d[a-z][1-9]*", gb.Device).Sort()

    Exec ["blockdev", "--getsize64", "/dev/" & dev] To dsize
    dsize = Trim(dsize)

    If Val(dsize) >= 1048576

      partitionsettings.Add("/dev/" & dev, "/dev/" & dev)
      pshadow.Add("/dev/" & dev, "/dev/" & dev)

    Endif

    grubinstallcopy.Add("/dev/" & dev)
    grubreinstallrestore.Add("/dev/" & dev)
    grubreinstallrepair.Add("/dev/" & dev)

  Next

  With partitionsettings

    .MoveFirst

    While .Available

      Exec ["blkid", "-o", "value", "-s", "UUID", .Item[0]] To uuid
      uuid = Trim(uuid)

      If uuid = Null

        ofile = Open "/proc/self/mounts" For Input
        While Not Eof(ofile)
          Line Input #ofile, cline

          If InStr(cline, .Item[0]) = 1

            spc = InStr(cline, " ")
            .Item[1] = Replace(Mid(cline, spc + 1, InStr(cline, " ", spc + 1) - spc - 1), "\\040", " ")
            Break

          Endif

        Wend
        Close #ofile

        fsystem = "?"

      Else

        ofile = Open "/proc/self/mounts" For Input
        While Not Eof(ofile)
          Line Input #ofile, cline

          If InStr(cline, .Item[0]) = 1 Or InStr(cline, "/dev/disk/by-uuid/" & uuid) = 1

            spc = InStr(cline, " ")
            .Item[1] = Replace(Mid(cline, spc + 1, InStr(cline, " ", spc + 1) - spc - 1), "\\040", " ")
            Break

          Endif

        Wend
        Close #ofile

        If .Item[1] = Null

          com = Exec ["swapon", "-s"] For Read
          While Not Eof(com)
            Line Input #com, out

            If InStr(out, .Item[0]) = 1

              .Item[1] = "SWAP"
              Break

            Endif

          Wend

        Endif

        Exec ["blkid", "-o", "value", "-s", "TYPE", .Item[0]] To fsystem
        fsystem = Trim(fsystem)

      Endif

      .Item[3] = fsystem
      pshadow[.Item[0]][2] = fsystem
      If .Item[1] = Null Then repairpartition.Add(.Item[0])
      .Item[4] = "-"

      .MoveNext

    Wend

  End With

  With mountpoint

    .Clear
    .Add(Null)
    .Add("/")
    .Add("/home")
    .Add("/boot")
    If grub = "efi-amd64" Then .Add("/boot/efi")
    .Add("/tmp")
    .Add("/usr")
    .Add("/var")
    .Add("/srv")
    .Add("/opt")
    .Add("/usr/local")
    .Add("SWAP")

  End With

  With copynext

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If mountpoint.Enabled = True

    mountpoint.Enabled = False

    With changepartition

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

  Endif

  With filesystem

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default
      format.Enabled = False
      format.Mouse = Mouse.Default

      With umount

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

  End With

  With userdatafilescopy

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  With repairmount

    If repairpartition.Length = 0

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    Else If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  Dec Application.Busy

End

Public Sub installnext_Click()

  Dim mnts As String

  With grubinstallcopy

    If ppipe = 1

      If Exist(fsdir & "/" & cpoint & "_" & pname & "/usr/sbin/update-grub2") And Exist(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dpkg/info/grub-" & grub & ".list")

        If .Visible = False

          .Show
          grubinstallcopydisable.Hide

        Endif

      Else If .Visible = True

        .Hide
        grubinstallcopydisable.Show

      Endif

    Else If Exist("/usr/sbin/update-grub2") And Exist("/var/lib/dpkg/info/grub-" & grub & ".list")

      If .Visible = False

        .Show
        grubinstallcopydisable.Hide

      Endif

    Else If .Visible = True

      .Hide
      grubinstallcopydisable.Show

    Endif

  End With

  If usersettingscopy.Visible = False

    usersettingscopy.Show
    userdatafilescopy.Hide

  Endif

  If partitionsettings.Key <> Null

    mnts = File.Load("/proc/self/mounts")

    If InStr(mnts, " /.sbsystemcopy") <> 0 Or InStr(mnts, " /.sblivesystemwrite") <> 0

      partitionupdate_Click

    Else

      With mountpoint

        If partitionsettings[partitionsettings.Key][1] = "/home" And .Enabled = True

          If .Index <> 0 Then .Index = 0
          .Enabled = False

        Endif

      End With

      With partitionsettings

        .MoveFirst

        While .Available

          If .Item[1] = "/home" And .Item[2] <> Null

            .Item[2] = Null
            pshadow[.Item[0]][1] = Null
            mountpoint.Add("/home")
            Break

          Endif

          .MoveNext

        Wend

      End With

    Endif

  Endif

  installpanel.Hide
  copypanel.Show
  copyback.SetFocus
  Form_Resize

End

Public Sub changepartition_Click()

  Dim com As Process
  Dim out As String
  Dim mindex As Byte = mountpoint.Find(mountpoint.Text)
  Dim isw As Boolean

  Inc Application.Busy

  With partitionsettings

    If partitionsettings[.Key][2] <> Null

      If partitionsettings[.Key][2] = "/"

        copynext.Enabled = False
        copynext.Mouse = Mouse.Default
        mountpoint.Add(partitionsettings[.Key][2])

      Else If partitionsettings[.Key][2] = "/home" Or partitionsettings[.Key][2] = "/boot" Or partitionsettings[.Key][2] = "/boot/efi" Or partitionsettings[.Key][2] = "/tmp" Or partitionsettings[.Key][2] = "/usr" Or partitionsettings[.Key][2] = "/var" Or partitionsettings[.Key][2] = "/srv" Or partitionsettings[.Key][2] = "/opt" Or partitionsettings[.Key][2] = "/usr/local"

        mountpoint.Add(partitionsettings[.Key][2])

      Endif

    Endif

    If partitionsettings[.Key][1] = Null

      If mountpoint.Text = "/boot/efi"

        partitionsettings[.Key][2] = mountpoint.Text
        pshadow[.Key][1] = mountpoint.Text
        partitionsettings[.Key][3] = "vfat"
        partitionsettings[.Key][4] = "x"

      Else If mountpoint.Text = "SWAP"

        partitionsettings[.Key][2] = mountpoint.Text
        pshadow[.Key][1] = mountpoint.Text
        partitionsettings[.Key][3] = "swap"

        com = Exec ["swapon", "-s"] For Read
        While Not Eof(com)
          Input #com, out

          If InStr(out, mountpoint.Text) = 1

            isw = True
            Break

          Endif

        Wend

        If isw = True Then partitionsettings[.Key][4] = "-" Else partitionsettings[.Key][4] = "x"

      Else

        partitionsettings[.Key][2] = mountpoint.Text
        pshadow[.Key][1] = mountpoint.Text
        partitionsettings[.Key][3] = filesystem.Text

        If format.Value = True Then partitionsettings[.Key][4] = "x" Else partitionsettings[.Key][4] = "-"

        If mountpoint.Text = "/"

          copynext.Enabled = True
          copynext.Mouse = Mouse.Pointing

        Endif

      Endif

    Else

      partitionsettings[.Key][2] = mountpoint.Text

      pshadow[.Key][1] = mountpoint.Text
      userdatafilescopy.Enabled = False
      userdatafilescopy.Mouse = Mouse.Default

    Endif

  End With

  If mindex <> -1 And mountpoint.Text <> "SWAP" Then mountpoint.Remove(mindex)
  If mountpoint.Index = 0 Then mountpoint.Text = Null Else mountpoint.Index = 0
  Dec Application.Busy

End

Public Sub mountpoint_Change()

  Dim mpoint As String = mountpoint.Text
  Dim cdir As String = Replace(mpoint, "/", Null)
  Dim check As Boolean

  With partitionsettings

    If mpoint = "/boot/efi" Or mpoint = "SWAP" Or partitionsettings[.Key][1] = "SWAP" Or partitionsettings[.Key][1] = "/home"

      With filesystem

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default
          format.Enabled = False
          format.Mouse = Mouse.Default

        Endif

      End With

    Else If filesystem.Enabled = False

      filesystem.Enabled = True
      filesystem.Mouse = Mouse.Pointing
      format.Enabled = True
      format.Mouse = Mouse.Pointing

    Endif

    If mpoint = Null Or mpoint = partitionsettings[.Key][2]

      With changepartition

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Else

      If partitionsettings[.Key][1] = "/home" And mpoint <> "/home"

        check = True

      Else If partitionsettings[.Key][1] = "SWAP" And mpoint <> "SWAP"

        check = True

      Else If mpoint <> "SWAP"

        With pshadow

          .MoveFirst

          While .Available

            If .Item[1] = mpoint

              check = True
              Break

            Endif

            .MoveNext

          Wend

        End With

      Endif

      If check = True

        With changepartition

          If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

      Else If mpoint = "/" Or mpoint = "/home" Or mpoint = "/boot" Or mpoint = "/boot/efi" Or mpoint = "/tmp" Or mpoint = "/usr" Or mpoint = "/var" Or mpoint = "/srv" Or mpoint = "/opt" Or mpoint = "/usr/local" Or mpoint = "SWAP"

        With changepartition

          If .Enabled = False

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        End With

      Else

        With changepartition

          If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

          If InStr(mpoint, "/") = 1 And InStr(mpoint, "'") = 0 And InStr(mpoint, "\"") = 0 And InStr(mpoint, " ") = 0 And InStr(mpoint, "//") = 0 And RInStr(mpoint, "/") <> Len(mpoint)

            Wait 0.3

            If mpoint = mountpoint.Text

              Try Mkdir tmp & "checkdir" & cdir

              If Not Error And mpoint = mountpoint.Text

                Rmdir tmp & "checkdir" & cdir
                .Enabled = True
                .Mouse = Mouse.Pointing

              Endif

            Endif

          Endif

        End With

      Endif

    Endif

  End With

End

Public Sub mountpoint_Click()

  mountpoint_Change

End

Public Sub filesystem_Click()

  format_Click

End

Public Sub format_Click()

  If format.Value = False And pshadow[partitionsettings.Key][2] <> filesystem.Text Then format.Value = True

End

Public Sub umount_Click()

  Dim com As Process
  Dim out, mnts, uuid As String
  Dim scheck As Boolean

  Inc Application.Busy

  With partitionsettings

    If partitionsettings[.Key][1] = "SWAP"

      wproc = Exec ["swapoff", .Key]
      wprocwait

      com = Exec ["swapon", "-s"] For Read
      While Not Eof(com)
        Line Input #com, out

        If InStr(out, .Key) = 1

          scheck = 1
          Break

        Endif

      Wend

    Else

      wproc = Exec ["umount", "-l", .Key]
      wprocwait
      wproc = Exec ["sync"]
      wprocwait

    Endif

    mnts = File.Load("/proc/self/mounts")

    If InStr(mnts, .Key & " ") = 0 And scheck = 0

      partitionsettings[.Key][1] = Null

      .MoveFirst

      While .Available

        If .Item[1] <> Null And .Item[1] <> "SWAP"

          Exec ["blkid", "-o", "value", "-s", "UUID", .Item[0]] To uuid
          uuid = Trim(uuid)

          If uuid = Null

            If InStr(mnts, .Item[0] & " ") = 0

              wproc = Exec ["umount", "-l", .Item[0]]
              wprocwait

              .Item[1] = Null

            Endif

          Else If InStr(mnts, .Item[0] & " ") = 0 And InStr(mnts, "/dev/disk/by-uuid/" & uuid) = 0

            wproc = Exec ["umount", "-l", .Item[0]]
            wprocwait

            .Item[1] = Null

          Endif

        Endif

        .MoveNext

      Wend

      umount.Enabled = False
      umount.Mouse = Mouse.Default
      mountpoint.Enabled = True
      filesystem.Enabled = True
      filesystem.Mouse = Mouse.Pointing
      format.Enabled = True
      format.Mouse = Mouse.Pointing

    Endif

  End With

  Dec Application.Busy

End

Public Sub partitionsettings_Select()

  Dim ofile As File
  Dim cline As String
  Dim mntcheck As Boolean

  With partitionsettings

    If partitionsettings[.Key][1] = Null

      If mountpoint.Enabled = False Then mountpoint.Enabled = True

      With filesystem

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing
          format.Enabled = True
          format.Mouse = Mouse.Pointing

        Endif

      End With

      With umount

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

      If mountpoint.Index = 0 Then mountpoint.Text = Null Else mountpoint.Index = 0

    Else If partitionsettings[.Key][1] = "SWAP"

      If mountpoint.Enabled = False Then mountpoint.Enabled = True

      With filesystem

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default
          format.Enabled = False
          format.Mouse = Mouse.Default

        Endif

      End With

      With umount

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

      If mountpoint.Text <> "SWAP"

        If mountpoint.Index = 0 Then mountpoint.Text = Null Else mountpoint.Index = 0

      Else If partitionsettings[.Key][2] = "SWAP"

        With changepartition

          If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

      Else If changepartition.Enabled = False

        changepartition.Enabled = True
        changepartition.Mouse = Mouse.Pointing

      Endif

    Else If partitionsettings[.Key][1] = "/home" And usersettingscopy.Visible = False

      If mountpoint.Enabled = False Then mountpoint.Enabled = True

      With filesystem

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default
          format.Enabled = False
          format.Mouse = Mouse.Default

        Endif

      End With

      With umount

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

      With mountpoint

        If .Text <> "/home"

          If .Index = 0 Then .Text = Null Else .Index = 0

        Endif

      End With

    Else

      If mountpoint.Enabled = True Then mountpoint.Enabled = False

      With filesystem

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default
          format.Enabled = False
          format.Mouse = Mouse.Default

        Endif

      End With

      If mountpoint.Index = 0 Then mountpoint.Text = Null Else mountpoint.Index = 0

      If partitionsettings[.Key][1] = "/cdrom" Or partitionsettings[.Key][1] = "/live/image" Or partitionsettings[.Key][1] = "/lib/live/mount/medium"

        mntcheck = True

      Else If Exist("/etc/fstab")

        ofile = Open "/etc/fstab" For Read
        While Not Eof(ofile)
          Line Input #ofile, cline

          If InStr(cline, " " & partitionsettings[.Key][1] & " ") <> 0 Or InStr(cline, " " & partitionsettings[.Key][1] & "/ ") <> 0

            mntcheck = True
            Break

          Endif

        Wend
        Close #ofile

      Endif

      With umount

        If mntcheck = False

          If .Enabled = False

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        Else If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

  End With

  If format.Value = False Then format.Value = True

End

Public Sub copynext_Click()

  If function1.Text = ("System copy") Then dialog = 14 Else dialog = 15
  dialogopen

End

Sub systemcopy()

  Dim ofile, wfile As File
  Dim out, cline, chome, usr, uid, macid, moptions, pass, mntdev, cdir, item, cval, ouname, opasswd, ohname, passwd, fdir, nconf As String
  Dim cter As Byte
  Dim cerr As Boolean

  statusstart

  If pname = ("Currently running system")

    prun = ("Checking files and directories")

    Try Mkdir "/media/" & btmp

    If Exist("/etc/fstab")

      For Each item In Dir("/media", "[^.]*", gb.Directory)

        ofile = Open "/etc/fstab" For Read
        While Not Eof(ofile)
          Line Input #ofile, cline

          If InStr(cline, "/media/" & item) <> 0

            If prun = Null Then Return
            wproc = Exec ["bash", "-c", "sbsync -rlptgox /media/" & item & " /media/" & btmp & " --include=*/ --exclude=*"]
            wprocwait

          Endif

        Wend
        Close #ofile

      Next

    Endif

    If prun = Null Then Return

    Try Mkdir "/var/log/" & btmp

    For Each item In RDir("/var/log", "[^.]*")

      With Stat("/var/log/" & item)

        If .Type = gb.Directory

          Try Mkdir "/var/log/" & btmp & "/" & item

        Else If .Type = gb.File And Right(item, 2) <> ".0" And Right(item, 2) <> ".1" And Right(item, 3) <> ".gz" And Right(item, 4) <> ".old"

          Try File.Save("/var/log/" & btmp & "/" & item, Null)

        Endif

        Try Chmod "/var/log/" & btmp & "/" & item To .Auth
        Try Chown "/var/log/" & btmp & "/" & item To .User
        Try Chgrp "/var/log/" & btmp & "/" & item To .Group

      End With

    Next

    If prun = Null Then Return
    wproc = Exec ["bash", "-c", "sbsync -rlptgo --list-only / --include=/{bin,boot,cdrom,dev,etc,lib,lib32,lib64,media,media/" & btmp & ",mnt,opt,proc,run,sbin,selinux,srv,sys,tmp,usr,var,var/log/" & btmp & ",var/lib/ureadahead/debugfs,initrd*,vmlinuz*} --exclude={/*,/proc/*,/run/*,/sys/*,/media/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/var/lib/ureadahead/*,/var/log/*,/var/tmp/*,/var/cache/apt/*.bin,/var/cache/apt/*.bin.*,/var/cache/apt/archives/*.deb,/var/run/*,/etc/mtab,/var/lib/udisks/mtab,lost+found,*.dpkg-old,*~} | wc -l >/" & tmp & "systemsize"]
    wprocwait
    If prun = Null Then Return

    cssize = Trim(File.Load(tmp & "systemsize"))
    Kill tmp & "systemsize"

  Else

    If pname = ("Live image") Then cssize = Trim(File.Load("/.pointsize")) Else cssize = Trim(File.Load(fsdir & "/" & cpoint & "_" & pname & "/.pointsize"))

  Endif

  If userdatafilescopy.Visible = True Then prun = ("Copying the system") Else prun = ("Installing the system")

  With partitionsettings

    .MoveFirst

    While .Available

      If .Item[2] <> Null Then mountsort.Add(.Item[2])

      .MoveNext

    Wend

    mountsort.Sorted = True

    Try Mkdir "/.sbsystemcopy"

    If Exist(tmp & "copysize") Then Kill tmp & "copysize"
    cproc = Exec ["systemback", "copysize"] For Read

    .MoveFirst

    While .Available

      If mountsort.Count = 0

        Break

      Else If mountsort.Find(.Item[2]) = 0

        mountsort.Remove(0)

        If .Item[1] = "/home" And .Item[2] = "/home"

          chome = 1

        Else If .Item[2] <> Null

          If InStr(File.Load("/proc/self/mounts"), .Item[0] & " ") <> 0

            If prun = Null Then Return
            wproc = Exec ["umount", "-l", .Item[0]]
            wprocwait
            If prun = Null Then Return
            wproc = Exec ["sync"]
            wprocwait
            If prun = Null Then Return

          Endif

          If .Item[4] = "x"

            If prun = Null Then Return

            If .Item[3] = "swap"

              wproc = Exec ["mkswap", .Item[0]]

            Else If .Item[3] = "jfs" Or .Item[3] = "reiserfs"

              wproc = Exec ["mkfs." & .Item[3], "-q", .Item[0]]

            Else If .Item[3] = "xfs"

              wproc = Exec ["mkfs." & .Item[3], "-f", .Item[0]]

            Else If .Item[3] = "vfat"

              wproc = Exec ["parted", "-s", Left(.Item[0], 8), "set", Right(.Item[0], -8), "boot", "On"]
              wprocwait
              If prun = Null Then Return
              wproc = Exec ["mkfs." & .Item[3], "-F", "32", .Item[0]]

            Else

              wproc = Exec ["mkfs." & .Item[3], .Item[0]]

            Endif

            wprocwait
            If prun = Null Then Return

            If wproc.Value <> 0

              File.Save(tmp & "formaterror", .Item[0])
              dialog = 36

              cerr = True
              Break

            Endif

          Endif

          If .Item[2] <> "SWAP"

            If Not IsDir("/.sbsystemcopy" & .Item[2])

              fdir = "/.sbsystemcopy"

              For Each cdir In Split(.Item[2], "/")

                If cdir <> Null

                  fdir &= "/" & cdir

                  If Not IsDir(fdir)

                    Try Mkdir fdir

                    If Error

                      Move fdir To fdir & "_" & Int(Rnd(1000000000, 9999999999))
                      Mkdir fdir

                    Endif

                  Endif

                Endif

              Next

            Endif

            If prun = Null Then Return
            wproc = Exec ["mount", .Item[0], "/.sbsystemcopy" & .Item[2]]
            wprocwait
            If prun = Null Then Return

            If wproc.Value = 0

              If .Item[3] = "btrfs"

                If prun = Null Then Return
                wproc = Exec ["bash", "-c", "btrfs subvolume create /.sbsystemcopy" & .Item[2] & "/@" & Right(.Item[2], -1)]
                wprocwait
                If prun = Null Then Return
                wproc = Exec ["umount", "-l", .Item[0]]
                wprocwait
                If prun = Null Then Return
                wproc = Exec ["bash", "-c", "mount -o defaults,subvol=@" & Right(.Item[2], -1) & " " & .Item[0] & " /.sbsystemcopy" & .Item[2]]
                wprocwait
                If prun = Null Then Return

                If wproc.Value <> 0

                  File.Save(tmp & "mounterror", .Item[0])
                  dialog = 31

                  cerr = True
                  Break

                Endif

              Endif

            Else

              File.Save(tmp & "mounterror", .Item[0])
              dialog = 31

              cerr = True
              Break

            Endif

          Endif

        Endif

        .MoveFirst

      Else

        .MoveNext

      Endif

    Wend

  End With

  If cerr = True

    ofile = Open "/proc/self/mounts" For Input
    While Not Eof(ofile)
      Line Input #ofile, cline

      If InStr(cline, " /.sbsystemcopy") <> 0

        If prun = Null Then Return
        wproc = Exec ["umount", "-l", Left(cline, InStr(cline, " ") - 1)]
        wprocwait
        If prun = Null Then Return

      Endif

    Wend
    Close #ofile

    Try Rmdir "/.sbsystemcopy"

  Else

    If Not Exist("/.sbsystemcopy/home") Then Mkdir "/.sbsystemcopy/home"

    If pname = ("Currently running system")

      With Stat("/home")

        Chmod "/.sbsystemcopy/home" To .Auth
        Chown "/.sbsystemcopy/home" To .User
        Chgrp "/.sbsystemcopy/home" To .Group

      End With

      If userdatafilescopy.Visible = True

        If chome = Null

          ofile = Open "/etc/passwd" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If InStr(cline, ":/home/") <> 0

              usr = Left(cline, InStr(cline, ":") - 1)

              If IsDir("/home/" & usr)

                If prun = Null Then Return

                If userdatafilescopy.Value = True

                  wproc = Exec ["bash", "-c", "sbsync -rlptgo /home/" & usr & "/ /.sbsystemcopy/home/" & usr & " --exclude={/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,*~}"]

                Else

                  wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB /home/" & usr & "/ /.sbsystemcopy/home/" & usr & " --exclude={/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,*~} --include=/.* --exclude=/* ; sbsync -rlptgo /home/" & usr & "/ /.sbsystemcopy/home/" & usr & " --exclude=/.* --include=*/ --exclude=*"]

                Endif

                wprocwait
                If prun = Null Then Return

              Endif

            Endif

          Wend
          Close #ofile

        Endif

        If prun = Null Then Return

        If userdatafilescopy.Value = True

          wproc = Exec ["bash", "-c", "sbsync -rlptgo /root/ /.sbsystemcopy/root --exclude={/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,*~}"]

        Else

          wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB /root/ /.sbsystemcopy/root --exclude={/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,*~} --include=/.* --exclude=/* ; sbsync -rlptgo /root/ /.sbsystemcopy/root --exclude=/.* --include=*/ --exclude=*"]

        Endif

        wprocwait
        If prun = Null Then Return

      Else

        If Exist("/var/lib/dbus/machine-id")

          macid = Trim(File.Load("/var/lib/dbus/machine-id"))

        Endif

        ofile = Open "/etc/passwd" For Read
        While Not Eof(ofile)
          Line Input #ofile, cline

          If InStr(cline, ":x:1000:10") <> 0 Or InStr(cline, ":x:1001:10") <> 0 Or InStr(cline, ":x:1002:10") <> 0 Or InStr(cline, ":x:1003:10") <> 0 Or InStr(cline, ":x:1004:10") <> 0 Or InStr(cline, ":x:1005:10") <> 0 Or InStr(cline, ":x:1006:10") <> 0 Or InStr(cline, ":x:1007:10") <> 0 Or InStr(cline, ":x:1008:10") <> 0 Or InStr(cline, ":x:1009:10") <> 0 Or InStr(cline, ":x:1010:10") <> 0 Or InStr(cline, ":x:1011:10") <> 0 Or InStr(cline, ":x:1012:10") <> 0 Or InStr(cline, ":x:1013:10") <> 0 Or InStr(cline, ":x:1014:10") <> 0 Or InStr(cline, ":x:1015:10") <> 0

            usr = Left(cline, InStr(cline, ":") - 1)
            Break

          Endif

        Wend
        Close #ofile

        If prun = Null Then Return

        If usersettingscopy.Value = True

          wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB /home/" & usr & "/ /.sbsystemcopy/home/" & username.Text & " --exclude={/.gvfs,/.cache/gvfs,/.gnupg,/.ssh,/.local/share/Trash/files/*,/.local/share/Trash/info/*,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "*,*~} --include=/.* --exclude=/* ; sbsync -rlptgo --max-size=8MB /root/ /.sbsystemcopy/root --exclude={/.gvfs,/.cache/gvfs,/.gnupg,/.ssh,/.local/share/Trash/files/*,/.local/share/Trash/info/*,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "*,*~} --include=/.* --exclude=/*"]

        Else

          wproc = Exec ["sbsync", "-rlptgo", "/etc/skel/", "/.sbsystemcopy/home/" & username.Text]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["sbsync", "-rlptgo", "/etc/skel/", "/.sbsystemcopy/root"]

        Endif

        wprocwait
        If prun = Null Then Return

        If Exist("/home/" & usr & "/.config/user-dirs.dirs")

          ofile = Open "/home/" & usr & "/.config/user-dirs.dirs" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If Left(cline) <> "#" And InStr(cline, "$HOME")

              Try Mkdir "/.sbsystemcopy/home/" & username.Text & "/" & Left(Right(cline, - InStr(cline, "/")), -1)

            Endif

          Wend
          Close #ofile

        Endif

      Endif

      If prun = Null Then Return
      wproc = Exec ["bash", "-c", "sbsync -rlptgo / /.sbsystemcopy --include=/{bin,boot,cdrom,dev,etc,lib,lib32,lib64,media,media/" & btmp & ",mnt,opt,proc,run,sbin,selinux,srv,sys,tmp,usr,var,var/log/" & btmp & ",var/lib/ureadahead/debugfs,initrd*,vmlinuz*} --exclude={/*,/proc/*,/run/*,/sys/*,/media/*,/mnt/*,/dev/*,/tmp/*,/cdrom/*,/var/lib/ureadahead/*,/var/log/*,/var/tmp/*,/var/cache/apt/*.bin,/var/cache/apt/*.bin.*,/var/cache/apt/archives/*.deb,/var/run/*,/etc/mtab,/var/lib/udisks/mtab,/etc/udev/rules.d/*-persistent-*.rules,$([ \"" & macid & "\" != \"\" ] && echo /var/lib/dbus/machine-id)," & macid & ",lost+found,*.dpkg-old,*~}"]
      wprocwait
      If prun = Null Then Return

      Exec ["rm", "-rf", "/media/" & btmp, "/var/log/" & btmp]

      If wproc.Value = 0

        If userdatafilescopy.Visible = True And stimer = "on" Then File.Save("/.sbsystemcopy/etc/systemback.conf", "storagedir=" & sdir & "\nliveworkdir=" & lwdir & "\npointsnumber=" & pnumber & "\ntimer=off\nschedule=" & sdys & ":" & shrs & ":" & smts & ":" & ssds & "\nsilentmode=" & smode & "\nwindowposition=" & wpos & "\n")

        For Each item In Dir("/.sbsystemcopy/media/" & btmp)

          Move "/.sbsystemcopy/media/" & btmp & "/" & item To "/.sbsystemcopy/media/" & item

        Next

        Rmdir "/.sbsystemcopy/media/" & btmp

        For Each item In Dir("/.sbsystemcopy/var/log/" & btmp)

          Move "/.sbsystemcopy/var/log/" & btmp & "/" & item To "/.sbsystemcopy/var/log/" & item

        Next

        Rmdir "/.sbsystemcopy/var/log/" & btmp

      Else

        cerr = True

      Endif

    Else If pname = ("Live image")

      If Not IsDir("/.systembacklivepoint")

        Try Mkdir "/.systembacklivepoint"

        If Error

          Move "/.systembacklivepoint" To "/.systembacklivepoint_" & Int(Rnd(1000000000, 9999999999))
          Mkdir "/.systembacklivepoint"

        Endif

      Endif

      If prun = Null Then Return

      If Exist("/cdrom/casper/filesystem.squashfs")

        wproc = Exec ["mount", "-o", "loop", "/cdrom/casper/filesystem.squashfs", "/.systembacklivepoint"]

      Else If Exist("/lib/live/mount/medium/live/filesystem.squashfs")

        wproc = Exec ["mount", "-o", "loop", "/lib/live/mount/medium/live/filesystem.squashfs", "/.systembacklivepoint"]

      Else

        wproc = Exec ["mount", "-o", "loop", "/live/image/live/filesystem.squashfs", "/.systembacklivepoint"]

      Endif

      wprocwait

      With Stat("/.systembacklivepoint/home")

        Chmod "/.sbsystemcopy/home" To .Auth
        Chown "/.sbsystemcopy/home" To .User
        Chgrp "/.sbsystemcopy/home" To .Group

      End With

      If userdatafilescopy.Visible = True

        If prun = Null Then Return

        If userdatafilescopy.Value = True

          wproc = Exec ["sbsync", "-rlptgo", "/.systembacklivepoint/home/", "/.sbsystemcopy/home"]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["sbsync", "-rlptgo", "/.systembacklivepoint/root/", "/.sbsystemcopy/root"]

        Else

          wproc = Exec ["bash", "-c", "sbsync -rlptgo /.systembacklivepoint/home/ /.sbsystemcopy/home --include=/*/.* --exclude=/*/* ; sbsync -rlptgo /.systembacklivepoint/home/ /.sbsystemcopy/home --exclude=/*/.* --include=*/ --exclude=* ; sbsync -rlptgo /.systembacklivepoint/root/ /.sbsystemcopy/root --include=/.* --exclude=/* ; sbsync -rlptgo /.systembacklivepoint/root/ /.sbsystemcopy/root --exclude=/.* --include=*/ --exclude=*"]

        Endif

        wprocwait
        If prun = Null Then Return

      Else

        If Exist("/.systembacklivepoint/var/lib/dbus/machine-id")

          macid = Trim(File.Load("/.systembacklivepoint/var/lib/dbus/machine-id"))

        Endif

        ofile = Open "/.systembacklivepoint/etc/passwd" For Read
        While Not Eof(ofile)
          Line Input #ofile, cline

          If InStr(cline, ":x:1000:10") <> 0 Or InStr(cline, ":x:1001:10") <> 0 Or InStr(cline, ":x:1002:10") <> 0 Or InStr(cline, ":x:1003:10") <> 0 Or InStr(cline, ":x:1004:10") <> 0 Or InStr(cline, ":x:1005:10") <> 0 Or InStr(cline, ":x:1006:10") <> 0 Or InStr(cline, ":x:1007:10") <> 0 Or InStr(cline, ":x:1008:10") <> 0 Or InStr(cline, ":x:1009:10") <> 0 Or InStr(cline, ":x:1010:10") <> 0 Or InStr(cline, ":x:1011:10") <> 0 Or InStr(cline, ":x:1012:10") <> 0 Or InStr(cline, ":x:1013:10") <> 0 Or InStr(cline, ":x:1014:10") <> 0 Or InStr(cline, ":x:1015:10") <> 0

            usr = Left(cline, InStr(cline, ":") - 1)
            Break

          Endif

        Wend
        Close #ofile

        If prun = Null Then Return

        If usersettingscopy.Value = True

          wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB /.systembacklivepoint/home/" & usr & "/ /.sbsystemcopy/home/" & username.Text & " --exclude={/.gnupg,/.ssh,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "} --include=/.* --exclude=/* ; sbsync -rlptgo /.systembacklivepoint/root/ /.sbsystemcopy/root --exclude={/.gnupg,/.ssh,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "} --include=/.* --exclude=/*"]

        Else

          wproc = Exec ["sbsync", "-rlptgo", "/.systembacklivepoint/etc/skel/", "/.sbsystemcopy/home/" & username.Text]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["sbsync", "-rlptgo", "/.systembacklivepoint/etc/skel/", "/.sbsystemcopy/root"]

        Endif

        wprocwait
        If prun = Null Then Return

        If Exist("/.systembacklivepoint/home/" & usr & "/.config/user-dirs.dirs")

          ofile = Open "/.systembacklivepoint/home/" & usr & "/.config/user-dirs.dirs" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If Left(cline) <> "#" And InStr(cline, "$HOME")

              Try Mkdir "/.sbsystemcopy/home/" & username.Text & "/" & Left(Right(cline, - InStr(cline, "/")), -1)

            Endif

          Wend
          Close #ofile

        Endif

      Endif

      If prun = Null Then Return
      wproc = Exec ["bash", "-c", "sbsync -rlptgo /.systembacklivepoint/ /.sbsystemcopy --exclude={/.systemback,/.excludes,/.pointsize,/home,/root,/etc/udev/rules.d/*-persistent-*.rules,$([ \"" & macid & "\" != \"\" ] && echo /var/lib/dbus/machine-id)," & macid & "}"]
      wprocwait
      If prun = Null Then Return

      If wproc.Value = 0

        If userdatafilescopy.Visible = True And InStr(File.Load("/.sbsystemcopy/etc/systemback.conf"), "timer=on") <> 0

          ofile = Open "/.sbsystemcopy/etc/systemback.conf" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If InStr(cline, "timer=on") = 1 Then nconf &= "timer=off\n" Else nconf &= cline & "\n"

          Wend
          Close #ofile

          File.Save("/.sbsystemcopy/etc/systemback.conf", nconf)

        Endif

      Else

        cerr = True

      Endif

      If prun = Null Then Return
      wproc = Exec ["umount", "-l", "/.systembacklivepoint"]
      wprocwait
      If prun = Null Then Return

      Try Rmdir "/.systembacklivepoint"

    Else

      With Stat(fsdir & "/" & cpoint & "_" & pname & "/home")

        Chmod "/.sbsystemcopy/home" To .Auth
        Chown "/.sbsystemcopy/home" To .User
        Chgrp "/.sbsystemcopy/home" To .Group

      End With

      If userdatafilescopy.Visible = True

        For Each usr In Dir(fsdir & "/" & cpoint & "_" & pname & "/home", "*", gb.Directory)

          If IsDir("/home/" & usr)

            If prun = Null Then Return

            If userdatafilescopy.Value = True

              wproc = Exec ["bash", "-c", "sbsync -rlptgo /home/" & usr & "/ /.sbsystemcopy/home/" & usr & " --exclude={/.*,*~}"]

            Else

              wproc = Exec ["bash", "-c", "sbsync -rlptgo /home/" & usr & "/ /.sbsystemcopy/home/" & usr & " --exclude=/.* --include=*/ --exclude=*"]

            Endif

            wprocwait
            If prun = Null Then Return

          Else If Exist(fsdir & "/" & cpoint & "_" & pname & "/home/" & usr & "/.config/user-dirs.dirs")

            ofile = Open fsdir & "/" & cpoint & "_" & pname & "/home/" & usr & "/.config/user-dirs.dirs" For Read
            While Not Eof(ofile)
              Line Input #ofile, cline

              If Left(cline) <> "#" And InStr(cline, "$HOME")

                Try Mkdir "/.sbsystemcopy/home/" & username.Text & "/" & Left(Right(cline, - InStr(cline, "/")), -1)

              Endif

            Wend
            Close #ofile

          Endif

        Next

        If prun = Null Then Return

        If userdatafilescopy.Value = True

          wproc = Exec ["bash", "-c", "sbsync -rlptgo /root/ /.sbsystemcopy/root --exclude={/.*,*~}"]

        Else

          wproc = Exec ["bash", "-c", "sbsync -rlptgo /root/ /.sbsystemcopy/root --exclude=/.* --include=*/ --exclude=*"]

        Endif

        wprocwait
        If prun = Null Then Return
        wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/home/", "/.sbsystemcopy/home"]
        wprocwait
        If prun = Null Then Return
        wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/root/", "/.sbsystemcopy/root"]
        wprocwait
        If prun = Null Then Return

      Else

        If Exist(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dbus/machine-id")

          macid = Trim(File.Load(fsdir & "/" & cpoint & "_" & pname & "/var/lib/dbus/machine-id"))

        Endif

        ofile = Open fsdir & "/" & cpoint & "_" & pname & "/etc/passwd" For Read
        While Not Eof(ofile)
          Line Input #ofile, cline

          If InStr(cline, ":x:1000:10") <> 0 Or InStr(cline, ":x:1001:10") <> 0 Or InStr(cline, ":x:1002:10") <> 0 Or InStr(cline, ":x:1003:10") <> 0 Or InStr(cline, ":x:1004:10") <> 0 Or InStr(cline, ":x:1005:10") <> 0 Or InStr(cline, ":x:1006:10") <> 0 Or InStr(cline, ":x:1007:10") <> 0 Or InStr(cline, ":x:1008:10") <> 0 Or InStr(cline, ":x:1009:10") <> 0 Or InStr(cline, ":x:1010:10") <> 0 Or InStr(cline, ":x:1011:10") <> 0 Or InStr(cline, ":x:1012:10") <> 0 Or InStr(cline, ":x:1013:10") <> 0 Or InStr(cline, ":x:1014:10") <> 0 Or InStr(cline, ":x:1015:10") <> 0

            usr = Left(cline, InStr(cline, ":") - 1)
            Break

          Endif

        Wend
        Close #ofile

        If prun = Null Then Return

        If usersettingscopy.Value = True

          wproc = Exec ["bash", "-c", "sbsync -rlptgo '" & fsdir & "'/" & cpoint & "_" & pname & "/home/" & usr & "/ /.sbsystemcopy/home/" & username.Text & " --exclude={/.gnupg,/.ssh,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "} ; sbsync -rlptgo '" & fsdir & "'/" & cpoint & "_" & pname & "/root/ /.sbsystemcopy/root --exclude={/.gnupg,/.ssh,/.gnome2/keyrings/*,/.kde/share/apps/kwallet/*," & macid & "}"]

        Else

          wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/etc/skel/", "/.sbsystemcopy/home/" & username.Text]
          wprocwait
          If prun = Null Then Return
          wproc = Exec ["sbsync", "-rlptgo", fsdir & "/" & cpoint & "_" & pname & "/etc/skel/", "/.sbsystemcopy/root"]

        Endif

        wprocwait
        If prun = Null Then Return

        If Exist(fsdir & "/" & cpoint & "_" & pname & "/home/" & usr & "/.config/user-dirs.dirs")

          ofile = Open fsdir & "/" & cpoint & "_" & pname & "/home/" & usr & "/.config/user-dirs.dirs" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If Left(cline) <> "#" And InStr(cline, "$HOME")

              Try Mkdir "/.sbsystemcopy/home/" & username.Text & "/" & Left(Right(cline, - InStr(cline, "/")), -1)

            Endif

          Wend
          Close #ofile

        Endif

      Endif

      If prun = Null Then Return
      wproc = Exec ["bash", "-c", "sbsync -rlptgo '" & fsdir & "'/" & cpoint & "_" & pname & "/ /.sbsystemcopy --exclude={/.excludes,/.pointsize,/home,/root,/etc/udev/rules.d/*-persistent-*.rules,$([ \"" & macid & "\" != \"\" ] && echo /var/lib/dbus/machine-id)," & macid & "}"]
      wprocwait
      If prun = Null Then Return

      If wproc.Value = 0

        If userdatafilescopy.Visible = True And InStr(File.Load("/.sbsystemcopy/etc/systemback.conf"), "timer=on") <> 0

          ofile = Open "/.sbsystemcopy/etc/systemback.conf" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If InStr(cline, "timer=on") = 1 Then nconf &= "timer=off\n" Else nconf &= cline & "\n"

          Wend
          Close #ofile

          File.Save("/.sbsystemcopy/etc/systemback.conf", nconf)

        Endif

      Else

        cerr = True

      Endif

    Endif

    If cerr = False And usersettingscopy.Visible = True

      Try Kill "/.sbsystemcopy/etc/systemback.conf"
      Try Kill "/.sbsystemcopy/etc/systemback.excludes"

      ofile = Open "/.sbsystemcopy/etc/passwd" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If InStr(cline, usr & ":") = 1

          For Each cval In Split(cline, ":")

            cter = cter + 1

            If cter = 3

              uid = cval & ":"

            Else If cter = 4

              uid &= cval

            Else If cter = 5

              ouname = cval
              Break

            Endif

          Next

          Break

        Endif

      Wend
      Close #ofile

      ofile = Open "/.sbsystemcopy/etc/shadow" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If InStr(cline, usr & ":") = 1

          opasswd = Right(cline, - InStr(cline, ":"))
          opasswd = Left(opasswd, InStr(opasswd, ":") - 1)
          Break

        Endif

      Wend
      Close #ofile

      If prun = Null Then Return

      Exec ["mkpasswd", "-m", "sha-512", password1.Text] To passwd

      passwd = Trim(passwd)

      wproc = Exec ["bash", "-c", "chown -R " & uid & " /.sbsystemcopy/home/" & username.Text & " ; sed -i \"s+^" & usr & ":x:" & uid & ":" & ouname & ":/home/" & usr & "+" & username.Text & ":x:" & uid & ":" & fullname.Text & ",,,:/home/" & username.Text & "+g\" /.sbsystemcopy/etc/passwd ; sed -i 's+^" & usr & ":" & opasswd & "+" & username.Text & ":" & passwd & "+g' /.sbsystemcopy/etc/shadow"]
      wprocwait
      If prun = Null Then Return

      ofile = Open "/.sbsystemcopy/etc/shadow" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If InStr(cline, "root:") = 1

          opasswd = Right(cline, - InStr(cline, ":"))
          opasswd = Left(opasswd, InStr(opasswd, ":") - 1)
          Break

        Endif

      Wend
      Close #ofile

      If prun = Null Then Return

      If rootpassword1.Text <> Null

        Exec ["mkpasswd", "-m", "sha-512", rootpassword1.Text] To passwd
        passwd = Trim(passwd)

        wproc = Exec ["sed", "-i", "s+^root:" & opasswd & "+root:" & passwd & "+g", "/.sbsystemcopy/etc/shadow"]

      Else

        wproc = Exec ["sed", "-i", "s+^root:" & opasswd & "+root:!+g", "/.sbsystemcopy/etc/shadow"]

      Endif

      wprocwait
      If prun = Null Then Return

      ohname = Trim(File.Load("/.sbsystemcopy/etc/hostname"))

      File.Save("/.sbsystemcopy/etc/hostname", hostname.Text & "\n")

      wproc = Exec ["bash", "-c", "sed -i -e s+^" & usr & ":+" & username.Text & ":+g -e s+:" & usr & "$+:" & username.Text & "+g -e s+:" & usr & ",+:" & username.Text & ",+g -e s+," & usr & ",+," & username.Text & ",+g -e s+," & usr & "$+," & username.Text & "+g /.sbsystemcopy/etc/g{roup,shadow} ; sed -i -e s+\\t" & ohname & "\\t+\\t" & hostname.Text & "\\t+g -e ':a;N;$!ba;s+\\t" & ohname & "\\n+\\t" & hostname.Text & "\\n+g' /.sbsystemcopy/etc/hosts"]
      wprocwait
      If prun = Null Then Return

      File.Save("/.sbsystemcopy/deluser", "#!/bin/bash\nfor rmuser in $(grep :\\$6\\$* /etc/shadow | cut -d : -f 1)\ndo [ ${rmuser} != " & username.Text & " -a ${rmuser} != root ] && userdel ${rmuser}\ndone\n")
      Chmod "/.sbsystemcopy/deluser" To "rwxrwxr-x"

      wproc = Exec ["chroot", "/.sbsystemcopy", "/deluser"]
      wprocwait
      If prun = Null Then Return

      Kill "/.sbsystemcopy/deluser"

    Endif

    If Dfree("/.sbsystemcopy") > 104857600 And Dfree("/.sbsystemcopy/home") > 104857600 And Dfree("/.sbsystemcopy/boot") > 52428800

      If cerr = False

        If InStr(File.Load("/proc/cmdline"), "noxconf") <> 0

          Try Kill "/.sbsystemcopy/etc/X11/xorg.conf"

        Endif

        File.Save("/.sbsystemcopy/etc/fstab", "# /etc/fstab: static file system information.\n#\n# Use 'blkid' to print the universally unique identifier for a\n# device; this may be used with UUID= as a more robust way to name devices\n# that works even if disks are added and removed. See fstab(5).\n#\n# <file system> <mount point>   <type>  <options>       <dump>  <pass>\n")

        With partitionsettings

          .MoveFirst

          While .Available

            If .Item[2] <> Null

              If .Item[2] = "/"

                If .Item[3] = "ext4" Or .Item[3] = "ext3" Or .Item[3] = "ext2" Or .Item[3] = "jfs" Or .Item[3] = "xfs"

                  moptions = "defaults,errors=remount-ro"

                Else

                  If .Item[3] = "reiserfs" Then moptions = "notail" Else moptions = "defaults,subvol=@"

                Endif

                pass = 1

              Else

                If .Item[3] = "reiserfs"

                  moptions = "notail"

                Else

                  If .Item[3] = "btrfs" Then moptions = "defaults,subvol=@" & Right(.Item[2], -1) Else moptions = "defaults"

                Endif

                pass = 2

              Endif

              If .Item[1] = "/home" And .Item[2] = "/home"

                ofile = Open "/etc/fstab" For Read
                While Not Eof(ofile)
                  Line Input #ofile, cline

                  If InStr(cline, " /home ") <> 0 Or InStr(cline, "\t/home\t") <> 0

                    Break

                  Else If InStr(cline, " /home/ ") <> 0 Or InStr(cline, "\t/home/\t") <> 0

                    Break

                  Endif

                Wend
                Close #ofile

                wfile = Open "/.sbsystemcopy/etc/fstab" For Write Append
                Print #wfile, "# /home\n" & cline
                Close #wfile

              Else If .Item[2] = "SWAP"

                Exec ["blkid", "-o", "value", "-s", "UUID", .Item[0]] To out
                out = Trim(out)

                wfile = Open "/.sbsystemcopy/etc/fstab" For Write Append
                Print #wfile, "# swap\nUUID=" & out & "   none   swap   sw   0   0"
                Close #wfile

              Else

                Exec ["blkid", "-o", "value", "-s", "UUID", .Item[0]] To out
                out = Trim(out)

                wfile = Open "/.sbsystemcopy/etc/fstab" For Write Append
                Print #wfile, "# " & .Item[2] & "\nUUID=" & out & "   " & .Item[2] & "   " & .Item[3] & "   " & moptions & "   0   " & pass
                Close #wfile

              Endif

            Endif

            .MoveNext

          Wend

        End With

        If Exist("/etc/fstab")

          ofile = Open "/etc/fstab" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If InStr(cline, "/dev/cdrom") <> 0

              wfile = Open "/.sbsystemcopy/etc/fstab" For Write Append
              Print #wfile, "# cdrom"

              ofile = Open "/etc/fstab" For Read
              While Not Eof(ofile)
                Line Input #ofile, cline

                If InStr(cline, "/dev/cdrom") <> 0 Then Print #wfile, cline

              Wend
              Close #wfile

              Break

            Endif

          Wend
          Close #ofile

          ofile = Open "/etc/fstab" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If InStr(cline, "/dev/sr") <> 0

              wfile = Open "/.sbsystemcopy/etc/fstab" For Write Append
              Print #wfile, "# cdrom"

              ofile = Open "/etc/fstab" For Read
              While Not Eof(ofile)
                Line Input #ofile, cline

                If InStr(cline, "/dev/sr") <> 0 Then Print #wfile, cline

              Wend
              Close #wfile

              Break

            Endif

          Wend
          Close #ofile

          ofile = Open "/etc/fstab" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If InStr(cline, "/dev/fd") <> 0

              wfile = Open "/.sbsystemcopy/etc/fstab" For Write Append
              Print #wfile, "# floppy"

              ofile = Open "/etc/fstab" For Read
              While Not Eof(ofile)
                Line Input #ofile, cline

                If InStr(cline, "/dev/fd") <> 0 Then Print #wfile, cline

              Wend
              Close #wfile

              Break

            Endif

          Wend
          Close #ofile

        Endif

        If grubinstallcopy.Visible = True And grubinstallcopy.Text <> ("Disabled")

          If prun = Null Then Return
          wproc = Exec ["mount", "-B", "/dev", "/.sbsystemcopy/dev"]
          wprocwait
          wproc = Exec ["mount", "-B", "/dev/pts", "/.sbsystemcopy/dev/pts"]
          wprocwait
          wproc = Exec ["mount", "-B", "/proc", "/.sbsystemcopy/proc"]
          wprocwait
          wproc = Exec ["mount", "-B", "/sys", "/.sbsystemcopy/sys"]
          wprocwait
          If prun = Null Then Return

          If grubinstallcopy.Text = "Auto"

            mntdev = Null

            ofile = Open "/proc/self/mounts" For Input
            While Not Eof(ofile)
              Line Input #ofile, cline

              If InStr(cline, " /.sbsystemcopy/boot ") <> 0

                mntdev = Left(cline, InStr(cline, " ") - 1)
                Break

              Else If InStr(cline, " /.sbsystemcopy ") <> 0

                mntdev = Left(cline, InStr(cline, " ") - 1)

              Endif

            Wend
            Close #ofile

            File.Save("/.sbsystemcopy/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & Left(mntdev, 8) & "\n")

          Else

            File.Save("/.sbsystemcopy/grubinst", "#!/bin/bash\nupdate-grub\ngrub-install --force " & grubinstallcopy.Text & "\n")

          Endif

          Chmod "/.sbsystemcopy/grubinst" To "rwxrwxr-x"

          If prun = Null Then Return
          wproc = Exec ["chroot", "/.sbsystemcopy", "/grubinst"]
          wprocwait
          If prun = Null Then Return

          If wproc.Value <> 0

            If userdatafilescopy.Visible = True Then dialog = 22 Else dialog = 34

          Endif

          Kill "/.sbsystemcopy/grubinst"

          wproc = Exec ["umount", "-l", "/.sbsystemcopy/dev/pts", "/.sbsystemcopy/dev", "/.sbsystemcopy/proc", "/.sbsystemcopy/sys"]
          wprocwait
          If prun = Null Then Return

        Endif

      Else

        If userdatafilescopy.Visible = True Then dialog = 39 Else dialog = 40

      Endif

    Else

      If userdatafilescopy.Visible = True Then dialog = 21 Else dialog = 35

    Endif

    prun = ("Emptying cache")

    ofile = Open "/proc/self/mounts" For Input
    While Not Eof(ofile)
      Line Input #ofile, cline

      If InStr(cline, " /.sbsystemcopy") <> 0

        wproc = Exec ["umount", "-l", Left(cline, InStr(cline, " ") - 1)]
        wprocwait

      Endif

    Wend
    Close #ofile

    Try Rmdir "/.sbsystemcopy"

    wproc = Exec ["sync"]
    wprocwait

    File.Save("/proc/sys/vm/drop_caches", "3")

    If cerr = False

      If userdatafilescopy.Visible = True Then dialog = 25 Else dialog = 33

    Endif

  Endif

  dialogopen

End

Sub windowmove()

  Dim wmovex, wmovey As Short

  With systembackgui

    If .W <> nwidth Or .H <> nheight

      wmovex = .X + (.W - nwidth) / 2
      If wmovex < 0 Then wmovex = 0
      wmovey = .Y + (.H - nheight) / 2
      If wmovey < 0 Then wmovey = 0
      .Resize(1, 1)

      Wait 0.15

      .Move(wmovex, wmovey, nwidth, nheight)

    Endif

  End With

End

Public Sub partitionupdate2_Click()

  Dim ofile As File
  Dim cline As String

  Inc Application.Busy

  ofile = Open "/proc/self/mounts" For Input
  While Not Eof(ofile)
    Line Input #ofile, cline

    If InStr(cline, " /mnt/") <> 0 Or InStr(cline, " /mnt ") <> 0

      wproc = Exec ["umount", "-l", Left(cline, InStr(cline, " ") - 1)]
      wprocwait

    Endif

  Wend
  Close #ofile

  wproc = Exec ["sync"]
  wprocwait

  With repairmountpoint

    .Clear
    .Text = "/mnt"
    .Add("/mnt")
    .Add("/mnt/home")
    .Add("/mnt/boot")
    If grub = "efi-amd64" Then .Add("/mnt/boot/efi")
    .Add("/mnt/usr")
    .Add("/mnt/var")
    .Add("/mnt/opt")
    .Add("/mnt/usr/local")

  End With

  systemrepair_Click
  Dec Application.Busy
  partitionupdate_Click

End

Public Sub repairmount_Click()

  Dim item, path As String
  Dim mindex As Byte = repairmountpoint.Find(repairmountpoint.Text)

  Inc Application.Busy

  For Each item In Split(Right(repairmountpoint.Text, -5), "/")

    path = path & "/" & item

    If Not IsDir("/mnt" & path)

      If Exist("/mnt" & path) Then Move "/mnt" & path To "/mnt" & path & "_" & Int(Rnd(1000000000, 9999999999))
      Mkdir "/mnt" & path

    Endif

  Next

  wproc = Exec ["mount", repairpartition.Text, repairmountpoint.Text]
  wprocwait

  If wproc.Value = 0

    partitionupdate_Click

    If mindex <> -1 Then repairmountpoint.Remove(mindex)
    repairmountpoint.Text = Null

  Else

    With repairmount

      .Text = Null
      .Picture = Picture["error.png"]

      Wait 0.5

      .Picture = Null
      .Text = ("Mount")

    End With

  Endif

  If grubrepair.Value = True Then systemrepair_Click
  Dec Application.Busy

End

Public Sub repairmountpoint_Change()

  Dim rmpoint As String = repairmountpoint.Text
  Dim cdir As String = Replace(rmpoint, "/", Null)
  Dim mnts As String = File.Load("/proc/self/mounts")

  With repairmount

    If rmpoint = Null Or repairpartition.Text = Null

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    Else If InStr(mnts, " /mnt ") = 0 And rmpoint <> "/mnt"

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    Else If InStr(mnts, " " & rmpoint & " ") = 0 And InStr(mnts, " " & rmpoint & "/") = 0

      If rmpoint = "/mnt" Or rmpoint = "/mnt/home" Or rmpoint = "/mnt/boot" Or rmpoint = "/mnt/boot/efi" Or rmpoint = "/mnt/usr" Or rmpoint = "/mnt/var" Or rmpoint = "/mnt/opt" Or rmpoint = "/mnt/usr/local"

        If .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      Else

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

        If InStr(rmpoint, "/mnt/") = 1 And InStr(rmpoint, "'") = 0 And InStr(rmpoint, "\"") = 0 And InStr(rmpoint, " ") = 0 And InStr(rmpoint, "//") = 0 And RInStr(rmpoint, "/") <> Len(rmpoint)

          Wait 0.3

          If rmpoint = repairmountpoint.Text

            Try Mkdir tmp & "checkdir" & cdir

            If Not Error And rmpoint = .Text

              Rmdir tmp & "checkdir" & cdir
              .Enabled = True
              .Mouse = Mouse.Pointing

            Endif

          Endif

        Endif

      Endif

    Else If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub repairmountpoint_Click()

  repairmountpoint_Change

End

Public Sub liveworkdirbutton_Click()

  dirrefresh_Click
  If textoutputwindow.Visible = True Then textoutputwindow.Hide
  livecreatepanel.Hide
  choosepanel.Show
  function1.Text = ("Working directory")
  dirchooseok.SetFocus
  nwidth = 642
  nheight = 481
  windowmove

End

Public Sub livedelete_Click()

  Dim item As String

  Inc Application.Busy
  Try Kill lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".sblive"
  Try Kill lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".iso"

  livelist.Clear

  livedelete.Enabled = False
  livedelete.Mouse = Mouse.Default

  With liveconvert

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  With livewritestart

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If IsDir(lwdir)

    For Each item In Dir(lwdir, "*.sblive", gb.File)

      With Stat(lwdir & "/" & item)

        If Len(item) > 7 And .Size > 0 And .Type <> gb.Link Then livelist.Add(Left(item, -7))

      End With

    Next

  Endif

  Dec Application.Busy

End

Public Sub livename_Change()

  Dim out As String
  Dim iname As String = livename.Text

  If livenamepipe.Visible = True Then livenamepipe.Hide

  With livecreatenew

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If livename.Text = "auto"

    livename.Font = Font["Italic"]
    If livenameerror.Visible = True Then livenameerror.Hide

  Else

    livename.Font = Font[Null]

    If iname <> Null And InStr(iname, " ") = 0 And InStr(iname, "'") = 0 And InStr(iname, "\"") = 0 And Right(iname, 4) <> ".iso" And Right(iname, 4) <> ".ISO" And Right(iname, 4) <> ".Iso" And Right(iname, 4) <> ".iSo" And Right(iname, 4) <> ".isO" And Right(iname, 4) <> ".IsO" And Right(iname, 4) <> ".iSO" And Right(iname, 4) <> ".ISo"

      Wait 0.3

      If iname = livename.Text

        Exec ["bash", "-c", "echo -n '" & iname & "' | wc -c"] To out

        If Val(Trim(out)) < 33

          Try File.Save(tmp & iname, Null)

          If Error

            If livenameerror.Visible = False Then livenameerror.Show

          Else

            If iname = livename.Text

              If livenameerror.Visible = True Then livenameerror.Hide
              livenamepipe.Show

            Endif

            Kill tmp & livename.Text

          Endif

        Else If livenameerror.Visible = False

          livenameerror.Show

        Endif

      Endif

    Else If livenameerror.Visible = False

      livenameerror.Show

    Endif

  Endif

End

Public Sub additem_Click()

  Dim wfile As File

  Inc Application.Busy
  additem.Enabled = False
  additem.Mouse = Mouse.Default

  With itemslist

    wfile = Open "/etc/systemback.excludes" For Write Append
    Print #wfile, .Key
    Close #wfile

    excludedlist.Add(.Key)
    .Remove(.Key)
    If .Count <> 0 Then .UnselectAll

  End With

  Dec Application.Busy

End

Public Sub removeitem_Click()

  Dim ofile As File
  Dim cline, usr, item, sitem, clist As String

  Inc Application.Busy
  removeitem.Enabled = False
  removeitem.Mouse = Mouse.Default

  ofile = Open "/etc/systemback.excludes" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If cline <> excludedlist.Text Then clist &= cline & "\n"

  Wend
  Close #ofile

  File.Save("/etc/systemback.excludes", clist)
  excludedlist.Remove((excludedlist.Find(excludedlist.Text)))

  If itemslist.Count <> 0 Then itemslist.Clear

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If InStr(cline, ":/home/") <> 0

      usr = Left(cline, InStr(cline, ":") - 1)

      If IsDir("/home/" & usr)

        For Each item In Dir("/home/" & usr)

          If Left(item, 1) = "." And pointexclude.Value = True Or If Left(item, 1) <> "." And liveexclude.Value = True

            If excludedlist.Find(item) = -1

              If itemslist.Exist(item) = False

                If Access("/home/" & usr & "/" & item, gb.Read) = True

                  If Stat("/home/" & usr & "/" & item).Type = gb.Directory

                    itemslist.Add(item, item, Picture["dir.png"])

                    For Each sitem In Dir("/home/" & usr & "/" & item)

                      If excludedlist.Find(item & "/" & sitem) = -1 Then itemslist.Add(item & "/" & sitem, sitem,, item)

                    Next

                  Else

                    itemslist.Add(item, item)

                  Endif

                Else

                  itemslist.Add(item, item)

                Endif

              Else If Access("/home/" & usr & "/" & item, gb.Read) = True

                If Stat("/home/" & usr & "/" & item).Type = gb.Directory

                  If itemslist[item].Picture = Null Then itemslist[item].Picture = Picture["dir.png"]

                  For Each sitem In Dir("/home/" & usr & "/" & item)

                    If excludedlist.Find(item & "/" & sitem) = -1 And itemslist.Exist(item & "/" & sitem) = False Then itemslist.Add(item & "/" & sitem, sitem,, item)

                  Next

                Endif

              Endif

            Endif

          Endif

        Next

      Endif

    Endif

  Wend
  Close #ofile

  For Each item In Dir("/root")

    If Left(item, 1) = "." And pointexclude.Value = True Or If Left(item, 1) <> "." And liveexclude.Value = True

      If excludedlist.Find(item) = -1

        If itemslist.Exist(item) = False

          If Stat("/root/" & item).Type = gb.Directory

            itemslist.Add(item, item, Picture["dir.png"])

            For Each sitem In Dir("/root/" & item)

              If excludedlist.Find(item & "/" & sitem) = -1 Then itemslist.Add(item & "/" & sitem, sitem,, item)

            Next

          Else

            itemslist.Add(item, item)

          Endif

        Else If Stat("/root/" & item).Type = gb.Directory

          If itemslist[item].Picture = Null Then itemslist[item].Picture = Picture["dir.png"]

          For Each sitem In Dir("/root/" & item)

            If excludedlist.Find(item & "/" & sitem) = -1 And itemslist.Exist(item & "/" & sitem) = False Then itemslist.Add(item & "/" & sitem, sitem,, item)

          Next

        Endif

      Endif

    Endif

  Next

  If excludedlist.Count <> 0 Then excludedlist.UnselectAll
  Dec Application.Busy

End

Public Sub itemslist_Select()

  With additem

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

      With removeitem

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

  End With

  If excludedlist.Text <> Null Then excludedlist.UnselectAll

End

Public Sub excludedlist_Select()

  With removeitem

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

      With additem

        If .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

  End With

  If itemslist.Text <> Null Then itemslist.UnselectAll

End

Public Sub interrupt_Click()

  prun = Null

  If wproc

    If wproc.State = Process.Running Then wproc.Kill

  Endif

  If cproc

    If cproc.State = Process.Running Then cproc.Kill

  Endif

  If sstart = False

    If pointpipe1.Value = True Then pointpipe1.Value = False
    If pointpipe2.Value = True Then pointpipe2.Value = False
    If pointpipe3.Value = True Then pointpipe3.Value = False
    If pointpipe4.Value = True Then pointpipe4.Value = False
    If pointpipe5.Value = True Then pointpipe5.Value = False
    If pointpipe6.Value = True Then pointpipe6.Value = False
    If pointpipe7.Value = True Then pointpipe7.Value = False
    If pointpipe8.Value = True Then pointpipe8.Value = False
    If pointpipe9.Value = True Then pointpipe9.Value = False
    If pointpipe10.Value = True Then pointpipe10.Value = False
    If pointpipe11.Value = True Then pointpipe11.Value = False
    If pointpipe12.Value = True Then pointpipe12.Value = False
    If pointpipe13.Value = True Then pointpipe13.Value = False
    If pointpipe14.Value = True Then pointpipe14.Value = False
    If pointpipe15.Value = True Then pointpipe15.Value = False
    statuspanel.Hide

    If livecreatepanel.Visible = False

      If systembackpanel.Visible = False

        systembackpanel.Show
        function1.Text = "Systemback"

        If restorepanel.Visible = True

          restorepanel.Hide

        Else If copypanel.Visible = True

          copypanel.Hide

        Else If repairpanel.Visible = True

          repairpanel.Hide

        Endif

      Endif

      If functionmenunext.Enabled = True Then functionmenunext.SetFocus Else functionmenuback.SetFocus

    Endif

    mainpanel.Show
    nwidth = 698
    nheight = 465
    windowmove

  Else

    File.Save(fsdir & "/.sbschedule", Null)
    systembackgui.Close

  Endif

End

Public Sub password1_Change()

  Dim passwd As String = password1.Text

  If passwordpipe.Visible = True Then passwordpipe.Hide

  With installnext

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If passwd = Null

    If password2.Length <> 0 Then password2.Text = Null
    If password2.Enabled = True Then password2.Enabled = False
    If passworderror.Visible = True Then passworderror.Hide

  Else

    If password2.Enabled = False Then password2.Enabled = True

    If password2.Length = 0

      If passworderror.Visible = True Then passworderror.Hide

    Else If passwd = password2.Text And InStr(passwd, "-") <> 1

      If passwd = password1.Text

        wproc = Exec ["mkpasswd", "-m", "sha-512", passwd] For Read
        wprocwait

        If wproc.Value = 0 And passwd = password1.Text

          If passworderror.Visible = True Then passworderror.Hide
          passwordpipe.Show

        Endif

      Endif

    Else

      If passworderror.Visible = False Then passworderror.Show

    Endif

  Endif

End

Public Sub password2_Change()

  password1_Change

End

Public Sub rootpassword1_Change()

  Dim passwd As String = rootpassword1.Text

  If rootpasswordpipe.Visible = True Then rootpasswordpipe.Hide

  With installnext

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If passwd = Null

    If rootpassword2.Length <> 0 Then rootpassword2.Text = Null
    If rootpassword2.Enabled = True Then rootpassword2.Enabled = False
    If rootpassworderror.Visible = True Then rootpassworderror.Hide

  Else

    If rootpassword2.Enabled = False Then rootpassword2.Enabled = True

    If rootpassword2.Length = 0

      If rootpassworderror.Visible = True Then rootpassworderror.Hide

    Else If passwd = rootpassword2.Text And InStr(passwd, "-") <> 1

      If passwd = rootpassword1.Text

        wproc = Exec ["mkpasswd", "-m", "sha-512", passwd] For Read
        wprocwait

        If wproc.Value = 0 And passwd = rootpassword1.Text

          If rootpassworderror.Visible = True Then rootpassworderror.Hide
          rootpasswordpipe.Show

        Endif

      Endif

    Else

      If rootpassworderror.Visible = False Then rootpassworderror.Show

    Endif

  Endif

End

Public Sub rootpassword2_Change()

  rootpassword1_Change

End

Public Sub fullname_Change()

  If fullname.Length = 0

    If fullnamepipe.Visible = True

      fullnamepipe.Hide

    Else If fullnameerror.Visible = True

      fullnameerror.Hide

    Endif

    With installnext

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

  Else If Left$(fullname.Text, 1) <> " " And InStr(fullname.Text, "#") = 0 And InStr(fullname.Text, ":") = 0 And InStr(fullname.Text, ",") = 0 And InStr(fullname.Text, "'") = 0 And InStr(fullname.Text, "\"") = 0

    If fullnamepipe.Visible = False

      If fullnameerror.Visible = True Then fullnameerror.Hide
      fullnamepipe.Show

    Endif

  Else

    If fullnameerror.Visible = False

      If fullnamepipe.Visible = True Then fullnamepipe.Hide
      fullnameerror.Show

    Endif

    If installnext.Enabled = True

      installnext.Enabled = False
      installnext.Mouse = Mouse.Default

    Endif

  Endif

End

Public Sub username_Change()

  Dim uname As String = username.Text

  If usernamepipe.Visible = True Then usernamepipe.Hide

  With installnext

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If uname = Null

    If usernameerror.Visible = True Then usernameerror.Hide

  Else

    If InStr(uname, " ") = 0 And InStr(uname, ":") = 0 And InStr(uname, "#") = 0 And InStr(uname, ",") = 0 And InStr(uname, "'") = 0 And InStr(uname, "\"") = 0

      Wait 0.3

      If uname = username.Text

        wproc = Exec ["useradd", uname]
        wprocwait

        If wproc.Value = 0

          Exec ["userdel", uname]

          If uname = username.Text

            If usernameerror.Visible = True Then usernameerror.Hide
            usernamepipe.Show

          Endif

        Else If wproc.Value = 9 And uname = username.Text

          If usernameerror.Visible = True Then usernameerror.Hide
          usernamepipe.Show

        Else If uname = username.Text And usernameerror.Visible = False

          usernameerror.Show

        Endif

      Endif

    Else If usernameerror.Visible = False

      usernameerror.Show

    Endif

  Endif

End

Public Sub hostname_Change()

  Dim chname As String
  Dim hname As String = hostname.Text

  If hostnamepipe.Visible = True Then hostnamepipe.Hide

  With installnext

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  If hname = Null

    If hostnameerror.Visible = True Then hostnameerror.Hide

  Else

    If InStr(hname, " ") = 0

      Wait 0.3

      If hname = hostname.Text

        chname = Trim(File.Load("/etc/hostname"))

        wproc = Exec ["hostname", hname]
        wprocwait

        If wproc.Value = 0

          Exec ["hostname", chname]

          If hname = hostname.Text

            If hostnameerror.Visible = True Then hostnameerror.Hide
            hostnamepipe.Show

          Endif

        Else If hname = hostname.Text And hostnameerror.Visible = False

          hostnameerror.Show

        Endif

      Endif

    Else If hostnameerror.Visible = False

      hostnameerror.Show

    Endif

  Endif

End

Public Sub homepage1_MouseDown()

  If Mouse.Left = True Then homepage1.Foreground = Color.SelectedBackground

End

Public Sub homepage1_MouseUp()

  Dim ofile As File
  Dim cline, usr As String

  If Mouse.Left = True And homepage1.Foreground = Color.SelectedBackground

    ofile = Open "/etc/passwd" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If InStr(cline, ":x:1000:10") <> 0 Or InStr(cline, ":x:1001:10") <> 0 Or InStr(cline, ":x:1002:10") <> 0 Or InStr(cline, ":x:1003:10") <> 0 Or InStr(cline, ":x:1004:10") <> 0 Or InStr(cline, ":x:1005:10") <> 0 Or InStr(cline, ":x:1006:10") <> 0 Or InStr(cline, ":x:1007:10") <> 0 Or InStr(cline, ":x:1008:10") <> 0 Or InStr(cline, ":x:1009:10") <> 0 Or InStr(cline, ":x:1010:10") <> 0 Or InStr(cline, ":x:1011:10") <> 0 Or InStr(cline, ":x:1012:10") <> 0 Or InStr(cline, ":x:1013:10") <> 0 Or InStr(cline, ":x:1014:10") <> 0 Or InStr(cline, ":x:1015:10") <> 0

        usr = Left(cline, InStr(cline, ":") - 1)
        Break

      Endif

    Wend
    Close #ofile

    Exec ["sudo", "-iu", usr, "xdg-open", "https://sourceforge.net/projects/systemback"]
    homepage1.Foreground = Color.Default

  Endif

End

Public Sub homepage1_MouseMove()

  If Mouse.Left = True

    With homepage1

      If Mouse.Inside(homepage1) = True

        If .Foreground = Color.Default Then .Foreground = Color.SelectedBackground

      Else If .Foreground = Color.SelectedBackground

        .Foreground = Color.Default

      Endif

    End With

  Endif

End

Public Sub homepage2_MouseDown()

  If Mouse.Left = True Then homepage2.Foreground = Color.SelectedBackground

End

Public Sub homepage2_MouseUp()

  Dim ofile As File
  Dim cline, usr As String

  If Mouse.Left = True And homepage2.Foreground = Color.SelectedBackground

    ofile = Open "/etc/passwd" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If InStr(cline, ":x:1000:10") <> 0 Or InStr(cline, ":x:1001:10") <> 0 Or InStr(cline, ":x:1002:10") <> 0 Or InStr(cline, ":x:1003:10") <> 0 Or InStr(cline, ":x:1004:10") <> 0 Or InStr(cline, ":x:1005:10") <> 0 Or InStr(cline, ":x:1006:10") <> 0 Or InStr(cline, ":x:1007:10") <> 0 Or InStr(cline, ":x:1008:10") <> 0 Or InStr(cline, ":x:1009:10") <> 0 Or InStr(cline, ":x:1010:10") <> 0 Or InStr(cline, ":x:1011:10") <> 0 Or InStr(cline, ":x:1012:10") <> 0 Or InStr(cline, ":x:1013:10") <> 0 Or InStr(cline, ":x:1014:10") <> 0 Or InStr(cline, ":x:1015:10") <> 0

        usr = Left(cline, InStr(cline, ":") - 1)
        Break

      Endif

    Wend
    Close #ofile

    Exec ["sudo", "-iu", usr, "xdg-open", "https://launchpad.net/systemback"]
    homepage2.Foreground = Color.Default

  Endif

End

Public Sub homepage2_MouseMove()

  If Mouse.Left = True

    With homepage2

      If Mouse.Inside(homepage2) = True

        If .Foreground = Color.Default Then .Foreground = Color.SelectedBackground

      Else If .Foreground = Color.SelectedBackground

        .Foreground = Color.Default

      Endif

    End With

  Endif

End

Public Sub email_MouseDown()

  If Mouse.Left = True Then email.Foreground = Color.SelectedBackground

End

Public Sub email_MouseUp()

  Dim ofile As File
  Dim cline, usr As String

  If Mouse.Left = True And email.Foreground = Color.SelectedBackground

    ofile = Open "/etc/passwd" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If InStr(cline, ":x:1000:10") <> 0 Or InStr(cline, ":x:1001:10") <> 0 Or InStr(cline, ":x:1002:10") <> 0 Or InStr(cline, ":x:1003:10") <> 0 Or InStr(cline, ":x:1004:10") <> 0 Or InStr(cline, ":x:1005:10") <> 0 Or InStr(cline, ":x:1006:10") <> 0 Or InStr(cline, ":x:1007:10") <> 0 Or InStr(cline, ":x:1008:10") <> 0 Or InStr(cline, ":x:1009:10") <> 0 Or InStr(cline, ":x:1010:10") <> 0 Or InStr(cline, ":x:1011:10") <> 0 Or InStr(cline, ":x:1012:10") <> 0 Or InStr(cline, ":x:1013:10") <> 0 Or InStr(cline, ":x:1014:10") <> 0 Or InStr(cline, ":x:1015:10") <> 0

        usr = Left(cline, InStr(cline, ":") - 1)
        Break

      Endif

    Wend
    Close #ofile

    Exec ["sudo", "-iu", usr, "xdg-email", "nemh@freemail.hu"]
    email.Foreground = Color.Default

  Endif

End

Public Sub email_MouseMove()

  If Mouse.Left = True

    With email

      If Mouse.Inside(email) = True

        If .Foreground = Color.Default Then .Foreground = Color.SelectedBackground

      Else If .Foreground = Color.SelectedBackground

        .Foreground = Color.Default

      Endif

    End With

  Endif

End

Public Sub donate_MouseDown()

  If Mouse.Left = True Then donate.Foreground = Color.SelectedBackground

End

Public Sub donate_MouseUp()

  Dim ofile As File
  Dim cline, usr As String

  If Mouse.Left = True And donate.Foreground = Color.SelectedBackground

    ofile = Open "/etc/passwd" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If InStr(cline, ":x:1000:10") <> 0 Or InStr(cline, ":x:1001:10") <> 0 Or InStr(cline, ":x:1002:10") <> 0 Or InStr(cline, ":x:1003:10") <> 0 Or InStr(cline, ":x:1004:10") <> 0 Or InStr(cline, ":x:1005:10") <> 0 Or InStr(cline, ":x:1006:10") <> 0 Or InStr(cline, ":x:1007:10") <> 0 Or InStr(cline, ":x:1008:10") <> 0 Or InStr(cline, ":x:1009:10") <> 0 Or InStr(cline, ":x:1010:10") <> 0 Or InStr(cline, ":x:1011:10") <> 0 Or InStr(cline, ":x:1012:10") <> 0 Or InStr(cline, ":x:1013:10") <> 0 Or InStr(cline, ":x:1014:10") <> 0 Or InStr(cline, ":x:1015:10") <> 0

        usr = Left(cline, InStr(cline, ":") - 1)
        Break

      Endif

    Wend
    Close #ofile

    Exec ["sudo", "-iu", usr, "xdg-open", "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=ZQ668BBR7UCEQ"]
    donate.Foreground = Color.Default

  Endif

End

Public Sub donate_MouseMove()

  If Mouse.Left = True

    With donate

      If Mouse.Inside(donate) = True

        If .Foreground = Color.Default Then .Foreground = Color.SelectedBackground

      Else If .Foreground = Color.SelectedBackground

        .Foreground = Color.Default

      Endif

    End With

  Endif

End

Public Sub livecreatenew_Click()

  Dim rproc As Process
  Dim ofile As File
  Dim cline, ckernel, lvtype, lvusr, did, fname, item, ifname, usr, ldest, ide, elist, delist, grxorg, srxorg As String
  Dim rpart As String = " "
  Dim ncount As Integer
  Dim dcopy As Boolean

  statusstart

  prun = ("Creating Live system")
  If dialog = 29 Then dialog = 0

  Exec ["uname", "-r"] To ckernel
  ckernel = Trim(ckernel)

  If Exist(lwdir & "/.sblivesystemcreate")

    If prun = Null Then Return
    wproc = Exec ["rm", "-rf", lwdir & "/.sblivesystemcreate"]
    wprocwait
    If prun = Null Then Return

  Endif

  Mkdir lwdir & "/.sblivesystemcreate"
  If Exist("/usr/share/initramfs-tools/scripts/casper") Then lvtype = "casper" Else lvtype = "live"
  Mkdir lwdir & "/.sblivesystemcreate/.disk"
  Mkdir lwdir & "/.sblivesystemcreate/" & lvtype
  Mkdir lwdir & "/.sblivesystemcreate/syslinux"

  If livename.Text = "auto" Then ifname = "systemback_live_" & Year(Now) & "-" & Right("0" & Month(Now), 2) & "-" & Right("0" & Day(Now), 2) Else ifname = livename.Text

  While Exist(lwdir & "/" & ifname & ".sblive")

    ncount = ncount + 1
    If ncount = 1 Then ifname &= "_1" Else ifname = Left(ifname, RInStr(ifname, "_") - 1) & "_" & ncount

  Wend

  If System.Architecture = "x86" Then File.Save(lwdir & "/.sblivesystemcreate/.disk/info", "Systemback Live (" & ifname & ") - Release i386\n") Else File.Save(lwdir & "/.sblivesystemcreate/.disk/info", "Systemback Live (" & ifname & ") - Release amd64\n")

  Copy "/boot/vmlinuz-" & ckernel To lwdir & "/.sblivesystemcreate/" & lvtype & "/vmlinuz"

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If InStr(cline, ":x:1000:10") <> 0 Or InStr(cline, ":x:1001:10") <> 0 Or InStr(cline, ":x:1002:10") <> 0 Or InStr(cline, ":x:1003:10") <> 0 Or InStr(cline, ":x:1004:10") <> 0 Or InStr(cline, ":x:1005:10") <> 0 Or InStr(cline, ":x:1006:10") <> 0 Or InStr(cline, ":x:1007:10") <> 0 Or InStr(cline, ":x:1008:10") <> 0 Or InStr(cline, ":x:1009:10") <> 0 Or InStr(cline, ":x:1010:10") <> 0 Or InStr(cline, ":x:1011:10") <> 0 Or InStr(cline, ":x:1012:10") <> 0 Or InStr(cline, ":x:1013:10") <> 0 Or InStr(cline, ":x:1014:10") <> 0 Or InStr(cline, ":x:1015:10") <> 0

      lvusr = Left(cline, InStr(cline, ":") - 1)
      fname = Right(cline, - InStr(cline, ":"))
      fname = Right(fname, - InStr(fname, ":"))
      fname = Right(fname, - InStr(fname, ":"))
      fname = Right(fname, - InStr(fname, ":"))
      fname = Left(fname, InStr(fname, ",") - 1)

      Break

    Endif

  Wend
  Close #ofile

  If lvtype = "casper"

    ofile = Open "/etc/lsb-release" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If InStr(cline, "DISTRIB_ID=") = 1

        did = Right(cline, - InStr(cline, "="))
        Break

      Endif

    Wend
    Close #ofile

    If did = Null Then did = "Ubuntu"

    File.Save("/etc/casper.conf", "USERNAME=\"" & lvusr & "\"\nUSERFULLNAME=\"" & fname & "\"\nHOST=\"" & Trim(File.Load("/etc/hostname")) & "\"\nBUILD_SYSTEM=\"" & did & "\"\n\nexport USERNAME USERFULLNAME HOST BUILD_SYSTEM\n")

    For Each item In Dir("/usr/share/initramfs-tools/scripts/casper-bottom", "[^.]*", gb.File)

      If Right(item, -2) <> "integrity_check" And Right(item, -2) <> "mountpoints" And Right(item, -2) <> "fstab" And Right(item, -2) <> "swap" And Right(item, -2) <> "xconfig" And Right(item, -2) <> "networking" And Right(item, -2) <> "preseed" And Right(item, -2) <> "disable_update_notifier" And Right(item, -2) <> "disable_hibernation" And Right(item, -2) <> "disable_kde_services" And Right(item, -2) <> "fix_language_selector" And Right(item, -2) <> "disable_trackerd" And Right(item, -2) <> "disable_updateinitramfs" And Right(item, -2) <> "kubuntu_disable_restart_notifications" And Right(item, -2) <> "kubuntu_mobile_session" Then Chmod "/usr/share/initramfs-tools/scripts/casper-bottom/" & item To "rw-r--r--"

    Next

    For Each item In Dir("/usr/share/initramfs-tools/scripts/casper-bottom", "[^.]*", gb.File)

      If Right(item, -2) <> "integrity_check" And Right(item, -2) <> "mountpoints" And Right(item, -2) <> "fstab" And Right(item, -2) <> "swap" And Right(item, -2) <> "xconfig" And Right(item, -2) <> "networking" And Right(item, -2) <> "preseed" And Right(item, -2) <> "disable_update_notifier" And Right(item, -2) <> "disable_hibernation" And Right(item, -2) <> "disable_kde_services" And Right(item, -2) <> "fix_language_selector" And Right(item, -2) <> "disable_trackerd" And Right(item, -2) <> "disable_updateinitramfs" And Right(item, -2) <> "kubuntu_disable_restart_notifications" And Right(item, -2) <> "kubuntu_mobile_session" Then Chmod "/usr/share/initramfs-tools/scripts/casper-bottom/" & item To "rw-r--r--"

    Next

  Else

    Try Chmod "/usr/share/initramfs-tools/scripts/live-bottom/30accessibility" To "rw-r--r--"

    If Error

      Try File.Save("/usr/share/initramfs-tools/scripts/init-bottom/sbfstab", "#!/bin/sh\nif [ \"${BOOT}\" = \"live\" -a ! -e \"/root/etc/fstab\" ]\nthen touch /root/etc/fstab\nfi\n")
      If Not Error Then Chmod "/usr/share/initramfs-tools/scripts/init-bottom/sbfstab" To "rwxr-xr-x"

    Endif

  Endif

  If Exist("/etc/X11/xorg.conf")

    Try File.Save("/usr/share/initramfs-tools/scripts/init-bottom/sbnoxconf", "#!/bin/sh\nif [ \"$(grep noxconf /proc/cmdline)\" -a -s \"/root/etc/X11/xorg.conf\" ]\nthen rm -rf \"/root/etc/X11/xorg.conf\"\nfi\n")
    If Not Error Then Chmod "/usr/share/initramfs-tools/scripts/init-bottom/sbnoxconf" To "rwxr-xr-x"

    grxorg = "menuentry \"" & ("Boot Live without xorg.conf file") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & " noxconf quiet splash\n  initrd /" & lvtype & "/initrd.gz\n}\n\n"
    srxorg = "label noxconf\n  menu label " & ("Boot Live without xorg.conf file") & "\n  kernel /" & lvtype & "/vmlinuz\n  append" & rpart & "boot=" & lvtype & " initrd=/" & lvtype & "/initrd.gz noxconf quiet splash\n\n"

  Endif

  If prun = Null Then Return
  wproc = Exec ["update-initramfs", "-tck", ckernel]
  wprocwait
  If prun = Null Then Return

  If lvtype = "casper"

    For Each item In Dir("/usr/share/initramfs-tools/scripts/casper-bottom", "[^.]*", gb.File)

      If Right(item, -2) <> "integrity_check" And Right(item, -2) <> "mountpoints" And Right(item, -2) <> "fstab" And Right(item, -2) <> "swap" And Right(item, -2) <> "xconfig" And Right(item, -2) <> "networking" And Right(item, -2) <> "preseed" And Right(item, -2) <> "disable_update_notifier" And Right(item, -2) <> "disable_hibernation" And Right(item, -2) <> "disable_kde_services" And Right(item, -2) <> "fix_language_selector" And Right(item, -2) <> "disable_trackerd" And Right(item, -2) <> "disable_updateinitramfs" And Right(item, -2) <> "kubuntu_disable_restart_notifications" And Right(item, -2) <> "kubuntu_mobile_session" Then Chmod "/usr/share/initramfs-tools/scripts/casper-bottom/" & item To "rwxr-xr-x"

    Next

  Else

    Try Chmod "/usr/share/initramfs-tools/scripts/live-bottom/30accessibility" To "rwxr-xr-x"
    If Error Then Try Kill "/usr/share/initramfs-tools/scripts/init-bottom/sbfstab"

  Endif

  Try Kill "/usr/share/initramfs-tools/scripts/init-bottom/sbnoxconf"
  Copy "/boot/initrd.img-" & ckernel To lwdir & "/.sblivesystemcreate/" & lvtype & "/initrd.gz"
  Copy "/usr/lib/syslinux/isolinux.bin" To lwdir & "/.sblivesystemcreate/syslinux/isolinux.bin"
  Copy "/usr/lib/syslinux/vesamenu.c32" To lwdir & "/.sblivesystemcreate/syslinux/vesamenu.c32"
  Copy "/usr/share/systemback/splash.png" To lwdir & "/.sblivesystemcreate/syslinux/splash.png"
  Try Mkdir "/media/" & btmp
  Try Mkdir "/media/" & btmp & "/media"

  If Exist("/etc/fstab")

    For Each item In Dir("/media", "[^.]*", gb.Directory)

      ofile = Open "/etc/fstab" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If InStr(cline, "/media/" & item) <> 0

          If prun = Null Then Return
          wproc = Exec ["bash", "-c", "sbsync -rlptgox --delete /media/ /media/" & btmp & "/media --include=/" & item & " --exclude=/* --include=*/ --exclude=*"]
          wprocwait
          If prun = Null Then Return

        Endif

      Wend
      Close #ofile

    Next

  Endif

  If Exist("/var/" & btmp)

    If prun = Null Then Return
    wproc = Exec ["rm", "-rf", "/var/" & btmp]
    wprocwait
    If prun = Null Then Return

  Endif

  Try Mkdir "/var/" & btmp

  If prun = Null Then Return
  wproc = Exec ["bash", "-c", "sbsync -rlptgo --delete / /" & btmp & " --include={/cdrom,/dev,/mnt,/proc,/run,/srv,/sys,/tmp} --exclude=* ; sbsync -rlptgo --delete --link-dest=../../ /var/ /var/" & btmp & "/var --exclude={" & btmp & ",/lib/ureadahead/*,/log/*,/tmp/*,/cache/apt/*.bin,/cache/apt/*.bin.*,/cache/apt/archives/*.deb,/run/*,/lib/udisks/mtab,/lost+found,*.dpkg-old,*~}"]
  wprocwait
  If prun = Null Then Return

  For Each item In RDir("/var/log", "[^.]*")

    With Stat("/var/log/" & item)

      If .Type = gb.Directory

        Try Mkdir "/var/" & btmp & "/var/log/" & item

      Else If .Type = gb.File And Right(item, 2) <> ".0" And Right(item, 2) <> ".1" And Right(item, 3) <> ".gz" And Right(item, 4) <> ".old"

        Try File.Save("/var/" & btmp & "/var/log/" & item, Null)

      Endif

      Try Chmod "/var/" & btmp & "/var/log/" & item To .Auth
      Try Chown "/var/" & btmp & "/var/log/" & item To .User
      Try Chgrp "/var/" & btmp & "/var/log/" & item To .Group

    End With

  Next

  For Each item In ["/bin", "/boot", "/etc", "/lib", "/lib32", "/lib64", "/opt", "/sbin", "/selinux", "/usr", "/initrd.img", "/initrd.img.old", "/vmlinuz", "/vmlinuz.old"]

    If Exist(item) Then ide &= " " & item

  Next

  If prun = Null Then Return
  wproc = Exec ["bash", "-c", "mksquashfs " & ide & " /" & btmp & "/* /media/" & btmp & "/media /var/" & btmp & "/var " & lwdir & "/.sblivesystemcreate/" & lvtype & "/filesystem.squashfs -b 1M -no-duplicates -no-recovery -always-use-fragments -e {/etc/fstab,/etc/mtab,/etc/udev/rules.d/70-persistent-cd.rules,/etc/udev/rules.d/70-persistent-net.rules}"]

  While wproc.State = Process.Running

    If Dfree(lwdir) < 104857600

      wproc.Kill
      dialog = 29

    Endif

    Wait 0.5

  Wend

  If prun = Null Then Return

  rproc = Exec ["rm", "-rf", "/" & btmp, "/media/" & btmp, "/var/" & btmp]

  While rproc.State = Process.Running

    Wait 0.1

  Wend

  If dialog <> 29

    If wproc.Value = 0

      Mkdir lwdir & "/.sblivesystemcreate/mount"

      If prun = Null Then Return
      wproc = Exec ["mount", "-o", "loop", lwdir & "/.sblivesystemcreate/" & lvtype & "/filesystem.squashfs", lwdir & "/.sblivesystemcreate/mount"]
      wprocwait
      If prun = Null Then Return
      wproc = Exec ["bash", "-c", "sbsync -rlptgo --list-only " & lwdir & "/.sblivesystemcreate/mount | wc -l >" & lwdir & "/.sblivesystemcreate/.pointsize"]
      wprocwait
      If prun = Null Then Return
      wproc = Exec ["umount", "-l", lwdir & "/.sblivesystemcreate/mount"]
      wprocwait
      If prun = Null Then Return

      Rmdir lwdir & "/.sblivesystemcreate/mount"
      Mkdir lwdir & "/.sblivesystemcreate/.systemback"
      Mkdir lwdir & "/.sblivesystemcreate/.systemback/etc"
      Mkdir lwdir & "/.sblivesystemcreate/.systemback/etc/udev"
      Mkdir lwdir & "/.sblivesystemcreate/.systemback/etc/udev/rules.d"
      Try Copy "/etc/udev/rules.d/70-persistent-cd.rules" To lwdir & "/.sblivesystemcreate/.systemback/etc/udev/rules.d/70-persistent-cd.rules"
      Try Copy "/etc/udev/rules.d/70-persistent-net.rules" To lwdir & "/.sblivesystemcreate/.systemback/etc/udev/rules.d/70-persistent-net.rules"
      Try Copy "/etc/fstab" To lwdir & "/.sblivesystemcreate/.systemback/etc/fstab"
      Copy "/etc/systemback.excludes" To lwdir & "/.sblivesystemcreate/.excludes"

      ide = lwdir & "/.sblivesystemcreate/.systemback " & lwdir & "/.sblivesystemcreate/.pointsize " & lwdir & "/.sblivesystemcreate/.excludes"

      If userdatainclude.Value = False

        If Dfree("/home") > 104857600 And Dfree("/root") > 104857600

          ofile = Open "/etc/passwd" For Read
          While Not Eof(ofile)
            Line Input #ofile, cline

            If InStr(cline, ":/home/") <> 0

              usr = Left(cline, InStr(cline, ":") - 1)

              If IsDir("/home/" & usr)

                If Dfree("/home/" & usr) <> Dfree("/home")

                  dcopy = True
                  Return

                Endif

              Endif

            Endif

          Wend
          Close #ofile

        Else

          dcopy = True

        Endif

      Endif

      If userdatainclude.Value = True Or dcopy = False

        If Exist("/home/" & btmp)

          If prun = Null Then Return
          wproc = Exec ["rm", "-rf", "/home/" & btmp]
          wprocwait
          If prun = Null Then Return

        Endif

        Try Mkdir "/home/" & btmp
        Try Mkdir "/home/" & btmp & "/home"

        If Exist("/root/" & btmp)

          If prun = Null Then Return
          wproc = Exec ["rm", "-rf", "/root/" & btmp]
          wprocwait
          If prun = Null Then Return

        Endif

        Try Mkdir "/root/" & btmp
        ide &= " /home/" & btmp & "/* /root/" & btmp & "/root"

      Else

        Mkdir lwdir & "/.sblivesystemcreate/usersettings"
        Mkdir lwdir & "/.sblivesystemcreate/usersettings/home"
        ide &= " " & lwdir & "/.sblivesystemcreate/usersettings/*"

      Endif

      elist = "/" & btmp & ",/.gvfs,/.cache/gvfs,/.local/share/Trash/files/*,/.local/share/Trash/info/*,/.Xauthority,*~"

      ofile = Open "/etc/systemback.excludes" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If Left(cline, 1) = "."

          elist &= ",'/" & cline & "'"

        Else If delist = Null

          delist = "'/" & cline & "'"

        Else

          delist &= ",'/" & cline & "'"

        Endif

      Wend
      Close #ofile

      ofile = Open "/etc/passwd" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If InStr(cline, ":/home/") <> 0

          usr = Left(cline, InStr(cline, ":") - 1)

          If IsDir("/home/" & usr)

            If prun = Null Then Return

            If userdatainclude.Value = False

              If dcopy = True

                If Dfree("/home/" & usr) = Dfree(lwdir)

                  ldest = "--link-dest=/home/" & usr

                Else If ldest <> Null

                  ldest = Null

                Endif

                wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB " & ldest & " /home/" & usr & "/ " & lwdir & "/.sblivesystemcreate/usersettings/home/" & usr & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgox /home/" & usr & "/ " & lwdir & "/.sblivesystemcreate/usersettings/home/" & usr & " --exclude={" & delist & "} --include=*/ --exclude=*"]

              Else

                wproc = Exec ["bash", "-c", "sbsync -rlptgox --max-size=8MB --link-dest=/home/" & usr & " /home/" & usr & "/ /home/" & btmp & "/home/" & usr & " --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgox --link-dest=/home/" & usr & " /home/" & usr & "/ /home/" & btmp & "/home/" & usr & " --exclude={" & delist & "} --include=*/ --exclude=*"]

              Endif

            Else

              wproc = Exec ["bash", "-c", "sbsync -rlptgox --link-dest=/home/" & usr & " /home/" & usr & "/ /home/" & btmp & "/home/" & usr & " --exclude={" & elist & "," & delist & "}"]

            Endif

            wprocwait

          Endif

        Endif

      Wend
      Close #ofile

      If prun = Null Then Return

      If userdatainclude.Value = False

        If dcopy = True

          If Dfree("/root") = Dfree(lwdir)

            ldest = "--link-dest=/root"

          Else If ldest <> Null

            ldest = Null

          Endif

          wproc = Exec ["bash", "-c", "sbsync -rlptgo --max-size=8MB " & ldest & " /root/ " & lwdir & "/.sblivesystemcreate/usersettings/root --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgox /root/ " & lwdir & "/.sblivesystemcreate/usersettings/root --exclude={" & delist & "} --include=*/ --exclude=*"]

        Else

          wproc = Exec ["bash", "-c", "sbsync -rlptgox --max-size=8MB --link-dest=/root /root/ /root/" & btmp & "/root --exclude={" & elist & "} --include=/.* --exclude=/* ; sbsync -rlptgox --link-dest=/root /root/ /root/" & btmp & "/root --exclude={" & delist & "} --include=*/ --exclude=*"]

        Endif

      Else

        wproc = Exec ["bash", "-c", "sbsync -rlptgox --link-dest=/root /root/ /root/" & btmp & "/root --exclude={" & elist & "," & delist & "}"]

      Endif

      wprocwait
      If prun = Null Then Return
      wproc = Exec ["bash", "-c", "mksquashfs " & ide & " " & lwdir & "/.sblivesystemcreate/" & lvtype & "/filesystem.squashfs -b 1M -no-duplicates -no-recovery -always-use-fragments"]

      While wproc.State = Process.Running

        If Dfree(lwdir) < 104857600

          wproc.Kill
          dialog = 29

        Endif

        Wait 0.5

      Wend

      If prun = Null Then Return

      If Exist("/home/" & btmp)

        rproc = Exec ["rm", "-rf", "/home/" & btmp, "/root/" & btmp]

        While rproc.State = Process.Running

          Wait 0.1

        Wend

        If prun = Null Then Return

      Endif

      If dialog <> 29

        If wproc.Value = 0

          If Stat(lwdir & "/.sblivesystemcreate/" & lvtype & "/filesystem.squashfs").Size > 4294967295 Then rpart = " root=LABEL=sbroot "

          If System.Architecture = "x86_64"

            wproc = Exec ["tar", "-xzf", "/usr/share/systemback/efi.tar.gz", "-C", lwdir & "/.sblivesystemcreate"]
            wprocwait
            If prun = Null Then Return

            Copy "/usr/share/systemback/splash.png" To lwdir & "/.sblivesystemcreate/boot/grub/splash.png"
            File.Save(lwdir & "/.sblivesystemcreate/boot/grub/grub.cfg", "if loadfont /boot/grub/font.pf2\nthen\n  set gfxmode=auto\n  insmod efi_gop\n  insmod efi_uga\n  insmod gfxterm\n  terminal_output gfxterm\nfi\n\nset theme=/boot/grub/theme.cfg\n\nmenuentry \"" & ("Boot Live system") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & " quiet splash\n  initrd /" & lvtype & "/initrd.gz\n}\n\nmenuentry \"" & ("Boot Live in safe graphics mode") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & " xforcevesa nomodeset quiet splash\n  initrd /" & lvtype & "/initrd.gz\n}\n\n" & grxorg & "menuentry \"" & ("Boot Live in debug mode") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & "\n  initrd /" & lvtype & "/initrd.gz\n}\n")
            File.Save(lwdir & "/.sblivesystemcreate/boot/grub/theme.cfg", "title-color: \"white\"\ntitle-text: \"Systemback Live (" & ifname & ")\"\ntitle-font: \"Sans Regular 16\"\ndesktop-color: \"black\"\ndesktop-image: \"/boot/grub/splash.png\"\nmessage-color: \"white\"\nmessage-bg-color: \"black\"\nterminal-font: \"Sans Regular 12\"\n\n+ boot_menu {\n  top = 150\n  left = 15%\n  width = 75%\n  height = 130\n  item_font = \"Sans Regular 12\"\n  item_color = \"grey\"\n  selected_item_color = \"white\"\n  item_height = 20\n  item_padding = 15\n  item_spacing = 5\n}\n\n+ vbox {\n  top = 100%\n  left = 2%\n  + label {text = \"" & ("Press 'E' key to edit") & "\" font = \"Sans 10\" color = \"white\" align = \"left\"}\n}\n")
            File.Save(lwdir & "/.sblivesystemcreate/boot/grub/loopback.cfg", "menuentry \"" & ("Boot Live system") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & " quiet splash\n  initrd /" & lvtype & "/initrd.gz\n}\n\nmenuentry \"" & ("Boot Live in safe graphics mode") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & " xforcevesa nomodeset quiet splash\n  initrd /" & lvtype & "/initrd.gz\n}\n\n" & grxorg & "menuentry \"" & ("Boot Live in debug mode") & "\" {\n  set gfxpayload=keep\n  linux /" & lvtype & "/vmlinuz" & rpart & "boot=" & lvtype & "\n  initrd /" & lvtype & "/initrd.gz\n}\n")

          Endif

          File.Save(lwdir & "/.sblivesystemcreate/syslinux/syslinux.cfg", "default vesamenu.c32\nprompt 0\ntimeout 100\n\nmenu title Systemback Live (" & ifname & ")\nmenu tabmsg " & ("Press TAB key to edit") & "\nmenu background splash.png\n\nlabel live\n  menu label " & ("Boot Live system") & "\n  kernel /" & lvtype & "/vmlinuz\n  append" & rpart & "boot=" & lvtype & " initrd=/" & lvtype & "/initrd.gz quiet splash\n\nlabel safe\n  menu label " & ("Boot Live in safe graphics mode") & "\n  kernel /" & lvtype & "/vmlinuz\n  append" & rpart & "boot=" & lvtype & " initrd=/" & lvtype & "/initrd.gz xforcevesa nomodeset quiet splash\n\n" & srxorg & "label debug\n  menu label " & ("Boot Live in debug mode") & "\n  kernel /" & lvtype & "/vmlinuz\n  append" & rpart & "boot=" & lvtype & " initrd=/" & lvtype & "/initrd.gz\n")

          If prun = Null Then Return
          wproc = Exec ["rm", "-rf", lwdir & "/.sblivesystemcreate/.systemback"]
          wprocwait
          If prun = Null Then Return

          Kill lwdir & "/.sblivesystemcreate/.excludes"
          Kill lwdir & "/.sblivesystemcreate/.pointsize"

          If Exist(lwdir & "/.sblivesystemcreate/usersettings")

            If prun = Null Then Return
            wproc = Exec ["rm", "-rf", lwdir & "/.sblivesystemcreate/usersettings"]
            wprocwait

          Endif

          If prun = Null Then Return
          wproc = Exec ["tar", "-cf", lwdir & "/" & ifname & ".sblive", "-C", lwdir & "/.sblivesystemcreate", "."]
          wprocwait
          If prun = Null Then Return

          If wproc.Value = 0

            Chmod lwdir & "/" & ifname & ".sblive" To "rw-rw-rw-"

            prun = ("Emptying cache")
            wproc = Exec ["sync"]
            wprocwait
            File.Save("/proc/sys/vm/drop_caches", "3")

            livecreatemenu_Click

            dialog = 28

          Else

            If Exist(lwdir & "/" & ifname & ".sblive") Then Kill lwdir & "/" & ifname & ".sblive"

            dialog = 27

          Endif

        Else

          dialog = 26

        Endif

      Endif

    Else

      dialog = 26

    Endif

  Endif

  Exec ["rm", "-rf", lwdir & "/.sblivesystemcreate"]

  dialogopen

End

Public Sub livedevicesupdate_Click()

  Dim item, dev, name As String

  Inc Application.Busy

  With livedevices

    If .Count <> 0 Then .Clear
    .Sorted = True

    For Each item In Dir("/dev/disk/by-id", "usb-*", gb.Link)

      dev = Stat("/dev/disk/by-id/" & item).Link
      dev = "/dev/" & Right(dev, - RInStr(dev, "/"))

      If Len(dev) = 8

        .Add(dev, dev)
        name = Right(item, -4)
        name = Left(name, RInStr(name, "_"))
        .Item[1] = Replace(name, "_", " ")
        .Item[2] = "-"

      Endif

    Next

    .Sorted = False

  End With

  With livewritestart

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

  Dec Application.Busy

End

Public Sub livelist_Select()

  Dim isize As Long

  With livelist

    If .Enabled = True And .Text <> Null

      If Exist(lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".sblive")

        With livedelete

          If .Enabled = False

            .Enabled = True
            .Mouse = Mouse.Pointing

          Endif

        End With

        isize = Stat(lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".sblive").Size

        With liveconvert

          If isize > 0 And isize < 4294967295 And isize * 2 + 104857600 < Dfree(lwdir) And Not Exist(lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".iso")

            If .Enabled = False

              .Enabled = True
              .Mouse = Mouse.Pointing

            Endif

          Else If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

        With livewritestart

          If isize > 0 And livedevices.Key <> Null

            If .Enabled = False

              .Enabled = True
              .Mouse = Mouse.Pointing

            Endif

          Else If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

      Else

        .Remove(.Find(.Text))

      Endif

    Endif

  End With

End

Public Sub livedevices_Select()

  Dim sitem As String = livedevices.Key

  With livedevices

    If .Enabled = True And .Key <> Null

      livedevices[.Key][2] = "x"

      .MoveFirst

      While .Available

        If .Item[0] <> sitem And .Item[2] = "x" Then .Item[2] = "-"

        .MoveNext

      Wend

      With livewritestart

        If livelist.Text <> Null And .Enabled = False

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

    Endif

  End With

End

Public Sub pointexclude_Click()

  Dim ofile As File
  Dim cline, item, sitem, usr As String

  Inc Application.Busy

  With additem

    If .Enabled = True

      .Enabled = False
      .Mouse = Mouse.Default

    Else If removeitem.Enabled = True

      removeitem.Enabled = False
      removeitem.Mouse = Mouse.Default

    Endif

  End With

  If itemslist.Count <> 0 Then itemslist.Clear
  If excludedlist.Count <> 0 Then excludedlist.Clear

  If Exist("/etc/systemback.excludes")

    ofile = Open "/etc/systemback.excludes" For Read
    While Not Eof(ofile)
      Line Input #ofile, cline

      If Left(cline, 1) = "."

        If pointexclude.Value = True Then excludedlist.Add(cline)

      Else If liveexclude.Value = True

        excludedlist.Add(cline)

      Endif

    Wend
    Close #ofile

  Else

    File.Save("/etc/systemback.excludes", Null)

  Endif

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If InStr(cline, ":/home/") <> 0

      usr = Left(cline, InStr(cline, ":") - 1)

      If IsDir("/home/" & usr)

        For Each item In Dir("/home/" & usr)

          If Left(item, 1) = "." And pointexclude.Value = True Or If Left(item, 1) <> "." And liveexclude.Value = True

            If excludedlist.Find(item) = -1

              If itemslist.Exist(item) = False

                If Access("/home/" & usr & "/" & item, gb.Read) = True

                  If Stat("/home/" & usr & "/" & item).Type = gb.Directory

                    itemslist.Add(item, item, Picture["dir.png"])

                    For Each sitem In Dir("/home/" & usr & "/" & item)

                      If excludedlist.Find(item & "/" & sitem) = -1 Then itemslist.Add(item & "/" & sitem, sitem,, item)

                    Next

                  Else

                    itemslist.Add(item, item)

                  Endif

                Else

                  itemslist.Add(item, item)

                Endif

              Else If Access("/home/" & usr & "/" & item, gb.Read) = True

                If Stat("/home/" & usr & "/" & item).Type = gb.Directory

                  If itemslist[item].Picture = Null Then itemslist[item].Picture = Picture["dir.png"]

                  For Each sitem In Dir("/home/" & usr & "/" & item)

                    If excludedlist.Find(item & "/" & sitem) = -1 And itemslist.Exist(item & "/" & sitem) = False Then itemslist.Add(item & "/" & sitem, sitem,, item)

                  Next

                Endif

              Endif

            Endif

          Endif

        Next

      Endif

    Endif

  Wend
  Close #ofile

  For Each item In Dir("/root")

    If Left(item, 1) = "." And pointexclude.Value = True Or If Left(item, 1) <> "." And liveexclude.Value = True

      If excludedlist.Find(item) = -1

        If itemslist.Exist(item) = False

          If Stat("/root/" & item).Type = gb.Directory

            itemslist.Add(item, item, Picture["dir.png"])

            For Each sitem In Dir("/root/" & item)

              If excludedlist.Find(item & "/" & sitem) = -1 Then itemslist.Add(item & "/" & sitem, sitem,, item)

            Next

          Else

            itemslist.Add(item, item)

          Endif

        Else If Stat("/root/" & item).Type = gb.Directory

          If itemslist[item].Picture = Null Then itemslist[item].Picture = Picture["dir.png"]

          For Each sitem In Dir("/root/" & item)

            If excludedlist.Find(item & "/" & sitem) = -1 And itemslist.Exist(item & "/" & sitem) = False Then itemslist.Add(item & "/" & sitem, sitem,, item)

          Next

        Endif

      Endif

    Endif

  Next

  Dec Application.Busy

End

Public Sub liveexclude_Click()

  pointexclude_Click

End

Public Sub userdatainclude_Click()

  Dim ofile As File
  Dim cline, usr As String

  If userdatainclude.Value = True

    If Dfree("/home") > 104857600 And Dfree("/root") > 104857600

      ofile = Open "/etc/passwd" For Read
      While Not Eof(ofile)
        Line Input #ofile, cline

        If InStr(cline, ":/home/") <> 0

          usr = Left(cline, InStr(cline, ":") - 1)

          If IsDir("/home/" & usr)

            If Dfree("/home/" & usr) <> Dfree("/home")

              userdatainclude.Value = False
              Return

            Endif

          Endif

        Endif

      Wend
      Close #ofile

    Else

      userdatainclude.Value = False

    Endif

  Endif

End

Public Sub livewritestart_Click()

  dialog = 30
  dialogopen

End

Sub livewrite()

  Dim ofile As File
  Dim cline, dsize, lrdir, cperc As String
  Dim csize As Long = Stat(lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".sblive").Size
  Dim fsize As Long
  Dim stract As Byte

  statusstart

  prun = ("Writing Live image to USB device")

  progressbartimer.Start

  With livedevices

    If InStr(File.Load("/proc/self/mounts"), .Key) <> 0

      wproc = Exec ["bash", "-c", "umount -l " & .Key & "*"] For Read
      wprocwait
      If prun = Null Then Return
      wproc = Exec ["sync"]
      wprocwait
      If prun = Null Then Return

    Endif

    Exec ["blockdev", "--getsize64", .Key] To dsize

    If dsize <> Null

      If csize < 4294967295

        lrdir = "sblive"

        While prun <> Null And stract <= 1

          wproc = Exec ["bash", "-c", "parted -s " & .Key & " mklabel msdos && parted -s " & .Key & " mkpart primary 1 " & Round(Trim(dsize) / 1000000 - stract) & " && mkfs.vfat -F 32 -n \"sblive\" " & .Key & "1"]
          wprocwait
          If wproc.Value = 1 Then stract = stract + 1 Else stract = 2

        Wend

      Else

        lrdir = "sbroot"

        While prun <> Null And stract <= 1

          wproc = Exec ["bash", "-c", "parted -s " & .Key & " mklabel msdos && parted -s " & .Key & " mkpart primary 1 100 && parted -s " & .Key & " mkpart primary 100 " & Round(Trim(dsize) / 1000000 - stract) & " && mkfs.vfat -F 32 -n \"sblive\" " & .Key & "1 && mkfs.ext2 -L \"sbroot\" " & .Key & "2"]
          wprocwait
          If wproc.Value = 1 Then stract = stract + 1 Else stract = 2

        Wend

      Endif

      If prun = Null Then Return

      If wproc.Value = 0

        wproc = Exec ["dd", "if=/usr/lib/syslinux/mbr.bin", "of=" & .Key, "conv=notrunc", "bs=440", "count=1"]
        wprocwait
        wproc = Exec ["parted", "-s", .Key, "set", "1", "boot", "On"]
        wprocwait
        wproc = Exec ["parted", "-s", .Key, "set", "1", "lba", "On"]
        wprocwait

        Try Mkdir "/.sblivesystemwrite"

        If Error

          ofile = Open "/proc/self/mounts" For Input
          While Not Eof(ofile)
            Line Input #ofile, cline

            If prun = Null Then Return

            If InStr(cline, "/.sblivesystemwrite/sblive") <> 0

              wproc = Exec ["umount", "-l", "/.sblivesystemwrite/sblive"]
              wprocwait

            Else If InStr(cline, "/.sblivesystemwrite/sbroot") <> 0

              wproc = Exec ["umount", "-l", "/.sblivesystemwrite/sbroot"]
              wprocwait

            Endif

          Wend
          Close #ofile

        Endif

        If prun = Null Then Return

        Try Mkdir "/.sblivesystemwrite/sblive"

        If lrdir = "sbroot"

          Try Mkdir "/.sblivesystemwrite/sbroot"

          wproc = Exec ["mount", .Key & "1", "/.sblivesystemwrite/sblive"]
          wprocwait
          If prun = Null Then Return

          If wproc.Value = 0

            wproc = Exec ["mount", .Key & "2", "/.sblivesystemwrite/sbroot"]
            wprocwait

          Endif

        Else

          wproc = Exec ["mount", .Key & "1", "/.sblivesystemwrite/sblive"]
          wprocwait

        Endif

        If prun = Null Then Return

        If wproc.Value = 0

          If Dfree("/.sblivesystemwrite/" & lrdir) > csize + 52428800

            progressbartimer.Stop

            If prun = Null Then Return

            If lrdir = "sblive"

              wproc = Exec ["tar", "-xf", lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".sblive", "-C", "/.sblivesystemwrite/sblive", "--no-same-owner", "--no-same-permissions"]

            Else

              wproc = Exec ["bash", "-c", "tar -xf " & lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".sblive -C /.sblivesystemwrite/sblive --exclude={casper,live}/filesystem.squashfs && tar -xf " & lwdir & "/" & Left(livelist.Text, InStr(livelist.Text, " ") - 1) & ".sblive -C /.sblivesystemwrite/sbroot --exclude={.disk,boot,EFI,syslinux,casper/initrd.gz,casper/vmlinuz,live/initrd.gz,live/vmlinuz}"]

            Endif

            While wproc.State = Process.Running

              With progressbar

                If .Value <> 1 Or cperc = Null

                  If Exist("/.sblivesystemwrite/" & lrdir & "/casper/filesystem.squashfs")

                    fsize = Stat("/.sblivesystemwrite/" & lrdir & "/casper/filesystem.squashfs").Size

                  Else If Exist("/.sblivesystemwrite/" & lrdir & "/live/filesystem.squashfs")

                    fsize = Stat("/.sblivesystemwrite/" & lrdir & "/live/filesystem.squashfs").Size

                  Endif

                  cperc = Round(fsize / csize, -2)

                  If cperc < "0.01"

                    If .Value <> 0.01 Then .Value = 0.01

                  Else

                    If cperc <= "0.98" Then .Value = cperc Else .Value = 1

                  Endif

                  Wait 0.5

                Else

                  Wait 0.1

                Endif

              End With

            Wend

            If prun = Null Then Return

            prun = ("Emptying cache")

            If wproc.Value = 0

              wproc = Exec ["syslinux", "-if", .Key & "1"]
              wprocwait

              dialog = 44

            Else

              dialog = 43

            Endif

            wproc = Exec ["sync"]
            wprocwait

            File.Save("/proc/sys/vm/drop_caches", "3")

          Else

            dialog = 42

          Endif

          If prun = Null Then Return
          wproc = Exec ["umount", "-l", "/.sblivesystemwrite/sblive", "/.sblivesystemwrite/sbroot", "/.sblivesystemwrite"] For Read
          wprocwait
          If prun = Null Then Return

        Else

          File.Save(tmp & "mounterror", .Key & "1")
          dialog = 31

        Endif

        Try Rmdir "/.sblivesystemwrite/sblive"
        Try Rmdir "/.sblivesystemwrite/sbroot"
        Try Rmdir "/.sblivesystemwrite"

      Else

        File.Save(tmp & "formaterror", .Key & "1")
        dialog = 36

      Endif

    Else

      File.Save(tmp & "formaterror", .Key & "1")
      dialog = 36

    Endif

  End With

  dialogopen

End

Public Sub liveconvert_Click()

  statusstart

  prun = ("Converting Live system image")

  If Exist(lwdir & "/.sblivesystemconvert")

    If prun = Null Then Return
    wproc = Exec ["rm", "-rf", lwdir & "/.sblivesystemconvert"]
    wprocwait
    If prun = Null Then Return

  Endif

  Mkdir lwdir & "/.sblivesystemconvert"

  With livelist

    If prun = Null Then Return
    wproc = Exec ["tar", "-xf", lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".sblive", "-C", lwdir & "/.sblivesystemconvert", "--no-same-owner", "--no-same-permissions"]
    wprocwait
    If prun = Null Then Return

    If wproc.Value = 0

      Try Move lwdir & "/.sblivesystemconvert/syslinux/syslinux.cfg" To lwdir & "/.sblivesystemconvert/syslinux/isolinux.cfg"

      If Not Error

        Try Move lwdir & "/.sblivesystemconvert/syslinux" To lwdir & "/.sblivesystemconvert/isolinux"

        If Not Error

          If prun = Null Then Return
          wproc = Exec ["genisoimage", "-r", "-V", "sblive", "-cache-inodes", "-J", "-l", "-b", "isolinux/isolinux.bin", "-no-emul-boot", "-boot-load-size", "4", "-boot-info-table", "-o", lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".iso", lwdir & "/.sblivesystemconvert"]
          wprocwait

          If prun = Null

            Try Kill lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".iso"
            Return

          Endif

          If wproc.Value = 0

            If Exist("/usr/bin/isohybrid.pl")

              wproc = Exec ["isohybrid.pl", lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".iso"]
              wprocwait
              If prun = Null Then Return

            Endif

            Chmod lwdir & "/" & Left(.Text, InStr(.Text, " ") - 1) & ".iso" To "rw-rw-rw-"

          Else

            dialog = 46

          Endif

        Else

          dialog = 45

        Endif

      Else

        dialog = 45

      Endif

    Else

      dialog = 47

    Endif

  End With

  wproc = Exec ["rm", "-rf", lwdir & "/.sblivesystemconvert"]
  wprocwait
  If prun = Null Then Return

  If dialog <> 45 And dialog <> 46 And dialog <> 47

    prun = ("Emptying cache")
    wproc = Exec ["sync"]
    wprocwait
    File.Save("/proc/sys/vm/drop_caches", "3")

    If systembackgui.Closed = False

      With livelist

        .Current.Text = Left(.Text, InStr(.Text, " ")) & "(sblive+iso)"

      End With

      liveconvert.Enabled = False
      liveconvert.Mouse = Mouse.Default
      statuspanel.Hide
      mainpanel.Show
      livecreateback.SetFocus
      nwidth = 698
      nheight = 465
      windowmove

    Endif

  Else

    dialogopen

  Endif

End

Sub wprocwait()

  While wproc.State = Process.Running

    Wait 0.1

  Wend

End

Public Sub functionmenunext_Click()

  functionmenu1.Hide
  functionmenu2.Show
  functionmenunext.Enabled = False
  functionmenunext.Mouse = Mouse.Default

  With functionmenuback

    .Enabled = True
    .Mouse = Mouse.Pointing
    .SetFocus

  End With

End

Public Sub functionmenuback_Click()

  functionmenu2.Hide
  functionmenu1.Show
  functionmenuback.Enabled = False
  functionmenuback.Mouse = Mouse.Default

  With functionmenunext

    .Enabled = True
    .Mouse = Mouse.Pointing
    .SetFocus

  End With

End

Public Sub schedulerstate_Click()

  Inc Application.Busy

  If schedulerstate.Text = ("Enabled")

    stimer = "off"
    configfileupdate

    schedulerstate.Text = ("Disabled")

    With dayup

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With daydown

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With hourup

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With hourdown

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With minuteup

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With minutedown

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With secondup

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With seconddown

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    silentmode.Enabled = False
    silentmode.Mouse = Mouse.Default

    With windowposition

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

  Else

    If stimer <> "on"

      stimer = "on"
      configfileupdate
      If IsDir(fsdir) And Access(fsdir, gb.Write) = True Then File.Save(fsdir & "/.sbschedule", Null)

    Endif

    schedulerstate.Text = ("Enabled")

    If sdys <> 0

      daydown.Enabled = True
      daydown.Mouse = Mouse.Pointing

    Endif

    If sdys <> 7

      dayup.Enabled = True
      dayup.Mouse = Mouse.Pointing

    Endif

    If shrs <> 0

      hourdown.Enabled = True
      hourdown.Mouse = Mouse.Pointing

    Endif

    If shrs <> 23

      hourup.Enabled = True
      hourup.Mouse = Mouse.Pointing

    Endif

    If smts <> 0

      With minutedown

        If sdys <> 0 Or shrs <> 0

          .Enabled = True
          .Mouse = Mouse.Pointing

        Else If Val(smts) > 30

          .Enabled = True
          .Mouse = Mouse.Pointing

        Endif

      End With

    Endif

    If smts <> 59

      minuteup.Enabled = True
      minuteup.Mouse = Mouse.Pointing

    Endif

    silentmode.Enabled = True
    silentmode.Mouse = Mouse.Pointing

    If smode = "off"

      If ssds <> 10

        seconddown.Enabled = True
        seconddown.Mouse = Mouse.Pointing

      Endif

      If ssds <> 99

        secondup.Enabled = True
        secondup.Mouse = Mouse.Pointing

      Endif

      windowposition.Enabled = True
      windowposition.Mouse = Mouse.Pointing

    Endif

  Endif

  Dec Application.Busy

End

Public Sub schedulertimer_Timer()

  With schedulernumber

    If .Text = Null

      If ssds <> Null Then .Text = ssds & "s"

    Else If .Text = "1s"

      schedulerstart_Click

    Else

      ssds = ssds - 1
      .Text = ssds & "s"

    Endif

  End With

End

Public Sub schedulerlater_Click()

  If IsDir(fsdir) And Access(fsdir, gb.Write) = True Then File.Save(fsdir & "/.sbschedule", Null)
  systembackgui.Close

End

Public Sub schedulerstart_Click()

  schedulertimer.Stop
  function2.Text &= " " & ("scheduler")
  newrestorepoint_Click

End

Public Sub silentmode_Click()

  If silentmode.Value = False

    smode = "off"
    configfileupdate

    If ssds <> 10

      seconddown.Enabled = True
      seconddown.Mouse = Mouse.Pointing

    Endif

    If ssds <> 99

      secondup.Enabled = True
      secondup.Mouse = Mouse.Pointing

    Endif

    windowposition.Enabled = True
    windowposition.Mouse = Mouse.Pointing

  Else If smode = "off"

    smode = "on"
    configfileupdate

    With secondup

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    With seconddown

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

    windowposition.Enabled = False
    windowposition.Mouse = Mouse.Default

  Endif

End

Sub dayupset()

  sdys = sdys + 1
  schedulerday.Text = sdys & " " & ("day(s)")

  With daydown

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If sdys = 7

    dayup.Enabled = False
    dayup.Mouse = Mouse.Default

  Endif

  With minutedown

    If Val(smts) > 0 And .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

End

Public Sub dayup_MouseDown()

  If Mouse.Left = True

    With dayuptimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub dayup_MouseUp()

  If Mouse.Left = True

    dayuptimer.Stop
    If dayup.Enabled = True And Mouse.Inside(dayup) = True Then dayupset
    configfileupdate

  Endif

End

Public Sub dayuptimer_Timer()

  If dayuptimer.Delay <> 50 Then dayuptimer.Delay = 50
  If dayup.Enabled = True And Mouse.Inside(dayup) = True Then dayupset

End

Sub daydownset()

  sdys = sdys - 1
  schedulerday.Text = sdys & " " & ("day(s)")

  With dayup

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If sdys = 0

    If shrs = 0

      If Val(smts) < 30

        smts = 30
        schedulerminute.Text = smts & " " & ("minute(s)")

      Endif

      With minutedown

        If Val(smts) <= 30 And .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

    daydown.Enabled = False
    daydown.Mouse = Mouse.Default

  Endif

End

Public Sub daydown_MouseDown()

  If Mouse.Left = True

    With daydowntimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub daydown_MouseUp()

  If Mouse.Left = True

    daydowntimer.Stop
    If daydown.Enabled = True And Mouse.Inside(daydown) = True Then daydownset
    configfileupdate

  Endif

End

Public Sub daydowntimer_Timer()

  If daydowntimer.Delay <> 50 Then daydowntimer.Delay = 50
  If daydown.Enabled = True And Mouse.Inside(daydown) = True Then daydownset

End

Sub hourupset()

  shrs = shrs + 1
  schedulerhour.Text = shrs & " " & ("hour(s)")

  With hourdown

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If shrs = 23

    hourup.Enabled = False
    hourup.Mouse = Mouse.Default

  Endif

  With minutedown

    If Val(smts) > 0 And .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

End

Public Sub hourup_MouseDown()

  If Mouse.Left = True

    With houruptimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub hourup_MouseUp()

  If Mouse.Left = True

    houruptimer.Stop
    If hourup.Enabled = True And Mouse.Inside(hourup) = True Then hourupset
    configfileupdate

  Endif

End

Public Sub houruptimer_Timer()

  If houruptimer.Delay <> 50 Then houruptimer.Delay = 50
  If hourup.Enabled = True And Mouse.Inside(hourup) = True Then hourupset

End

Sub hourdownset()

  shrs = shrs - 1
  schedulerhour.Text = shrs & " " & ("hour(s)")

  With hourup

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If shrs = 0

    If sdys = 0

      If Val(smts) < 30

        smts = 30
        schedulerminute.Text = smts & " " & ("minute(s)")

      Endif

      With minutedown

        If Val(smts) <= 30 And .Enabled = True

          .Enabled = False
          .Mouse = Mouse.Default

        Endif

      End With

    Endif

    hourdown.Enabled = False
    hourdown.Mouse = Mouse.Default

  Endif

End

Public Sub hourdown_MouseDown()

  If Mouse.Left = True

    With hourdowntimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub hourdown_MouseUp()

  If Mouse.Left = True

    hourdowntimer.Stop
    If hourdown.Enabled = True And Mouse.Inside(hourdown) = True Then hourdownset
    configfileupdate

  Endif

End

Public Sub hourdowntimer_Timer()

  If hourdowntimer.Delay <> 50 Then hourdowntimer.Delay = 50
  If hourdown.Enabled = True And Mouse.Inside(hourdown) = True Then hourdownset

End

Sub minuteupset()

  If smts = 55 Then smts = smts + 4 Else smts = smts + 5
  schedulerminute.Text = smts & " " & ("minute(s)")

  With minutedown

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If smts = 59

    minuteup.Enabled = False
    minuteup.Mouse = Mouse.Default

  Endif

End

Public Sub minuteup_MouseDown()

  If Mouse.Left = True

    With minuteuptimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub minuteup_MouseUp()

  If Mouse.Left = True

    minuteuptimer.Stop
    If minuteup.Enabled = True And Mouse.Inside(minuteup) = True Then minuteupset
    configfileupdate

  Endif

End

Public Sub minuteuptimer_Timer()

  If minuteuptimer.Delay <> 50 Then minuteuptimer.Delay = 50
  If minuteup.Enabled = True And Mouse.Inside(minuteup) = True Then minuteupset

End

Sub minutedownset()

  If smts = 59 Then smts = smts - 4 Else smts = smts - 5
  schedulerminute.Text = smts & " " & ("minute(s)")

  With minuteup

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  With minutedown

    If sdys = 0 And shrs = 0 And smts = 30

      .Enabled = False
      .Mouse = Mouse.Default

    Else If smts = 0

      .Enabled = False
      .Mouse = Mouse.Default

    Endif

  End With

End

Public Sub minutedown_MouseDown()

  If Mouse.Left = True

    With minutedowntimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub minutedown_MouseUp()

  If Mouse.Left = True

    minutedowntimer.Stop
    If minutedown.Enabled = True And Mouse.Inside(minutedown) = True Then minutedownset
    configfileupdate

  Endif

End

Public Sub minutedowntimer_Timer()

  If minutedowntimer.Delay <> 50 Then minutedowntimer.Delay = 50
  If minutedown.Enabled = True And Mouse.Inside(minutedown) = True Then minutedownset

End

Sub secondupset()

  If ssds = 95 Then ssds = ssds + 4 Else ssds = ssds + 5
  schedulersecond.Text = ssds & " " & ("seconds")

  With seconddown

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If ssds = 99

    secondup.Enabled = False
    secondup.Mouse = Mouse.Default

  Endif

End

Public Sub secondup_MouseDown()

  If Mouse.Left = True

    With seconduptimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub secondup_MouseUp()

  If Mouse.Left = True

    seconduptimer.Stop
    If secondup.Enabled = True And Mouse.Inside(secondup) = True Then secondupset
    configfileupdate

  Endif

End

Public Sub seconduptimer_Timer()

  If seconduptimer.Delay <> 50 Then seconduptimer.Delay = 50
  If secondup.Enabled = True And Mouse.Inside(secondup) = True Then secondupset

End

Sub seconddownset()

  If ssds = 99 Then ssds = ssds - 4 Else ssds = ssds - 5
  schedulersecond.Text = ssds & " " & ("seconds")

  With secondup

    If .Enabled = False

      .Enabled = True
      .Mouse = Mouse.Pointing

    Endif

  End With

  If ssds = 10

    seconddown.Enabled = False
    seconddown.Mouse = Mouse.Default

  Endif

End

Public Sub seconddown_MouseDown()

  If Mouse.Left = True

    With seconddowntimer

      If .Delay <> 500 Then .Delay = 500
      .Start

    End With

  Endif

End

Public Sub seconddown_MouseUp()

  If Mouse.Left = True

    seconddowntimer.Stop
    If seconddown.Enabled = True And Mouse.Inside(seconddown) = True Then seconddownset
    configfileupdate

  Endif

End

Public Sub seconddowntimer_Timer()

  If seconddowntimer.Delay <> 50 Then seconddowntimer.Delay = 50
  If seconddown.Enabled = True And Mouse.Inside(seconddown) = True Then seconddownset

End

Public Sub windowposition_Click()

  With windowposition

    If .Text = ("Top left") And wpos <> "topleft"

      wpos = "topleft"
      configfileupdate

    Else If .Text = ("Top right") And wpos <> "topright"

      wpos = "topright"
      configfileupdate

    Else If .Text = ("Center") And wpos <> "center"

      wpos = "center"
      configfileupdate

    Else If .Text = ("Bottom left") And wpos <> "bottomleft"

      wpos = "bottomleft"
      configfileupdate

    Else If .Text = ("Bottom right") And wpos <> "bottomright"

      wpos = "bottomright"
      configfileupdate

    Endif

  End With

End

Sub configfileupdate()

  File.Save("/etc/systemback.conf", "storagedir=" & sdir & "\nliveworkdir=" & lwdir & "\npointsnumber=" & pnumber & "\ntimer=" & stimer & "\nschedule=" & sdys & ":" & shrs & ":" & smts & ":" & ssds & "\nsilentmode=" & smode & "\nwindowposition=" & wpos & "\n")

End

Public Sub dirchoose_Select()

  If dirpath.Text <> dirchoose.Key Then dirpath.Text = dirchoose.Key

  If dirchoose[dirchoose.Key].Picture = Picture["dirx.png"]

    If dirpath.Foreground = Color.Default Then dirpath.Foreground = Color.Red

    With dirchooseok

      If .Enabled = True

        .Enabled = False
        .Mouse = Mouse.Default

      Endif

    End With

  Else

    If dirpath.Foreground = Color.Red Then dirpath.Foreground = Color.Default

    With dirchooseok

      If .Enabled = False

        .Enabled = True
        .Mouse = Mouse.Pointing

      Endif

    End With

  Endif

End

Public Sub dirchoose_Expand()

  Dim item, sitem As String

  With dirchoose

    If dirchoose[.Key].Picture <> Picture["dirx.png"]

      Inc Application.Busy

      If IsDir(.Key)

        For Each item In Dir(.Key, "*", gb.Directory)

          If .Exist(.Key & "/" & item) = True And dirchoose[.Key & "/" & item].Picture <> Picture["dirx.png"] And dirchoose[.Key & "/" & item].Count = 0

            Try File.Save(.Key & "/" & item & "/dacc5b5f4502_sbdirtestfile", Null)

            If Not Error

              Chmod .Key & "/" & item & "/dacc5b5f4502_sbdirtestfile" To "rwxrwxrw-"

              If Stat(.Key & "/" & item & "/dacc5b5f4502_sbdirtestfile").Auth = "rwxrwxrw-"

                For Each sitem In Dir(.Key & "/" & item, "*", gb.Directory)

                  If .Exist(.Key & "/" & item & "/" & sitem) = False

                    If sitem = "Systemback"

                      .Add(.Key & "/" & item & "/" & sitem, sitem, Picture["dirx.png"], .Key & "/" & item)
                      If Exist(.Key & "/" & item & "/Systemback/.sbschedule") And function1.Text = ("Storage directory") Then dirchoose[.Key & "/" & item].Picture = Picture["isdir.png"]

                    Else

                      .Add(.Key & "/" & item & "/" & sitem, sitem,, .Key & "/" & item)

                    Endif

                  Else

                    Break

                  Endif

                Next

              Else

                dirchoose[.Key & "/" & item].Picture = Picture["dirx.png"]

              Endif

              Kill .Key & "/" & item & "/dacc5b5f4502_sbdirtestfile"

            Else

              dirchoose[.Key & "/" & item].Picture = Picture["dirx.png"]

            Endif

          Endif

        Next

      Else

        dirchoose[.Key].Picture = Picture["dirx.png"]
        dirchoose[.Key].Expanded = False
        dirchooseok.Enabled = False
        dirchooseok.Mouse = Mouse.Default
        dirpath.Foreground = Color.Red

      Endif

      Dec Application.Busy

    Else

      dirchoose[.Key].Expanded = False

    Endif

  End With

End

Public Sub dirrefresh_Click()

  Dim item, sitem As String
  Dim usrs As String = File.Load("/etc/passwd")

  Inc Application.Busy

  With dirchoose

    If .Count <> 0 Then .Clear

    For Each item In Dir("/", "*", gb.Directory)

      If item = "bin" Or item = "boot" Or item = "cdrom" Or item = "dev" Or item = "etc" Or item = "lib" Or item = "lib32" Or item = "lib64" Or item = "opt" Or item = "proc" Or item = "root" Or item = "run" Or item = "sbin" Or item = "selinux" Or item = "srv" Or item = "sys" Or item = "tmp" Or item = "usr" Or item = "var"

        .Add("/" & item, item, Picture["dirx.png"])

      Else

        Try File.Save("/" & item & "/dacc5b5f4502_sbdirtestfile", Null)

        If Not Error

          Chmod "/" & item & "/dacc5b5f4502_sbdirtestfile" To "rwxrwxrw-"

          If Stat("/" & item & "/dacc5b5f4502_sbdirtestfile").Auth = "rwxrwxrw-"

            If Exist("/" & item & "/Systemback/.sbschedule") And If systembackpanel.Visible = True Or function1.Text = ("Storage directory") Then .Add("/" & item, item, Picture["isdir.png"]) Else .Add("/" & item, item)

            For Each sitem In Dir("/" & item, "*", gb.Directory)

              If item = "home" And InStr(usrs, ":/home/" & sitem & ":") <> 0 Or If sitem = "Systemback" Then .Add("/" & item & "/" & sitem, sitem, Picture["dirx.png"], "/" & item) Else .Add("/" & item & "/" & sitem, sitem,, "/" & item)

            Next

          Else

            .Add("/" & item, item, Picture["dirx.png"])

          Endif

          Kill "/" & item & "/dacc5b5f4502_sbdirtestfile"

        Else

          .Add("/" & item, item, Picture["dirx.png"])

        Endif

      Endif

    Next

    With dirpath

      If dirchoose.Exist("/home") = True

        dirchoose["/home"].Selected = True

      Else If .Text <> "/"

        .Text = "/"
        If .Foreground <> Color.Red Then .Foreground = Color.Red

        With dirchooseok

          If .Enabled = True

            .Enabled = False
            .Mouse = Mouse.Default

          Endif

        End With

      Endif

    End With

  End With

  Dec Application.Busy

End

Public Sub dirchoose_KeyPress()

  If Key.Code = Key.F5 Then dirrefresh_Click

End

Public Sub itemslist_Expand()

  Dim ofile As File
  Dim cline, item, sitem, usr As String
  Dim check As Boolean

  Inc Application.Busy

  ofile = Open "/etc/passwd" For Read
  While Not Eof(ofile)
    Line Input #ofile, cline

    If InStr(cline, ":/home/") <> 0

      usr = Left(cline, InStr(cline, ":") - 1)

      If IsDir("/home/" & usr) And IsDir("/home/" & usr & "/" & itemslist.Key)

        If Stat("/home/" & usr & "/" & itemslist.Key).Type = gb.Directory

          If check <> True Then check = True

          For Each item In Dir("/home/" & usr & "/" & itemslist.Key)

            If Stat("/home/" & usr & "/" & itemslist.Key & "/" & item).Type = gb.Directory And itemslist.Exist(itemslist.Key & "/" & item) = True

              If itemslist[itemslist.Key & "/" & item].Picture <> Picture["dir.png"] Then itemslist[itemslist.Key & "/" & item].Picture = Picture["dir.png"]

              For Each sitem In Dir("/home/" & usr & "/" & itemslist.Key & "/" & item)

                If excludedlist.Find(itemslist.Key & "/" & item & "/" & sitem) = -1 And itemslist.Exist(itemslist.Key & "/" & item & "/" & sitem) = False Then itemslist.Add(itemslist.Key & "/" & item & "/" & sitem, sitem,, itemslist.Key & "/" & item)

              Next

            Endif

          Next

        Endif

      Endif

    Endif

  Wend
  Close #ofile

  For Each item In Dir("/root")

    If IsDir("/root/" & itemslist.Key)

      If Stat("/root/" & itemslist.Key).Type = gb.Directory

        If check <> True Then check = True

        For Each item In Dir("/root/" & itemslist.Key)

          If Stat("/root/" & itemslist.Key & "/" & item).Type = gb.Directory And itemslist.Exist(itemslist.Key & "/" & item) = True

            If itemslist[itemslist.Key & "/" & item].Picture <> Picture["dir.png"] Then itemslist[itemslist.Key & "/" & item].Picture = Picture["dir.png"]

            For Each sitem In Dir("/root/" & itemslist.Key & "/" & item)

              If excludedlist.Find(itemslist.Key & "/" & item & "/" & sitem) = -1 And itemslist.Exist(itemslist.Key & "/" & item & "/" & sitem) = False Then itemslist.Add(itemslist.Key & "/" & item & "/" & sitem, sitem,, itemslist.Key & "/" & item)

            Next

          Endif

        Next

      Endif

    Endif

  Next

  If check = False Then itemslist[itemslist.Key].Expanded = False
  Dec Application.Busy

End

Public Sub itemslist_KeyPress()

  If Key.Code = Key.F5

    If pointexclude.Value = True Then pointexclude_Click Else liveexclude_Click

  Else If itemslist.Key <> Null And If Key.Code = Key.Return Or Key.Code = Key.Enter

    additem_Click

  Endif

End

Public Sub excludedlist_KeyPress()

  If excludedlist.Index <> -1 And Key.Code = Key.Delete

    removeitem_Click

  Endif

End

Public Sub windowsizeworkaround_Timer()

  With systembackgui

    If .W = 700 Or .W = 702 Or .W = 704 Or .W = 706 Or .W = 708 Or .W = 710 Or .W = 508 Or .W = 510 Or .W = 512 Or .W = 514 Or .W = 516 Or .W = 518 Or .W = 404 Or .W = 406 Or .W = 408 Or .W = 410 Or .W = 412 Or .W = 414

      If Component.IsLoaded("gb.gtk") = True

        .X = .X - 1

      Else If mainpanel.Visible = True

        .Resize(698, 465)

      Else If dialogpanel.Visible = True

        .Resize(506, 201)

      Else

        .Resize(402, 161)

      Endif

      windowsizeworkaround.Stop

    Else If wround = 30

      windowsizeworkaround.Stop

    Else

      wround = wround + 1

    Endif

  End With

End

Public Sub textoutputwindow_MouseDown()

  If Mouse.Left Then textoutputwindow.Foreground = Color.SelectedBackground

End

Public Sub textoutputwindow_MouseUp()

  Dim wtext As String = ("Welcome to the Systemback text output window!")

  If textoutputwindow.Foreground = Color.SelectedBackground

    Unlock slock
    Unlock dlock
    If Component.IsLoaded("gb.gtk") Then Exec ["xterm", "+sb", "-bg", "grey85", "-fg", "grey25", "-fa", "a", "-fs", "9", "-geometry", "80x24+80+70", "-n", "Systemback text output", "-T", "Systemback text output", "-cr", "grey40", "-selbg", "grey86", "-bw", "0", "-bc", "-bcf", "500", "-bcn", "500", "-e", "echo " & wtext & " ; echo -------------------------------------------------------------------------------- ; GB_GUI=gb.gtk /usr/share/systemback/systembackgui notextoutput"] Else Exec ["xterm", "+sb", "-bg", "grey85", "-fg", "grey25", "-fa", "a", "-fs", "9", "-geometry", "80x24+80+70", "-n", "Systemback text output", "-T", "Systemback text output", "-cr", "grey40", "-selbg", "grey86", "-bw", "0", "-bc", "-bcf", "500", "-bcn", "500", "-e", "echo " & wtext & " ; echo -------------------------------------------------------------------------------- ; GB_GUI=gb.qt4 /usr/share/systemback/systembackgui notextoutput"]
    systembackgui.Close

  Endif

End

Public Sub textoutputwindow_MouseMove()

  If Mouse.Left = True

    With textoutputwindow

      If Mouse.Inside(textoutputwindow) = True

        If .Foreground = Color.Background Then .Foreground = Color.SelectedBackground

      Else If .Foreground = Color.SelectedBackground

        .Foreground = Color.Background

      Endif

    End With

  Endif

End
